{
  "swagger": "2.0",
  "info": {
    "title": "Webservices API",
    "description": "Endpoints documentation and sandbox",
    "version": "2.0.8"
  },
  "paths": {
    "/login_check": {
      "post": {
        "summary": "Authenticate user and retrieve a token valid for 15 min, working with Content-Type multipart/form-data and x-www-form-urlencoded",
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "_username",
            "in": "formData",
            "required": true,
            "description": "Your login",
            "type": "string"
          },
          {
            "name": "_password",
            "in": "formData",
            "required": true,
            "description": "Your password",
            "type": "string",
            "format": "password"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AuthenticationModel"
            }
          },
          "401": {
            "description": "Bad credentials",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/login_json": {
      "post": {
        "summary": "Authenticate user and retrieve a token valid for 15 min, working with Content-Type application/json",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "credentials",
            "in": "body",
            "description": "Json document containing username and password",
            "schema": {
              "properties": {
                "_username": {
                  "type": "string"
                },
                "_password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AuthenticationModel"
            }
          },
          "401": {
            "description": "Bad credentials",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/refresh": {
      "post": {
        "summary": "Renew token, working with Content-Type multipart/form-data and x-www-form-urlencoded",
        "description": "Give you another token/refresh_token couple, this endpoint needs an authentication token",
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "refresh_token",
            "in": "formData",
            "required": true,
            "description": "Your refresh token",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Bearer {Expired JWT}",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AuthenticationModel"
            }
          },
          "401": {
            "description": "Bad credentials",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/codes/city/{term}": {
      "get": {
        "summary": "Return the list of cities",
        "parameters": [
          {
            "name": "term",
            "in": "path",
            "required": true,
            "description": "Term to search",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/City"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Codes"
        ]
      }
    },
    "/companies/{country}/{id}/financial/balance/current/{type}": {
      "get": {
        "summary": "Return current balance information for a given company",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "description": "Type of balance",
            "type": "string",
            "enum": [
              "social",
              "consolidated"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Balance"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Financial"
        ]
      }
    },
    "/companies/{country}/{id}/financial/balance/{closingDate}/{type}": {
      "get": {
        "summary": "Return balance information for a given company",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "closingDate",
            "in": "path",
            "required": true,
            "description": "Specific year for balance",
            "type": "string",
            "pattern": "^\\d+$"
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "description": "Type of balance",
            "type": "string",
            "enum": [
              "social",
              "consolidated"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Balance"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Financial"
        ]
      }
    },
    "/companies/{country}/{id}/financial/balance/{closingDate}/{type}/ratios": {
      "get": {
        "summary": "Return balance ratios for a given company",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "closingDate",
            "in": "path",
            "required": true,
            "description": "Specific year for balance",
            "type": "string",
            "pattern": "^\\d+$"
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "description": "Type of balance",
            "type": "string",
            "enum": [
              "social",
              "consolidated"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Ratios"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Financial"
        ]
      }
    },
    "/companies/{country}/{id}/financial/balances": {
      "get": {
        "summary": "Return balances list for a given company",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "description": "Type of balance social or consolidated",
            "type": "string",
            "enum": [
              "social",
              "consolidated"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Balances"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Financial"
        ]
      }
    },
    "/companies/{country}/{id}/financial/balance/{closingDate}/{type}/raw": {
      "get": {
        "summary": "Return balance raw information for a given company",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "closingDate",
            "in": "path",
            "required": true,
            "description": "Specific year for balance",
            "type": "string",
            "pattern": "^\\d+$"
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "description": "Type of balance",
            "type": "string",
            "enum": [
              "social",
              "consolidated"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BalanceRawData"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Financial"
        ]
      }
    },
    "/companies/{country}/{id}/financial/balance/{closingDate}/{type}/sig": {
      "get": {
        "summary": "Return intermediary accounting totals information for a given company",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "closingDate",
            "in": "path",
            "required": true,
            "description": "Specific year for balance",
            "type": "string",
            "pattern": "^\\d+$"
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "description": "Type of balance",
            "type": "string",
            "enum": [
              "social",
              "consolidated"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SoldeIntermediaireGestion"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Financial"
        ]
      }
    },
    "/companies/{country}/{id}/financial/balance/{closingDate}/{balanceType}/documents/accounting": {
      "get": {
        "summary": "Return balance in PDF if available",
        "description": "",
        "produces": [
          "application/pdf",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "closingDate",
            "in": "path",
            "required": true,
            "description": "Specific year for balance",
            "type": "string",
            "pattern": "^\\d+$"
          },
          {
            "name": "balanceType",
            "in": "path",
            "required": true,
            "description": "Type of balance",
            "type": "string",
            "enum": [
              "social",
              "consolidated"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Pdf stream"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Financial"
        ]
      }
    },
    "/companies/{country}/{id}/financial/balance/{millesime}/{balanceType}/documents/audit/{numDepot}": {
      "get": {
        "summary": "Return full balance with auditor report in PDF if available",
        "description": "",
        "produces": [
          "application/pdf",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "millesime",
            "in": "path",
            "required": true,
            "description": "Year, exclusively used with documentType = 'audit'",
            "type": "string"
          },
          {
            "name": "balanceType",
            "in": "path",
            "required": true,
            "description": "Type of balance",
            "type": "string",
            "enum": [
              "social",
              "consolidated"
            ]
          },
          {
            "name": "numDepot",
            "in": "path",
            "required": true,
            "description": "Document number, exclusively used with documentType = 'audit'",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Pdf stream"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Financial"
        ]
      }
    },
    "/companies/{country}/{id}/financial/balance/{closingDate}/{balanceType}/documents/table": {
      "get": {
        "summary": "Return balance in XLSX if available",
        "description": "",
        "produces": [
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "closingDate",
            "in": "path",
            "required": true,
            "description": "Specific year for balance",
            "type": "string",
            "pattern": "^\\d+$"
          },
          {
            "name": "balanceType",
            "in": "path",
            "required": true,
            "description": "Type of balance",
            "type": "string",
            "enum": [
              "social",
              "consolidated"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Pdf stream"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Financial"
        ]
      }
    },
    "/companies/{country}/{id}/events": {
      "get": {
        "summary": "Return all events for a company. Return the 20 last events, result can be paginated and filtered",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "type": "integer"
          },
          {
            "name": "number",
            "in": "query",
            "description": "Number of result by page",
            "type": "integer"
          },
          {
            "name": "column",
            "in": "query",
            "description": "Column name in JSONPath format (start with '$.') for sorting (example: `$.name`)",
            "type": "string",
            "pattern": "/^\\$\\./"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sorting order, 'asc' or 'desc'",
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "name": "filters",
            "in": "query",
            "description": "Filters parameters in format `{JsonPath},{value}` (example: `$.eventCode,1100`)",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "List of events related to the company",
            "schema": {
              "$ref": "#/definitions/Events"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Events"
        ]
      }
    },
    "/companies/{country}/{id}/executives": {
      "get": {
        "summary": "Return all executives for a given company",
        "description": "Use /companies/{country}/{id}/executives/terms instead",
        "deprecated": true,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Executives"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Executive"
        ]
      }
    },
    "/companies/{country}/{id}/executives/in-office": {
      "get": {
        "summary": "Return all in office executives for a given company",
        "description": "Use /companies/{country}/{id}/executives/terms instead",
        "deprecated": true,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit results",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Executives"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Executive"
        ]
      }
    },
    "/companies/{country}/{id}/executives/terms": {
      "get": {
        "summary": "Return all executives's terms for a given company ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "blockId",
            "in": "query",
            "required": false,
            "description": "block identifier",
            "type": "integer"
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "description": "true(active) or false(inactive)",
            "type": "boolean"
          },
          {
            "name": "positionRole",
            "in": "query",
            "required": false,
            "description": "Type of term",
            "type": "string",
            "enum": [
              "M",
              "O",
              "CAC"
            ]
          },
          {
            "name": "orders[name]",
            "in": "query",
            "required": false,
            "description": "Executive name (asc/desc)",
            "type": "string"
          },
          {
            "name": "orders[term.position_code]",
            "in": "query",
            "required": false,
            "description": "Executive position code (asc/desc)",
            "type": "string"
          },
          {
            "name": "orders[term.start_date]",
            "in": "query",
            "required": false,
            "description": "Term start date (asc/desc)",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Executives2"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Executive"
        ]
      }
    },
    "/companies/{country}/{id}/executives/blocks": {
      "get": {
        "summary": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "blockId",
            "in": "query",
            "required": false,
            "description": "block identifier",
            "type": "integer"
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "description": "true(active) or false(inactive)",
            "type": "boolean"
          },
          {
            "name": "positionRole",
            "in": "query",
            "required": false,
            "description": "Type of term",
            "type": "string",
            "enum": [
              "M",
              "O",
              "CAC"
            ]
          },
          {
            "name": "orders[name]",
            "in": "query",
            "required": false,
            "description": "Executive name  (asc/desc)",
            "type": "string"
          },
          {
            "name": "orders[term.position_code]",
            "in": "query",
            "required": false,
            "description": "Term position code (asc/desc)",
            "type": "string"
          },
          {
            "name": "orders[position.show_order]",
            "in": "query",
            "required": false,
            "description": "priority of a membership (asc/desc)",
            "type": "string"
          },
          {
            "name": "orders[term.start_date]",
            "in": "query",
            "required": false,
            "description": "Term start date (asc/desc)",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Block"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Executive"
        ]
      }
    },
    "/companies/{country}/{id}/financial/debtStatus": {
      "get": {
        "summary": "Return debt status for a given company",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DebtStatus"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Financial"
        ]
      }
    },
    "/companies/{country}/{id}/financial/debtStatus/privileges": {
      "get": {
        "summary": "Return privileges for a given company",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "typePrivilege",
            "in": "query",
            "description": "Privilege type (03 for social, 04 for tax office)",
            "type": "string",
            "pattern": "^\\d{2}$"
          },
          {
            "name": "status[]",
            "in": "query",
            "description": "Privilege status : 1=Actif, 2=Partiellement radi\u00e9, 3=Radi\u00e9, 4=Expir\u00e9",
            "type": "integer"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sorting order",
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "name": "column",
            "in": "query",
            "description": "Sorting column",
            "type": "string",
            "enum": [
              "status",
              "inscriptionDate",
              "inscriptionNumber",
              "debtAmount",
              "creditorName",
              "greffe"
            ]
          },
          {
            "name": "paginate",
            "in": "query",
            "description": "Activate/deactivate pagination",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PrivilegeDetails"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Financial"
        ]
      }
    },
    "/companies/{country}/{id}/identity/contact": {
      "get": {
        "summary": "Return contact information for a given company",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Company"
        ]
      }
    },
    "/companies/{country}/{id}/identity": {
      "get": {
        "summary": "Return identity card of a company",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Identity"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Company"
        ]
      }
    },
    "/companies/{country}/{id}/identity/workforce": {
      "get": {
        "summary": "Return workforce of a company",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Workforce"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Company"
        ]
      }
    },
    "/companies/{country}/{id}/kyc/ubo": {
      "get": {
        "summary": "Return a list of ultimate beneficial owners",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/KycUbo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "KYC/Compliance"
        ]
      }
    },
    "/companies/{country}/{id}/kyc/conformity/activityRisk": {
      "get": {
        "summary": "Return a risk for an activity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Activity risk",
            "schema": {
              "$ref": "#/definitions/ConformityRisk"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "KYC/Compliance"
        ]
      }
    },
    "/companies/{country}/{id}/kyc": {
      "get": {
        "summary": "Return ultimate beneficial owners and conformity informations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/KycModel"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "KYC/Compliance"
        ]
      }
    },
    "/companies/{country}/{id}/kyc/conformity/operatingRisk": {
      "get": {
        "summary": "Return conformity operating risk informations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Operating risk",
            "schema": {
              "$ref": "#/definitions/ConformityRisk"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "KYC/Compliance"
        ]
      }
    },
    "/companies/{country}/{id}/kyc/conformity": {
      "get": {
        "summary": "Return conformity informations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Conformity"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "KYC/Compliance"
        ]
      }
    },
    "/companies/{country}/{id}/kyc/conformity/countryRisk": {
      "get": {
        "summary": "Return country Risk",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Country risk",
            "schema": {
              "$ref": "#/definitions/ConformityRisk"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "KYC/Compliance"
        ]
      }
    },
    "/companies/{country}/{id}/legal": {
      "get": {
        "summary": "All legal information",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "column",
            "in": "query",
            "description": "Column name in JSONPath format (start with '$.') for sorting",
            "type": "string",
            "pattern": "/^\\$\\./"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sorting order, 'asc' or 'desc'",
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Legal information",
            "schema": {
              "$ref": "#/definitions/Legal"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Legal information"
        ]
      }
    },
    "/companies/{country}/{id}/legal/deposits": {
      "get": {
        "summary": "List of legal file deposit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/LegalDepositList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Legal information"
        ]
      }
    },
    "/companies/{country}/{id}/legal/deposits/{depositId}": {
      "get": {
        "summary": "Get legal deposit files as PDF",
        "produces": [
          "application/pdf",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "depositId",
            "in": "path",
            "required": true,
            "description": "Document id, can be found in deposit list",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          }
        ],
        "responses": {
          "200": {
            "description": "PDF Datastream"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Legal information"
        ]
      }
    },
    "/companies/{country}/{id}/legal/status": {
      "get": {
        "summary": "Get legal status as PDF",
        "produces": [
          "application/pdf",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "date",
            "in": "query",
            "description": "Date of the last status update, can be found in deposit list",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "PDF Datastream"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Legal information"
        ]
      }
    },
    "/companies/{country}/{id}/links": {
      "get": {
        "summary": "Return links members information for a given company",
        "parameters": [
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Links"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Ownership relations"
        ]
      }
    },
    "/companies/{country}/{id}/links/shareholders": {
      "get": {
        "summary": "Return shareholders information for a given company",
        "parameters": [
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Shareholders"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Ownership relations"
        ]
      }
    },
    "/companies/{country}/{id}/links/subsidiaries": {
      "get": {
        "summary": "Return subsidiaries information for a given company",
        "parameters": [
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Subsidiaries"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Ownership relations"
        ]
      }
    },
    "/companies/{country}/{id}/mandataire": {
      "get": {
        "summary": "Return the company legal representative",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Executive"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Company"
        ]
      }
    },
    "/companies/{country}/{id}/mandats": {
      "get": {
        "summary": "All assignments for the given company",
        "description": "Use /companies/{country}/{id}/terms instead",
        "deprecated": true,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CompanyMandats"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Company"
        ]
      }
    },
    "/companies/{country}/{id}/terms": {
      "get": {
        "summary": "All assignments for the given company",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "blockId",
            "in": "query",
            "required": false,
            "description": "Unique identifier representing a block",
            "type": "integer"
          },
          {
            "name": "positionRole",
            "in": "query",
            "required": false,
            "description": "Role representing the type of a membership",
            "type": "string",
            "enum": [
              "M",
              "O",
              "CAC"
            ]
          },
          {
            "name": "principal",
            "in": "query",
            "required": false,
            "description": "",
            "type": "boolean"
          },
          {
            "name": "termsState",
            "in": "query",
            "required": false,
            "description": "Filters companies with at least one (true) or no (false) active term of office",
            "type": "boolean"
          },
          {
            "name": "orders[start_date]",
            "in": "query",
            "required": false,
            "description": "Term of office start date (asc/desc)",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExecutiveTerms"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Company"
        ]
      }
    },
    "/companies/{country}/{id}/kyc/conformity/report": {
      "get": {
        "summary": "Return conformity report as PDF",
        "description": "You can  also request base64 encoded file with .base64 extension or send it by mail with .mail extension",
        "produces": [
          "application/pdf",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "module",
            "in": "query",
            "required": true,
            "description": "Modules to extract in report, with their parameters",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          {
            "name": "comment",
            "in": "body",
            "required": false,
            "description": "Json document containing comment",
            "schema": {
              "properties": {
                "comment": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Document Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Company"
        ]
      },
      "post": {
        "summary": "Return conformity report as PDF",
        "description": "You can  also request base64 encoded file with .base64 extension or send it by mail with .mail extension",
        "produces": [
          "application/pdf",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "module",
            "in": "query",
            "required": true,
            "description": "Modules to extract in report, with their parameters",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          {
            "name": "comment",
            "in": "body",
            "required": false,
            "description": "Json document containing comment",
            "schema": {
              "properties": {
                "comment": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Document Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Company"
        ]
      }
    },
    "/companies/{country}/{id}/report": {
      "get": {
        "summary": "Return full report as PDF",
        "description": "You can also request base64 encoded file with .base64 extension or send it by mail with .mail extension",
        "produces": [
          "application/pdf",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "module",
            "in": "query",
            "required": true,
            "description": "Modules to extract in report, with their parameters",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          {
            "name": "comment",
            "in": "body",
            "required": false,
            "description": "Json document containing comment",
            "schema": {
              "properties": {
                "comment": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Document Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Company"
        ]
      },
      "post": {
        "summary": "Return full report as PDF",
        "description": "You can also request base64 encoded file with .base64 extension or send it by mail with .mail extension",
        "produces": [
          "application/pdf",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "module",
            "in": "query",
            "required": true,
            "description": "Modules to extract in report, with their parameters",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          {
            "name": "comment",
            "in": "body",
            "required": false,
            "description": "Json document containing comment",
            "schema": {
              "properties": {
                "comment": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Document Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Company"
        ]
      }
    },
    "/companies/{country}/{id}/report/purchase": {
      "get": {
        "summary": "Purchase full report (international only)",
        "parameters": [
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "reportType",
            "in": "query",
            "description": "Report type",
            "type": "string",
            "default": "online",
            "enum": [
              "online",
              "offline"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Purchase Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Company"
        ]
      }
    },
    "/companies/{country}/{id}/reports": {
      "get": {
        "summary": "List all reports for a company (international only)",
        "parameters": [
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "properties": {
                "id": {
                  "example": 29,
                  "type": "integer"
                },
                "uuid": {
                  "example": "0ee518ab-bd73-49a3-8548-d5d83d5c659f",
                  "type": "string"
                },
                "companyName": {
                  "example": "infolegale",
                  "type": "string"
                },
                "Status": {
                  "example": "finished",
                  "type": "string"
                },
                "country": {
                  "example": "FR",
                  "type": "string"
                },
                "companyId": {
                  "example": "infolegaleId",
                  "type": "string"
                },
                "date": {
                  "example": "2002-10-02T15:00:00.05Z",
                  "type": "string",
                  "format": "date-time"
                },
                "reportType": {
                  "example": "online",
                  "type": "string",
                  "enum": [
                    "online",
                    "offline"
                  ]
                },
                "creditDeviceId": {
                  "example": "1094073",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Company"
        ]
      }
    },
    "/companies/{country}/reports": {
      "post": {
        "summary": "List last report for company ids (international only)",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "ids",
            "in": "body",
            "required": true,
            "description": "list of companies unique identifier",
            "schema": {
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Company"
        ]
      }
    },
    "/companies/{country}/{id}/report-financial": {
      "get": {
        "summary": "Return financial report as PDF",
        "description": "You can also request base64 encoded file with .base64 extension or send it by mail with .mail extension",
        "produces": [
          "application/pdf",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "module",
            "in": "query",
            "required": true,
            "description": "Modules to extract in report, with their parameters",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          {
            "name": "comment",
            "in": "body",
            "required": false,
            "description": "Json document containing comment",
            "schema": {
              "properties": {
                "comment": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Document Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Company"
        ]
      },
      "post": {
        "summary": "Return financial report as PDF",
        "description": "You can also request base64 encoded file with .base64 extension or send it by mail with .mail extension",
        "produces": [
          "application/pdf",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "module",
            "in": "query",
            "required": true,
            "description": "Modules to extract in report, with their parameters",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          {
            "name": "comment",
            "in": "body",
            "required": false,
            "description": "Json document containing comment",
            "schema": {
              "properties": {
                "comment": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Document Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Company"
        ]
      }
    },
    "/companies/{country}/{id}/site/{sid}/report": {
      "get": {
        "summary": "Return site report as PDF",
        "description": "You can also request base64 encoded file with .base64 extension or send it by mail with .mail extension",
        "produces": [
          "application/pdf",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "sid",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a site",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Document Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Company"
        ]
      }
    },
    "/companies/{country}/{id}/risk": {
      "get": {
        "summary": "Return a company risk class",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Risk"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Company",
          "Score"
        ]
      }
    },
    "/companies/{country}/{id}/score": {
      "get": {
        "summary": "Return a company score",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Score"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Company",
          "Score"
        ]
      }
    },
    "/companies/{country}/{id}/kyc/conformity/screening": {
      "get": {
        "summary": "Return screening candidates for given modules",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "modules[]",
            "in": "query",
            "description": "Conformity screening module, by default all modules are selected",
            "items": {
              "type": "string",
              "enum": [
                "company",
                "executives",
                "shareholders",
                "ubos",
                "group"
              ]
            },
            "type": "array",
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "Screening candidates",
            "schema": {
              "$ref": "#/definitions/ScreeningCandidates"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "KYC/Compliance"
        ]
      }
    },
    "/companies/{country}/{id}/kyc/conformity/screening/purchase": {
      "get": {
        "summary": "Return purchased screening candidates for given modules",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "modules[]",
            "in": "query",
            "description": "Conformity screening module you want to purchase, by default all modules are selected",
            "items": {
              "type": "string",
              "enum": [
                "company",
                "executives",
                "shareholders",
                "ubos",
                "group"
              ]
            },
            "type": "array",
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "Purchased screening candidates",
            "schema": {
              "$ref": "#/definitions/ScreeningCandidates"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "KYC/Compliance"
        ]
      }
    },
    "/companies/{country}/{id}/kyc/conformity/screening/process": {
      "post": {
        "summary": "Process a screening candidate and return screening candidates for given modules",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "modules[]",
            "in": "query",
            "description": "Conformity screening module, by default all modules are selected",
            "items": {
              "type": "string",
              "enum": [
                "company",
                "executives",
                "shareholders",
                "ubos",
                "group"
              ]
            },
            "type": "array",
            "collectionFormat": "multi"
          },
          {
            "name": "Screening process",
            "in": "body",
            "required": true,
            "description": "Informations to proceed a candidate, `candidatesId`, `candidateId` and `processed` are \u003Cstrong\u003Emandatory\u003C/strong\u003E. `siren` and `individualId` are \u003Cstrong\u003Eoptionnal\u003C/strong\u003E and can be null.",
            "schema": {
              "items": {
                "properties": {
                  "candidatesId": {
                    "example": "acb608e10b979da6c4cd8b257a3daa8faaaf4966",
                    "type": "string"
                  },
                  "candidateId": {
                    "example": "WX0003695338",
                    "type": "string"
                  },
                  "processed": {
                    "example": true,
                    "type": "boolean"
                  },
                  "siren": {
                    "example": 304187701,
                    "type": "integer"
                  },
                  "individualId": {
                    "example": "91358",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Screening candidates",
            "schema": {
              "$ref": "#/definitions/ScreeningCandidates"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "KYC/Compliance"
        ]
      }
    },
    "/companies/{country}/{id}/kyc/conformity/summary": {
      "get": {
        "summary": "Return complify summary for company",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Complify summary for company",
            "schema": {
              "$ref": "#/definitions/KycConformitySummaryModel"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "KYC/Compliance"
        ]
      }
    },
    "/companies/{country}/{id}/screening": {
      "get": {
        "summary": "Return screening of a company",
        "deprecated": true,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Screening candidates for a company",
            "schema": {
              "$ref": "#/definitions/ScreeningCandidates2"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "KYC/Compliance"
        ]
      }
    },
    "/companies/{country}/{id}/executives/screening": {
      "get": {
        "summary": "Return screening of company's executives",
        "deprecated": true,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Screening candidates for company's executives",
            "schema": {
              "$ref": "#/definitions/ScreeningCandidates2"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "KYC/Compliance"
        ]
      }
    },
    "/companies/{country}/{id}/links/shareholders/screening": {
      "get": {
        "summary": "Return screening of company's shareholders",
        "deprecated": true,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Screening candidates for company's shareholders",
            "schema": {
              "$ref": "#/definitions/ScreeningCandidates2"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "KYC/Compliance"
        ]
      }
    },
    "/companies/{country}/{id}/kyc/ubo/screening": {
      "get": {
        "summary": "Return screening of ultimate beneficial owners",
        "deprecated": true,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Screening candidates for company's shareholders",
            "schema": {
              "$ref": "#/definitions/ScreeningCandidates2"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "KYC/Compliance"
        ]
      }
    },
    "/companies/{country}/{id}/group/screening": {
      "get": {
        "summary": "Return screening for company group head",
        "deprecated": true,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Screening candidates for company group head",
            "schema": {
              "$ref": "#/definitions/ScreeningCandidates2"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "KYC/Compliance"
        ]
      }
    },
    "/companies/{country}/{id}/conformity/summary": {
      "get": {
        "summary": "Return complify summary for company",
        "deprecated": true,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Complify summary for company",
            "schema": {
              "items": {
                "properties": {
                  "reason": {
                    "example": "low",
                    "type": "string"
                  },
                  "status": {
                    "example": "Risque Faible",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "KYC/Compliance"
        ]
      }
    },
    "/companies/{country}/{id}": {
      "get": {
        "summary": "Return a company",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Company"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Company"
        ]
      }
    },
    "/companies/{country}/{id}/availability": {
      "get": {
        "summary": "Return which data are available for a company",
        "description": "True when data are available, false otherwise, null if you can not access data",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Availability"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          }
        },
        "tags": [
          "Company"
        ]
      }
    },
    "/monitoring/alert": {
      "get": {
        "summary": "Return a list of alerts",
        "parameters": [
          {
            "name": "entityId",
            "in": "query",
            "required": false,
            "description": "Identifiant unique repr\u00e9sentant une entit\u00e9",
            "type": "integer"
          },
          {
            "name": "userEmail",
            "in": "query",
            "required": false,
            "description": "Email de l'utilisateur",
            "type": "string"
          },
          {
            "name": "alertMinDate",
            "in": "query",
            "required": false,
            "description": "Date de d\u00e9but de recherche de parution des alertes (format yyyy-mm-dd)",
            "type": "string"
          },
          {
            "name": "alertMaxDate",
            "in": "query",
            "required": false,
            "description": "Date de fin de recherche de parution des alertes (format yyyy-mm-dd)",
            "type": "string"
          },
          {
            "name": "source[]",
            "in": "query",
            "required": false,
            "description": "Enum sur la source de l\u2019alerte, Available values : BOD, JAL, PRE, RPC, SIR, TCO",
            "type": "string",
            "enum": [
              "BOD",
              "JAL",
              "PRE",
              "RPC",
              "SIR",
              "TCO"
            ]
          },
          {
            "name": "isPerso",
            "in": "query",
            "required": false,
            "description": "Valeur de filtrage sur les portfolios perso (1) ou pro (0)",
            "type": "integer",
            "enum": [
              0,
              1
            ]
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Entier repr\u00e9sentant le num\u00e9ro de la page",
            "type": "integer"
          },
          {
            "name": "number",
            "in": "query",
            "required": false,
            "description": "Nombre de r\u00e9sultats par page",
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Valeur de retour \u00e0 trier (nom de la colonne)",
            "type": "string",
            "default": "adId",
            "enum": [
              "adId",
              ""
            ]
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "description": "Ordre ascendant ou descendant portant sur la condition de trie",
            "type": "string",
            "default": "ASC",
            "enum": [
              "ASC",
              "DESC"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MonitoringAlertsList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Monitoring"
        ]
      }
    },
    "/monitoring/alert/portfolio/{portfolioId}": {
      "get": {
        "summary": "Return a list of alerts by portfolio id",
        "parameters": [
          {
            "name": "portfolioId",
            "in": "path",
            "required": true,
            "description": "Identifiant du portefeuille dont on veut les alertes",
            "type": "integer"
          },
          {
            "name": "alertMinDate",
            "in": "query",
            "required": false,
            "description": "Date de d\u00e9but de recherche de parution des alertes (format yyyy-mm-dd)",
            "type": "string"
          },
          {
            "name": "alertMaxDate",
            "in": "query",
            "required": false,
            "description": "Date de fin de recherche de parution des alertes (format yyyy-mm-dd)",
            "type": "string"
          },
          {
            "name": "source[]",
            "in": "query",
            "required": false,
            "description": "Enum sur la source de l\u2019alerte, Available values : BOD, JAL, PRE, RPC, SIR, TCO",
            "type": "string",
            "enum": [
              "BOD",
              "JAL",
              "PRE",
              "RPC",
              "SIR",
              "TCO"
            ]
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Entier repr\u00e9sentant le num\u00e9ro de la page",
            "type": "integer"
          },
          {
            "name": "number",
            "in": "query",
            "required": false,
            "description": "Nombre de r\u00e9sultats par page",
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Valeur de retour \u00e0 trier (nom de la colonne)",
            "type": "string",
            "default": "adId",
            "enum": [
              "adId",
              ""
            ]
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "description": "Ordre ascendant ou descendant portant sur la condition de trie",
            "type": "string",
            "default": "ASC",
            "enum": [
              "ASC",
              "DESC"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MonitoringAlertsList2"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Monitoring"
        ]
      }
    },
    "/monitoring/portfolio/{portfolioId}/item": {
      "get": {
        "summary": "Return a list of items",
        "parameters": [
          {
            "name": "portfolioId",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a portfolio",
            "type": "integer"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page number",
            "type": "integer"
          },
          {
            "name": "number",
            "in": "query",
            "required": false,
            "description": "Number of result by page",
            "type": "integer"
          },
          {
            "name": "customCode",
            "in": "query",
            "required": false,
            "description": "Filter for a custom code",
            "type": "integer"
          },
          {
            "name": "eventCode",
            "in": "query",
            "required": false,
            "description": "Filter for the event code",
            "type": "integer"
          },
          {
            "name": "siren",
            "in": "query",
            "required": false,
            "description": "Filter for a siren",
            "type": "integer"
          },
          {
            "name": "cname",
            "in": "query",
            "required": false,
            "description": "Search text in company name",
            "type": "string"
          },
          {
            "name": "ilgScoreOrigin",
            "in": "query",
            "required": false,
            "description": "Filter for a origin score",
            "type": "integer"
          },
          {
            "name": "customCredit[min]",
            "in": "query",
            "required": false,
            "description": "Filter for a custom credit min",
            "type": "integer"
          },
          {
            "name": "customCredit[max]",
            "in": "query",
            "required": false,
            "description": "Filter for a custom credit max",
            "type": "integer"
          },
          {
            "name": "portfolio",
            "in": "query",
            "required": false,
            "description": "List of monitoring for a portfolio",
            "type": "integer"
          },
          {
            "name": "userEmail",
            "in": "query",
            "required": false,
            "description": "List of monitoring for a user",
            "type": "string"
          },
          {
            "name": "monitoringStartDate[min]",
            "in": "query",
            "required": false,
            "description": "Filter for a start date of monitoring min (YYYY-MM-DD)",
            "type": "string"
          },
          {
            "name": "monitoringStartDate[max]",
            "in": "query",
            "required": false,
            "description": "Filter for a start date of monitoring max (YYYY-MM-DD)",
            "type": "string"
          },
          {
            "name": "creationDate[min]",
            "in": "query",
            "required": false,
            "description": "Filter for a creation date of monitoring min (YYYY-MM-DD)",
            "type": "string"
          },
          {
            "name": "creationDate[max]",
            "in": "query",
            "required": false,
            "description": "Filter for a creation date of monitoring max (YYYY-MM-DD)",
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Value to sort",
            "type": "string",
            "default": "monitoringStartDate",
            "enum": [
              "siren",
              "customCode",
              "customCredit",
              "monitoringStartDate"
            ]
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "description": "Sorting order, \u2018asc\u2019 or \u2018desc\u2019",
            "type": "string",
            "default": "DESC",
            "enum": [
              "ASC",
              "DESC"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PortfolioItems"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Monitoring"
        ]
      },
      "post": {
        "summary": "Add item to PF",
        "parameters": [
          {
            "name": "portfolioId",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a portfolio",
            "type": "integer"
          },
          {
            "name": "Item detail",
            "in": "body",
            "required": true,
            "description": "Information of Item",
            "schema": {
              "properties": {
                "siren": {
                  "example": "unique identifier of company",
                  "type": "integer"
                },
                "reference": {
                  "example": "reference",
                  "type": "string"
                },
                "credit": {
                  "example": "credit",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "the item have been added"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Monitoring"
        ]
      }
    },
    "/monitoring/portfolio/{portfolioId}/items": {
      "delete": {
        "summary": "Delete items from PF",
        "parameters": [
          {
            "name": "portfolioId",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a portfolio",
            "type": "integer"
          },
          {
            "name": "Ids of item",
            "in": "body",
            "required": true,
            "schema": {
              "properties": {
                "idsItems": {
                  "items": {
                    "example": "57687967",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The items have been removed"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Monitoring"
        ]
      }
    },
    "/monitoring/portfolio/{portfolioId}/item/{itemId}": {
      "patch": {
        "summary": "Update item from PF",
        "parameters": [
          {
            "name": "portfolioId",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a portfolio",
            "type": "integer"
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a item",
            "type": "integer"
          },
          {
            "name": "Item detail",
            "in": "body",
            "required": true,
            "description": "Information of Item",
            "schema": {
              "properties": {
                "reference": {
                  "example": "reference",
                  "type": "string"
                },
                "credit": {
                  "example": 55000,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The items have been removed"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Monitoring"
        ]
      },
      "delete": {
        "summary": "Delete items from PF",
        "parameters": [
          {
            "name": "portfolioId",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a portfolio",
            "type": "integer"
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a item",
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "The items have been removed"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Monitoring"
        ]
      }
    },
    "/monitoring/targets": {
      "get": {
        "summary": "Return a list of targets",
        "parameters": [
          {
            "name": "entityId",
            "in": "query",
            "required": false,
            "description": "Unique identifier representing a customer",
            "type": "integer"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page number",
            "type": "integer"
          },
          {
            "name": "number",
            "in": "query",
            "required": false,
            "description": "Number of result by page",
            "type": "integer"
          },
          {
            "name": "nom",
            "in": "query",
            "required": false,
            "description": "partial search for the firstname + name",
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "description": "partial search for the email",
            "type": "string"
          },
          {
            "name": "portfolioId",
            "in": "query",
            "required": false,
            "description": "Unique identifier representing a portfolio",
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Value to sort",
            "type": "string",
            "default": "targetEmail",
            "enum": [
              "targetEmail",
              "targetLastname"
            ]
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "description": "Sorting order, \u2018asc\u2019 or \u2018desc\u2019",
            "type": "string",
            "default": "ASC",
            "enum": [
              "ASC",
              "DESC"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Targets"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Monitoring"
        ]
      }
    },
    "/monitoring/portfolio": {
      "get": {
        "summary": "Return a list of portfolio for user or entity",
        "parameters": [
          {
            "name": "entityId",
            "in": "query",
            "required": false,
            "description": "Unique identifier representing a entity",
            "type": "integer"
          },
          {
            "name": "userEmail",
            "in": "query",
            "required": false,
            "description": "Email of user",
            "type": "string"
          },
          {
            "name": "label",
            "in": "query",
            "required": false,
            "description": "part of name of the portfolio",
            "type": "string"
          },
          {
            "name": "alertType[]",
            "in": "query",
            "required": false,
            "description": "type of of alert 4=juri, 8=score, 12=juri+score (ex: alertType[]=4&alertype[]=12)",
            "type": "integer"
          },
          {
            "name": "isPerso",
            "in": "query",
            "required": false,
            "description": "Portfolio perso or not 1=perso, 0=pro",
            "type": "integer"
          },
          {
            "name": "updateDate[min]",
            "in": "query",
            "required": false,
            "description": "update date min YYYY-MM-DD",
            "type": "string"
          },
          {
            "name": "updateDate[max]",
            "in": "query",
            "required": false,
            "description": "update date max YYYY-MM-DD",
            "type": "string"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "description": "Portfolio auditable or not 1 or 0",
            "type": "integer"
          },
          {
            "name": "editable",
            "in": "query",
            "required": false,
            "description": "Portfolio is editable or not 1 or 0",
            "type": "integer"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page number",
            "type": "integer"
          },
          {
            "name": "number",
            "in": "query",
            "required": false,
            "description": "Number of result by page",
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Value to sort",
            "type": "string",
            "default": "label",
            "enum": [
              "label",
              "updateDate"
            ]
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "description": "Sorting order, \u2018asc\u2019 or \u2018desc\u2019",
            "type": "string",
            "default": "ASC",
            "enum": [
              "ASC",
              "DESC"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Portfolios"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Monitoring"
        ]
      }
    },
    "/monitoring/portfolio/{portfolioId}": {
      "get": {
        "summary": "Return information of portfolio",
        "parameters": [
          {
            "name": "portfolioId",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a Portfolio",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Portfolio"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Monitoring"
        ]
      }
    },
    "/monitoring/portfolio/siren/{siren}": {
      "get": {
        "summary": "Return informations of portfolios for user and siren",
        "parameters": [
          {
            "name": "siren",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a company",
            "type": "integer"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page number",
            "type": "integer"
          },
          {
            "name": "number",
            "in": "query",
            "required": false,
            "description": "Number of result by page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Portfolio2"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Monitoring"
        ]
      }
    },
    "/monitoring/portfolio/perso": {
      "post": {
        "summary": "POST a personal portfolio",
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded",
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The portfolio have been added"
          },
          "409": {
            "description": "A personal portfolio already exists"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Monitoring"
        ]
      }
    },
    "/monitoring/numbers": {
      "get": {
        "summary": "Return stats",
        "parameters": [
          {
            "name": "portfolioId",
            "in": "query",
            "required": false,
            "description": "Unique identifier representing a portfolio",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MonitoringNumbers"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Monitoring"
        ]
      }
    },
    "/monitoring/target/{userEmail}/subscriptions": {
      "get": {
        "summary": "Return a subscriptions for given email",
        "parameters": [
          {
            "name": "userEmail",
            "in": "path",
            "required": true,
            "description": "Email identifier representing a user",
            "type": "string"
          },
          {
            "name": "entityId",
            "in": "query",
            "required": false,
            "description": "Unique identifier representing a entity",
            "type": "integer"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page number",
            "type": "integer"
          },
          {
            "name": "number",
            "in": "query",
            "required": false,
            "description": "Number of result by page",
            "type": "integer"
          },
          {
            "name": "label",
            "in": "query",
            "required": false,
            "description": "part of name of the portfolio",
            "type": "string"
          },
          {
            "name": "isEditable",
            "in": "query",
            "required": false,
            "description": "Right editable 0=not editable or 1=editable",
            "type": "boolean"
          },
          {
            "name": "alert",
            "in": "query",
            "required": false,
            "description": "Right alert 0 or 1",
            "type": "boolean"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "description": "Right audit 0 or 1",
            "type": "boolean"
          },
          {
            "name": "alertType[]",
            "in": "query",
            "required": false,
            "description": "type of of alert 4=juri, 8=score, 12=juri+score (ex: alertType[]=4&alertype[]=12)",
            "type": "integer"
          },
          {
            "name": "isPerso",
            "in": "query",
            "required": false,
            "description": "Portfolio perso or not 1=perso, 0=pro",
            "type": "boolean"
          },
          {
            "name": "startDate[min]",
            "in": "query",
            "required": false,
            "description": "Start date of the portfolio min(YYYY-MM-DD)",
            "type": "string"
          },
          {
            "name": "startDate[max]",
            "in": "query",
            "required": false,
            "description": "Start date of the portfolio max (YYYY-MM-DD)",
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Value to sort",
            "type": "string",
            "default": "portfolio.label",
            "enum": [
              "portfolio.label",
              "startDate"
            ]
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "description": "Sorting order, \u2018asc\u2019 or \u2018desc\u2019",
            "type": "string",
            "default": "ASC",
            "enum": [
              "ASC",
              "DESC"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Subscriptions"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Monitoring"
        ]
      }
    },
    "/monitoring/subscriptions": {
      "patch": {
        "summary": "Patch a subscription",
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded",
          "application/json"
        ],
        "parameters": [
          {
            "name": "Subscriptions",
            "in": "body",
            "required": true,
            "schema": {
              "properties": {
                "userEmail": {
                  "example": "example@example.com",
                  "type": "string"
                },
                "subscriptions": {
                  "items": {
                    "properties": {
                      "subscriptionId": {
                        "example": 5645132,
                        "type": "integer"
                      },
                      "audit": {
                        "example": "true",
                        "type": "boolean"
                      },
                      "editable": {
                        "example": "true",
                        "type": "boolean"
                      },
                      "status": {
                        "example": "true",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The subscriptions have been modified"
          },
          "206": {
            "description": "A part of subscriptions have not been modified"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Monitoring"
        ]
      }
    },
    "/monitoring/subscription/{idSubscription}": {
      "delete": {
        "summary": "Delete a subscription",
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded",
          "application/json"
        ],
        "parameters": [
          {
            "name": "idSubscription",
            "in": "path",
            "required": true,
            "description": "unique identifier representing a subscription",
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "The subscriptions have been modified"
          },
          "206": {
            "description": "A part of subscriptions have not been modified"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Monitoring"
        ]
      }
    },
    "/monitoring/subscription": {
      "post": {
        "summary": "POST a subscription",
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded",
          "application/json"
        ],
        "parameters": [
          {
            "name": "subscription",
            "in": "body",
            "required": true,
            "description": "Information of subscription",
            "schema": {
              "properties": {
                "targetId": {
                  "example": 1505545,
                  "type": "integer"
                },
                "targetEmail": {
                  "example": "example@example.fr",
                  "type": "string"
                },
                "portfolioId": {
                  "example": 1154456,
                  "type": "integer"
                },
                "audit": {
                  "example": "true",
                  "type": "boolean"
                },
                "editable": {
                  "example": "true",
                  "type": "boolean"
                },
                "status": {
                  "example": "true",
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The subscription have been added"
          },
          "206": {
            "description": "A part of subscriptions have not been added"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Monitoring"
        ]
      }
    },
    "/monitoring/userSubscriptions": {
      "post": {
        "summary": "POST a user and subscription",
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded",
          "application/json"
        ],
        "parameters": [
          {
            "name": "subscription",
            "in": "body",
            "required": true,
            "description": "Information of subscription",
            "schema": {
              "properties": {
                "targetEmail": {
                  "example": "example@example.fr",
                  "type": "string"
                },
                "fullName": {
                  "example": "NOM Prenom",
                  "type": "string"
                },
                "comment": {
                  "example": "texte example",
                  "type": "string"
                },
                "portfolios": {
                  "items": {
                    "properties": {
                      "portfolioId": {
                        "example": 5645132,
                        "type": "integer"
                      },
                      "audit": {
                        "example": "true",
                        "type": "boolean"
                      },
                      "editable": {
                        "example": "true",
                        "type": "boolean"
                      },
                      "status": {
                        "example": "true",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user and subscription have been added"
          },
          "206": {
            "description": "A part of portfolios have not been added"
          },
          "409": {
            "description": "Conflict"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Monitoring"
        ]
      }
    },
    "/monitoring/portfolio/siren": {
      "post": {
        "summary": "Return list of siren subscribed for given siren",
        "parameters": [
          {
            "name": "siren",
            "in": "body",
            "required": true,
            "description": "Unique identifier representing a company",
            "schema": {
              "properties": {
                "siren": {
                  "items": {
                    "example": "503207896",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PortfolioItems2"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Monitoring"
        ]
      }
    },
    "/personalized/{country}/{id}": {
      "get": {
        "summary": "Returns personalized company data",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Company2"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Personalized"
        ]
      }
    },
    "/personalized/{country}/{id}/score": {
      "get": {
        "summary": "Returns personalized score data",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Score2"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Personalized"
        ]
      }
    },
    "/personalized/{country}/{id}/category": {
      "get": {
        "summary": "Returns personalized category data",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CodeLabelPair"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Personalized"
        ]
      }
    },
    "/companies/{country}/search-simple": {
      "post": {
        "summary": "Search companies for autocomplete",
        "deprecated": true,
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded",
          "application/json"
        ],
        "parameters": [
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "name",
            "in": "formData",
            "required": true,
            "description": "Company name",
            "type": "string"
          },
          {
            "name": "codePostal",
            "in": "formData",
            "required": false,
            "description": "Company postal code",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CompanySearch"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Search"
        ]
      }
    },
    "/companies/{country}/suggest": {
      "post": {
        "summary": "Suggest companies",
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded",
          "application/json"
        ],
        "parameters": [
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "name",
            "in": "formData",
            "required": true,
            "description": "Company name",
            "type": "string"
          },
          {
            "name": "codePostal",
            "in": "formData",
            "required": false,
            "description": "Company postal code",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CompanySearch"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Search"
        ]
      }
    },
    "/companies/{country}/autocomplete": {
      "post": {
        "summary": "Suggest companies",
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded",
          "application/json"
        ],
        "parameters": [
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "name",
            "in": "formData",
            "required": true,
            "description": "Company name",
            "type": "string"
          },
          {
            "name": "codePostal",
            "in": "formData",
            "required": false,
            "description": "Company postal code",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CompanySearch"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Search"
        ]
      }
    },
    "/companies/{country}/search": {
      "post": {
        "summary": "Search companies",
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded",
          "application/json"
        ],
        "parameters": [
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Limit the number of result",
            "type": "integer"
          },
          {
            "name": "vatNumber",
            "in": "query",
            "required": false,
            "description": "VAT number (international use only)",
            "type": "string"
          },
          {
            "name": "simpleSearch",
            "in": "formData",
            "required": false,
            "description": "General search, can only be used alone",
            "type": "string"
          },
          {
            "name": "eirl",
            "in": "formData",
            "required": false,
            "description": "Only search against individual limited companies",
            "type": "number"
          },
          {
            "name": "siege",
            "in": "formData",
            "required": false,
            "description": "Company is headquarter",
            "type": "integer",
            "enum": [
              1,
              0
            ]
          },
          {
            "name": "actif",
            "in": "formData",
            "required": false,
            "description": "Company is active",
            "type": "integer",
            "enum": [
              1,
              0
            ]
          },
          {
            "name": "societeNom",
            "in": "formData",
            "required": false,
            "description": "Company name",
            "type": "string"
          },
          {
            "name": "societeNaf",
            "in": "formData",
            "required": false,
            "description": "Company activity code",
            "type": "string"
          },
          {
            "name": "societeCodePostal",
            "in": "formData",
            "required": false,
            "description": "Company postal code",
            "type": "string"
          },
          {
            "name": "societeNumVoie",
            "in": "formData",
            "required": false,
            "description": "Company number in street",
            "type": "string"
          },
          {
            "name": "societeRue",
            "in": "formData",
            "required": false,
            "description": "Company street",
            "type": "string"
          },
          {
            "name": "societeVille",
            "in": "formData",
            "required": false,
            "description": "Company city",
            "type": "string"
          },
          {
            "name": "societeRegion",
            "in": "formData",
            "required": false,
            "description": "Company region",
            "type": "string"
          },
          {
            "name": "societeDepartement",
            "in": "formData",
            "required": false,
            "description": "Company departement",
            "type": "string"
          },
          {
            "name": "dirigeantNom",
            "in": "formData",
            "required": false,
            "description": "Executive Lastname",
            "type": "string"
          },
          {
            "name": "dirigeantPrenom",
            "in": "formData",
            "required": false,
            "description": "Executive Firstname",
            "type": "string"
          },
          {
            "name": "dirigeantDateNaissance",
            "in": "formData",
            "required": false,
            "description": "Executive birthdate in format YYYY-MM-DD",
            "type": "string"
          },
          {
            "name": "dirigeantLieuNaissance",
            "in": "formData",
            "required": false,
            "description": "Executive birth city",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CompanySearch"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Search"
        ]
      }
    },
    "/companies/{country}/search/executives": {
      "post": {
        "summary": "Search companies",
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded",
          "application/json"
        ],
        "parameters": [
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Limit the number of result",
            "type": "integer"
          },
          {
            "name": "simpleSearch",
            "in": "formData",
            "required": false,
            "description": "General search, can only be used alone",
            "type": "string"
          },
          {
            "name": "dirigeantNom",
            "in": "formData",
            "required": false,
            "description": "Executive Lastname",
            "type": "string"
          },
          {
            "name": "dirigeantPrenom",
            "in": "formData",
            "required": false,
            "description": "Executive Firstname",
            "type": "string"
          },
          {
            "name": "dirigeantDateNaissance",
            "in": "formData",
            "required": false,
            "description": "Executive birthdate in format YYYY-MM-DD",
            "type": "string"
          },
          {
            "name": "dirigeantLieuNaissance",
            "in": "formData",
            "required": false,
            "description": "Executive birth city",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CompanySearchGeneric"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Search"
        ]
      }
    },
    "/companies/{country}/search/companies": {
      "post": {
        "summary": "Search companies",
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded",
          "application/json"
        ],
        "parameters": [
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Limit the number of result",
            "type": "integer"
          },
          {
            "name": "vatNumber",
            "in": "query",
            "required": false,
            "description": "VAT number (international use only)",
            "type": "string"
          },
          {
            "name": "simpleSearch",
            "in": "formData",
            "required": false,
            "description": "General search, can only be used alone",
            "type": "string"
          },
          {
            "name": "eirl",
            "in": "formData",
            "required": false,
            "description": "Only search against individual limited companies",
            "type": "number"
          },
          {
            "name": "siege",
            "in": "formData",
            "required": false,
            "description": "Company is headquarter",
            "type": "integer",
            "enum": [
              1,
              0
            ]
          },
          {
            "name": "actif",
            "in": "formData",
            "required": false,
            "description": "Company is active",
            "type": "integer",
            "enum": [
              1,
              0
            ]
          },
          {
            "name": "societeNom",
            "in": "formData",
            "required": false,
            "description": "Company name",
            "type": "string"
          },
          {
            "name": "societeNaf",
            "in": "formData",
            "required": false,
            "description": "Company activity code",
            "type": "string"
          },
          {
            "name": "societeCodePostal",
            "in": "formData",
            "required": false,
            "description": "Company postal code",
            "type": "string"
          },
          {
            "name": "societeNumVoie",
            "in": "formData",
            "required": false,
            "description": "Company number in street",
            "type": "string"
          },
          {
            "name": "societeRue",
            "in": "formData",
            "required": false,
            "description": "Company street",
            "type": "string"
          },
          {
            "name": "societeVille",
            "in": "formData",
            "required": false,
            "description": "Company city",
            "type": "string"
          },
          {
            "name": "societeRegion",
            "in": "formData",
            "required": false,
            "description": "Company region",
            "type": "string"
          },
          {
            "name": "societeDepartement",
            "in": "formData",
            "required": false,
            "description": "Company departement",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CompanySearchGeneric"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Search"
        ]
      }
    },
    "/companies/{country}/find": {
      "post": {
        "summary": "Search companies/sites registration ID",
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded",
          "application/json"
        ],
        "parameters": [
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "registrationId",
            "in": "formData",
            "required": false,
            "description": "Look for a company or a site identified by the requested ID ",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/FindResultModel"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Search"
        ]
      }
    },
    "/companies/{country}/sites/search": {
      "post": {
        "summary": "Search a site",
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Limit search result",
            "type": "integer"
          },
          {
            "name": "name",
            "in": "formData",
            "required": false,
            "description": "Company/Site name",
            "type": "string"
          },
          {
            "name": "street",
            "in": "formData",
            "required": false,
            "description": "Company/Site street name (Only available in France)",
            "type": "string"
          },
          {
            "name": "zipCode",
            "in": "formData",
            "required": false,
            "description": "Company/Site address zip code (Only available in France)",
            "type": "string"
          },
          {
            "name": "city",
            "in": "formData",
            "required": false,
            "description": "Company/Site city",
            "type": "string"
          },
          {
            "name": "phone",
            "in": "formData",
            "required": false,
            "description": "Company/Site street phone number (Only available in France)",
            "type": "string"
          },
          {
            "name": "companyRegistrationNumber",
            "in": "formData",
            "required": false,
            "description": "Company registration number (Only available in France)",
            "type": "string"
          },
          {
            "name": "registrationNumber",
            "in": "formData",
            "required": false,
            "description": "Site registration number",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SiteSearch"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Search"
        ]
      }
    },
    "/companies/{country}/{id}/sites/{sid}": {
      "get": {
        "summary": "Return a specific site",
        "parameters": [
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "sid",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific site of the company",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Site"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Site"
        ]
      }
    },
    "/companies/{country}/{id}/sites": {
      "get": {
        "summary": "Return the site list for a company",
        "description": "This service is @Paginable, @Filterable, @Sortable and @Searchable",
        "parameters": [
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "type": "integer"
          },
          {
            "name": "number",
            "in": "query",
            "description": "Number of result by page",
            "type": "integer"
          },
          {
            "name": "column",
            "in": "query",
            "description": "Column name in JSONPath format (start with '$.') for sorting",
            "type": "string",
            "pattern": "/^\\$\\./"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sorting order, 'asc' or 'desc'",
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "name": "filters",
            "in": "query",
            "description": "Filter parameter in format `{JsonPath},{value}` (example: `$.eventCode,1100`)",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Terms to match",
            "type": "string"
          },
          {
            "name": "in",
            "in": "query",
            "description": "Execute match against columns (example : `$.registrationId`)",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Sites"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Site"
        ]
      }
    },
    "/companies/{country}/supervision/{email}": {
      "get": {
        "summary": "List supervision",
        "description": "",
        "parameters": [
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "email",
            "in": "path",
            "required": true,
            "description": "Supervision recipient email",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of active supervision",
            "schema": {
              "$ref": "#/definitions/Supervisions"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Supervision"
        ]
      }
    },
    "/companies/{country}/{id}/supervision": {
      "post": {
        "summary": "Set a company supervision",
        "description": "This service consumes either a form or a json document, see [Remove supervision](#operations,delete-/companies/{country}/{id}/supervision,Supervision) for json format",
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "alertType[]",
            "in": "formData",
            "required": true,
            "description": "Array of alert type (score|event)",
            "items": {
              "type": "string",
              "enum": [
                "event",
                "score"
              ]
            },
            "type": "array",
            "collectionFormat": "multi"
          },
          {
            "name": "email",
            "in": "formData",
            "required": true,
            "description": "Recipient of the supervision",
            "type": "string"
          },
          {
            "name": "customCode",
            "in": "formData",
            "required": false,
            "description": "Custom code to assign to supervision",
            "type": "string"
          },
          {
            "name": "customCredit",
            "in": "formData",
            "required": false,
            "description": "Custom credit allowed to company",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Supervision has been created"
          },
          "304": {
            "description": "Company was already in supervision for an email",
            "schema": {
              "$ref": "#/definitions/Error304Model"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Supervision"
        ]
      },
      "delete": {
        "summary": "Unset a company supervision",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          },
          {
            "name": "alertType[]",
            "in": "query",
            "required": true,
            "description": "Array of alert type (score|event)",
            "items": {
              "type": "string",
              "enum": [
                "event",
                "score"
              ]
            },
            "type": "array",
            "collectionFormat": "multi"
          },
          {
            "name": "email",
            "in": "query",
            "required": true,
            "description": "Recipient of the supervision",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Supervision has been deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Supervision"
        ]
      }
    },
    "/codes/country/{country}/risk": {
      "get": {
        "summary": "Return a risk for a country",
        "parameters": [
          {
            "name": "country",
            "in": "path",
            "required": true,
            "description": "Country Code in ISO 3166-2",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Json ConformityRisk",
            "schema": {
              "$ref": "#/definitions/ConformityRisk"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "KYC/Compliance"
        ]
      }
    },
    "/codes/activity/{id}/risk": {
      "get": {
        "summary": "Return a risk for an activity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a specific company",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ConformityRisk"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "KYC/Compliance"
        ]
      }
    },
    "/event/{id}": {
      "get": {
        "summary": "Return details for an event",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing an event",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/EventDetail"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Events"
        ]
      }
    },
    "/executive/{id}": {
      "get": {
        "summary": "Return details for an executive",
        "deprecated": true,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing an executive",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExecutiveDetail"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Executive"
        ]
      }
    },
    "/executive/{id}/infos": {
      "get": {
        "summary": "Return information for an executive",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing an executive",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Executive2"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Executive"
        ]
      }
    },
    "/executive/{id}/mandats": {
      "get": {
        "summary": "Return mandates for an executive",
        "description": "Use /executive/{id}/terms instead",
        "deprecated": true,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing an executive",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Mandats"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Executive"
        ]
      }
    },
    "/executive/{id}/terms": {
      "get": {
        "summary": "Return terms for an executive",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing an executive",
            "type": "string"
          },
          {
            "name": "siren",
            "in": "query",
            "required": false,
            "description": "Unique identifier representing a comapny",
            "type": "integer"
          },
          {
            "name": "blockId",
            "in": "query",
            "required": false,
            "description": "Unique identifier representing a block",
            "type": "integer"
          },
          {
            "name": "positionRole",
            "in": "query",
            "required": false,
            "description": "Role representing the type of a membership",
            "type": "string",
            "enum": [
              "M",
              "O",
              "CAC"
            ]
          },
          {
            "name": "principal",
            "in": "query",
            "required": false,
            "description": "",
            "type": "boolean"
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "description": "State of a term of office (open/close)",
            "type": "boolean"
          },
          {
            "name": "termsState",
            "in": "query",
            "required": false,
            "description": "Filters companies with at least one (true) or no (false) active term of office",
            "type": "boolean"
          },
          {
            "name": "orders[start_date]",
            "in": "query",
            "required": false,
            "description": "Term of office start date (asc/desc)",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExecutiveTerms"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Executive"
        ]
      }
    },
    "/executive/{id}/homonyms": {
      "get": {
        "summary": "Return all homonyms for an executive",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing an executive",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page to load",
            "type": "integer"
          },
          {
            "name": "itemPerPage",
            "in": "query",
            "required": false,
            "description": "Number of items per page",
            "type": "integer"
          },
          {
            "name": "siren",
            "in": "query",
            "required": false,
            "description": "Unique identifier representing a comapny",
            "type": "integer"
          },
          {
            "name": "blockId",
            "in": "query",
            "required": false,
            "description": "Unique identifier representing a block",
            "type": "integer"
          },
          {
            "name": "positionRole",
            "in": "query",
            "required": false,
            "description": "Role representing the type of a membership",
            "type": "string",
            "enum": [
              "M",
              "O",
              "CAC"
            ]
          },
          {
            "name": "principal",
            "in": "query",
            "required": false,
            "description": "",
            "type": "boolean"
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "description": "State of a term of office (open/close)",
            "type": "boolean"
          },
          {
            "name": "orders[start_date]",
            "in": "query",
            "required": false,
            "description": "Term of office start date (asc/desc)",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of terms of offices",
            "schema": {
              "items": {
                "$ref": "#/definitions/ExecutiveTerms2"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Executive"
        ]
      }
    },
    "/executive/{id}/homonymes": {
      "get": {
        "summary": "Return homonyms for an executive",
        "description": "Use /executive/{id}/homonyms instead",
        "deprecated": true,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing an executive",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Mandat",
            "schema": {
              "items": {
                "$ref": "#/definitions/Mandat"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Executive"
        ]
      }
    },
    "/executive/{id}/events": {
      "get": {
        "summary": "Return all events for an executive",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing an executive",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Event",
            "schema": {
              "items": {
                "$ref": "#/definitions/Event"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Executive"
        ]
      }
    },
    "/executive/{id}/homonymesEvents": {
      "get": {
        "summary": "Return all event for homonyms",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing an executive",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Event",
            "schema": {
              "items": {
                "$ref": "#/definitions/Event"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Executive"
        ]
      }
    },
    "/executive/{id}/conformity/countryRisk": {
      "get": {
        "summary": "Return a risk for an executive",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing an executive",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Json ConformityRisk",
            "schema": {
              "$ref": "#/definitions/ConformityRisk"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "KYC/Compliance"
        ]
      }
    },
    "/executives/{country}/{id}/blocks": {
      "get": {
        "summary": "Return all blocks",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "description": "Unique identifier representing an executive",
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Block2"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Executive"
        ]
      }
    },
    "/groups/{id}": {
      "get": {
        "summary": "Return details for a group",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier representing a group",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Ownership relations"
        ]
      }
    },
    "/nafs/": {
      "get": {
        "summary": "Return the list of activity codes",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Nafs"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Codes"
        ]
      }
    },
    "/stats/activity/{id}": {
      "get": {
        "summary": "Return Statistics on Activity segment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Activity Code",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/StatActivity"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Stats"
        ]
      }
    },
    "/stats/activity/{id}/score": {
      "get": {
        "summary": "Return Score Statistics on Activity segment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Activity Code",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Score3"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Stats"
        ]
      }
    },
    "/stats/activity/{id}/ratios": {
      "get": {
        "summary": "Return Ratios Statistics on Activity segment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Activity Code",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Ratios2"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400Model"
            }
          },
          "401": {
            "description": "Authentication Failure: Expired Token or Invalid Token",
            "schema": {
              "$ref": "#/definitions/Error401Model"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403Model"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Stats"
        ]
      }
    }
  },
  "definitions": {
    "AuthenticationModel": {
      "properties": {
        "token": {
          "example": "xEnvot.eieognogtpbtz4br2t13hb56fdfege1fv23.ej_rnnjj_8dv2g",
          "type": "string",
          "maxLength": 4096
        },
        "refresh_token": {
          "example": "fuiRvnvoft25fg_oeVcvc",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ErrorModel": {
      "properties": {
        "code": {
          "description": "http error code",
          "example": 404,
          "type": "integer"
        },
        "message": {
          "description": "Error message",
          "example": "Not Found",
          "type": "string"
        }
      },
      "type": "object"
    },
    "City": {
      "properties": {
        "cities": {
          "description": "List of activity code",
          "items": {
            "$ref": "#/definitions/CodeLabelPair2"
          },
          "type": "array"
        },
        "count": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Error400Model": {
      "properties": {
        "code": {
          "description": "http error code",
          "example": 400,
          "type": "integer"
        },
        "message": {
          "description": "Error message",
          "example": "This value is too long. It should have 5 characters or less. (code d94b19cc-114f-4f44-9cc4-4138e80a87b9)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Error401Model": {
      "properties": {
        "code": {
          "description": "http error code",
          "example": 401,
          "type": "integer"
        },
        "message": {
          "description": "Error message",
          "example": "Bad Credentials",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Error403Model": {
      "properties": {
        "code": {
          "description": "http error code",
          "example": 403,
          "type": "integer"
        },
        "message": {
          "description": "Error message",
          "example": "Forbidden",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Balance": {
      "properties": {
        "typeName": {
          "description": "Identifier type for Balance",
          "example": "social",
          "type": "string"
        },
        "balanceId": {
          "description": "Balance identifier",
          "example": 123,
          "type": "integer"
        },
        "registrationId": {
          "description": "Company identifier",
          "example": "123456789",
          "type": "string"
        },
        "closingDate": {
          "description": "Close balance date",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "duration": {
          "description": "Balance duration",
          "example": 12,
          "type": "integer"
        },
        "source": {
          "description": "Balance source",
          "example": 7,
          "type": "integer"
        },
        "turnover": {
          "description": "Turn over",
          "example": "110797",
          "type": "string"
        },
        "creationDate": {
          "description": "Insertion date",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "updateDate": {
          "description": "Modification date",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "previousDuration": {
          "description": "Previous balance duration",
          "example": 12,
          "type": "integer"
        },
        "type": {
          "description": "Balance type among values simple, full, consolidated",
          "example": "simple",
          "type": "string"
        },
        "confidentiality": {
          "description": "Balance confidentiality",
          "example": "none",
          "type": "string"
        },
        "ratios": {
          "$ref": "#/definitions/Ratios"
        },
        "notices": {
          "$ref": "#/definitions/Notices"
        },
        "raw": {
          "$ref": "#/definitions/BalanceRawData2"
        },
        "sig": {
          "$ref": "#/definitions/SoldeIntermediaireGestion2"
        }
      },
      "type": "object"
    },
    "Ratios": {
      "properties": {
        "turnover": {
          "description": "Turnover",
          "example": 110797,
          "type": "integer"
        },
        "operatingIncome": {
          "description": "Operating income",
          "example": 21,
          "type": "integer"
        },
        "financialExpenses": {
          "description": "Financial expenses",
          "example": 0,
          "type": "integer"
        },
        "netIncome": {
          "description": "Net income",
          "example": 0,
          "type": "integer"
        },
        "equity": {
          "description": "Equity",
          "example": 1633,
          "type": "integer"
        },
        "workforce": {
          "description": "Effectif",
          "example": 85,
          "type": "integer"
        },
        "liquidAssets": {
          "description": "Liquid Assets",
          "example": 2334333,
          "type": "integer"
        },
        "operationalMargin": {
          "description": "Operational margin",
          "example": 0.02,
          "type": "number",
          "format": "float"
        },
        "netMargin": {
          "description": "Net margin",
          "example": 1.01,
          "type": "number",
          "format": "float"
        },
        "grossOperatingSurplus": {
          "description": "Gross operating surplus",
          "example": 7000,
          "type": "integer"
        },
        "revenueEquityRatio": {
          "description": "Revenue on equity ratio",
          "example": 67.85,
          "type": "number",
          "format": "float"
        },
        "returnOnCapital": {
          "description": "Return on capital",
          "example": 0,
          "type": "number",
          "format": "float"
        },
        "fixedAssetsObsolescence": {
          "description": "Fixed assets obsolescence",
          "example": 0,
          "type": "integer"
        },
        "cashFlow": {
          "description": "Cash flow",
          "example": 27000,
          "type": "number",
          "format": "float"
        },
        "financialAutonomy": {
          "description": "Financial autonomy",
          "example": 0,
          "type": "number",
          "format": "float"
        },
        "repaymentCapacity": {
          "description": "Repayment capacity",
          "example": 178,
          "type": "number",
          "format": "float"
        },
        "generalCreditworthiness": {
          "description": "General creditworthiness",
          "example": 1,
          "type": "number",
          "format": "float"
        },
        "currentRatio": {
          "description": "Current ratio",
          "example": 5,
          "type": "number",
          "format": "float"
        },
        "restrictedLiquidity": {
          "description": "RestrictedLliquidity",
          "example": 5,
          "type": "number",
          "format": "float"
        },
        "financialExpensesReturnRatio": {
          "description": "Financial expenses on return ratio",
          "example": 26,
          "type": "number",
          "format": "float"
        },
        "debt": {
          "description": "Debt",
          "example": 3400,
          "type": "number",
          "format": "float"
        },
        "financialStrength": {
          "description": "Financial strength",
          "example": 45,
          "type": "number",
          "format": "float"
        },
        "workingCapitalRequirement": {
          "description": "Working capital requirement",
          "example": 516000,
          "type": "integer"
        },
        "workingCapitalRequirementTurnover": {
          "description": "Working capital requirement turnover",
          "example": 466,
          "type": "integer"
        },
        "customersPaymentTime": {
          "description": "Customers payment time",
          "example": 88,
          "type": "integer"
        },
        "suppliersPaymentTime": {
          "description": "Suppliers payment time",
          "example": 96,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Balances": {
      "properties": {
        "balances": {
          "description": "List of Balance object",
          "items": {
            "$ref": "#/definitions/Balance2"
          },
          "type": "array"
        },
        "count": {
          "description": "Number of Balance",
          "example": 1,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "BalanceRawData": {
      "properties": {
        "type": {
          "description": "Balance Type",
          "example": "full",
          "type": "string"
        },
        "confidentiality": {
          "description": "Balance confidentiality",
          "example": "partial",
          "type": "string"
        },
        "source": {
          "description": "Balance source",
          "example": "Infolegale",
          "type": "string"
        },
        "formats": {
          "description": "Base official balance forms in company country which data fill",
          "items": {
            "example": "CERFA",
            "type": "string"
          },
          "type": "array"
        },
        "data": {
          "description": "raw values, json document representing the official balance forms in company country",
          "items": {
            "example": "CERFA",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SoldeIntermediaireGestion": {
      "properties": {
        "confidentiality": {
          "description": "Confidentiality",
          "type": "boolean"
        },
        "duree": {
          "description": "Duration",
          "type": "integer"
        },
        "devise": {
          "description": "Currency",
          "type": "string"
        },
        "ventesMarchandises": {
          "description": "Sells",
          "type": "integer"
        },
        "achatsMarchandises": {
          "description": "Supplies",
          "type": "integer"
        },
        "variationStocksMarchandises": {
          "description": "Stock Variation",
          "type": "integer"
        },
        "margeCommerciale": {
          "description": "Production Margin",
          "type": "integer"
        },
        "prodVendueBiens": {
          "description": "Goods sold",
          "type": "integer"
        },
        "prodVendueServices": {
          "description": "Services Sold",
          "type": "integer"
        },
        "prodStockees": {
          "description": "Stored Production",
          "type": "integer"
        },
        "prodImmobilisees": {
          "description": "Self production",
          "type": "integer"
        },
        "prodExercice": {
          "description": "Production",
          "type": "integer"
        },
        "achatMatPremEtApprov": {
          "description": "Raw material supplies",
          "type": "integer"
        },
        "variationStockMatPremEtApprov": {
          "description": "Raw material stock variation",
          "type": "integer"
        },
        "autreAchatsEtChargesExternes": {
          "description": "External debts and other supplies",
          "type": "integer"
        },
        "valeurAjoutee": {
          "description": "Added value",
          "type": "integer"
        },
        "subventionExploit": {
          "description": "Operating Aid",
          "type": "integer"
        },
        "impotsTaxesVersementAnticipes": {
          "description": "Advance tax payment",
          "type": "integer"
        },
        "salaireEtTraitements": {
          "description": "Payroll",
          "type": "integer"
        },
        "chargesSociales": {
          "description": "Payroll tax epenses",
          "type": "integer"
        },
        "ebe": {
          "description": "Operating Margin",
          "type": "integer"
        },
        "dotationAmortExploit": {
          "description": "Amortization",
          "type": "integer"
        },
        "provisionsExploit": {
          "description": "Amortization expenses",
          "type": "integer"
        },
        "repriseAmortProvTransferts": {
          "description": "Amortization reversal",
          "type": "integer"
        },
        "autreProduits": {
          "description": "Other products",
          "type": "integer"
        },
        "autreCharges": {
          "description": "Other charges",
          "type": "integer"
        },
        "resultatExploit": {
          "description": "Other debts",
          "type": "integer"
        },
        "benefAttribuePerteTransferee": {
          "description": "Operating Profit",
          "type": "integer"
        },
        "perteSupporteePerteTransferee": {
          "description": "Allocated gain or transferred loss",
          "type": "integer"
        },
        "prodFinParticipations": {
          "description": "Revenue from financial production",
          "type": "integer"
        },
        "prodAutresValeursMobilieres": {
          "description": "Production of other movable values",
          "type": "integer"
        },
        "autresInteretsAssimiles": {
          "description": "Similar other interests",
          "type": "integer"
        },
        "differencesPositivesChange": {
          "description": "Positive exchange difference",
          "type": "integer"
        },
        "produitsNetsCessionVmp": {
          "description": "Financial revenues from net marketable securities",
          "type": "integer"
        },
        "repriseProvTransfertFin": {
          "description": "Financial provision reversal",
          "type": "integer"
        },
        "interetsChargesAssimilees": {
          "description": "Interests and similar charges",
          "type": "integer"
        },
        "differencesNegativesChange": {
          "description": "Negative exchange difference",
          "type": "integer"
        },
        "chargesNettesCessionVmp": {
          "description": "Charges on sales of marketable securities",
          "type": "integer"
        },
        "dotationsFinAmortProv": {
          "description": "Financial amortization",
          "type": "integer"
        },
        "resultatCourantAvantImpots": {
          "description": "Charged operating profit before taxes",
          "type": "integer"
        },
        "totalProduitsExceptionnels": {
          "description": "Extraordinary production total",
          "type": "integer"
        },
        "totalChargesExceptionnelles": {
          "description": "Extraordinary debts total",
          "type": "integer"
        },
        "resultatExceptionnel": {
          "description": "Extraordinary profits",
          "type": "integer"
        },
        "resultatAvantImpots": {
          "description": "Operating profit before taxes",
          "type": "integer"
        },
        "partSalariesAuxResultats": {
          "description": "Employee profit sharing",
          "type": "integer"
        },
        "impotsSurBenefices": {
          "description": "Income Taxes",
          "type": "integer"
        },
        "beneficeOuPerte": {
          "description": "Profit or loss",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Events": {
      "properties": {
        "events": {
          "description": "List of event",
          "items": {
            "$ref": "#/definitions/Event2"
          },
          "type": "array"
        },
        "count": {
          "description": "Number of event",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Executives": {
      "properties": {
        "executives": {
          "description": "List of executive",
          "items": {
            "$ref": "#/definitions/Executive3"
          },
          "type": "array"
        },
        "count": {
          "description": "Number of result found",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Executives2": {
      "properties": {
        "executives": {
          "description": "List of executive",
          "items": {
            "$ref": "#/definitions/Executive4"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Block": {
      "properties": {
        "id": {
          "description": "Identifier of block",
          "type": "integer"
        },
        "label": {
          "description": "Label of block",
          "type": "string"
        },
        "orderId": {
          "description": "priority",
          "type": "integer"
        },
        "nbActiveTerms": {
          "description": "number of active term in the block",
          "type": "integer"
        },
        "nbInactiveTerms": {
          "description": "number of inactive term in the block",
          "type": "integer"
        },
        "nbActiveRegroupings": {
          "description": "number of active regroupings in the block",
          "type": "integer"
        },
        "nbInactiveRegroupings": {
          "description": "number of inactive regroupings in the block",
          "type": "integer"
        },
        "dirigeants": {
          "description": "List of executives",
          "items": {
            "$ref": "#/definitions/Executive5"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "DebtStatus": {
      "properties": {
        "socialStatus": {
          "$ref": "#/definitions/DebtSocialStatusModel"
        },
        "taxOfficeStatus": {
          "$ref": "#/definitions/DebtTaxOfficeStatusModel"
        },
        "privilege": {
          "$ref": "#/definitions/Privilege"
        }
      },
      "type": "object"
    },
    "PrivilegeDetails": {
      "properties": {
        "privilegeDetails": {
          "description": "List of privilege details",
          "items": {
            "$ref": "#/definitions/PrivilegeDetail"
          },
          "type": "array"
        },
        "count": {
          "description": "Number of elements",
          "example": 1,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Contact": {
      "properties": {
        "type": {
          "description": "Type of contact info",
          "example": "Personal",
          "type": "string"
        },
        "phone": {
          "description": "Phone number",
          "example": "+33123456789",
          "type": "string"
        },
        "fax": {
          "description": "Fax number",
          "example": "+33123456789",
          "type": "string"
        },
        "email": {
          "description": "Email",
          "example": "email@example.org",
          "type": "string",
          "format": "mail"
        },
        "webSite": {
          "description": "Homepage",
          "example": "http://greatcompany.com",
          "type": "string",
          "format": "url"
        }
      },
      "type": "object"
    },
    "Identity": {
      "properties": {
        "id": {
          "description": "Company Identifier",
          "example": "0123456789",
          "type": "string"
        },
        "registrationId": {
          "description": "Fiscal Registration Number",
          "example": "0123456789",
          "type": "string"
        },
        "vatnumber": {
          "description": "Tax registration number",
          "example": "FR670123456789",
          "type": "string"
        },
        "name": {
          "description": "Company name",
          "example": "Great Company",
          "type": "string"
        },
        "tradings": {
          "description": "Company trading name",
          "example": "GC Information",
          "type": "string"
        },
        "acronym": {
          "description": "Company acronym",
          "example": "G.C.I",
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "headquarter": {
          "$ref": "#/definitions/Site2"
        },
        "workforce": {
          "$ref": "#/definitions/Workforce"
        },
        "contact": {
          "$ref": "#/definitions/Contact2"
        },
        "legalForm": {
          "$ref": "#/definitions/LegalFormModel"
        },
        "activity": {
          "$ref": "#/definitions/ActivityModel"
        },
        "declaredActivity": {
          "description": "Declared activity",
          "example": "Commerce de mat\u00e9riel audio",
          "type": "string"
        },
        "secondaryActivities": {
          "description": "List of secondary activities",
          "items": {
            "$ref": "#/definitions/SecondaryActivityModel"
          },
          "type": "array"
        },
        "creationDate": {
          "description": "When the company was created",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "status": {
          "description": "Whether the company is active or not",
          "example": 1,
          "type": "integer"
        },
        "rna": {
          "description": "RNA (R\u00e9pertoire National des Associations) number if company registred as association or null",
          "example": "W452006858",
          "type": "string"
        },
        "capital": {
          "description": "Company Capitalization",
          "type": "string"
        },
        "rcs": {
          "description": "Institution in which the company is registered",
          "example": "RCS Paris",
          "type": "string"
        },
        "cotation": {
          "$ref": "#/definitions/Cotation"
        },
        "tags": {
          "description": "Market information",
          "items": {
            "$ref": "#/definitions/MarketInformationModel"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Workforce": {
      "properties": {
        "value": {
          "description": "Number of employee, can be 'NN' indicating that no data has been collected",
          "example": "10",
          "type": "string"
        },
        "range": {
          "description": "Range of employees",
          "example": "10 - 50",
          "type": "string"
        },
        "rangeMin": {
          "description": "Range minimum",
          "example": 10,
          "type": "integer"
        },
        "rangeMax": {
          "description": "Range maximum",
          "example": 50,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "KycUbo": {
      "properties": {
        "minDate": {
          "description": "Oldest information date",
          "type": "string"
        },
        "maxDate": {
          "description": "Most recent information date",
          "type": "string"
        },
        "totalMembers": {
          "description": "Number of UBO",
          "type": "integer"
        },
        "totalCapitalDetentionMembers": {
          "description": "Number of capital detentions",
          "type": "integer"
        },
        "totalLegalRepresentativeMembers": {
          "description": "Number of legal representatives",
          "type": "integer"
        },
        "members": {
          "description": "UBO",
          "items": {
            "$ref": "#/definitions/GroupMember"
          },
          "type": "array"
        },
        "steps": {
          "description": "Procedure steps passed through to find ubo",
          "items": {
            "$ref": "#/definitions/UboInvestigationStep"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ConformityRisk": {
      "properties": {
        "status": {
          "description": "Risk status",
          "example": "low",
          "type": "string",
          "enum": [
            "low",
            "medium",
            "high"
          ]
        },
        "reason": {
          "description": "Risk reason",
          "example": "Risque Faible",
          "type": "string"
        }
      },
      "type": "object"
    },
    "KycModel": {
      "properties": {
        "ubo": {
          "$ref": "#/definitions/KycUbo2"
        },
        "conformity": {
          "$ref": "#/definitions/Conformity2"
        }
      },
      "type": "object"
    },
    "Conformity": {
      "properties": {
        "operatingRisk": {
          "$ref": "#/definitions/ConformityRisk"
        },
        "countryRisk": {
          "$ref": "#/definitions/ConformityRisk"
        },
        "activityRisk": {
          "$ref": "#/definitions/ConformityRisk"
        }
      },
      "type": "object"
    },
    "Legal": {
      "properties": {
        "deposits": {
          "$ref": "#/definitions/LegalDepositList2"
        },
        "status": {
          "$ref": "#/definitions/LegalStatus"
        }
      },
      "type": "object"
    },
    "LegalDepositList": {
      "properties": {
        "list": {
          "description": "list of document",
          "items": {
            "$ref": "#/definitions/LegalDeposit"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Links": {
      "properties": {
        "shareholders": {
          "$ref": "#/definitions/Shareholders2"
        },
        "subsidiaries": {
          "$ref": "#/definitions/Subsidiaries2"
        }
      },
      "type": "object"
    },
    "Shareholders": {
      "properties": {
        "members": {
          "description": "",
          "items": {
            "$ref": "#/definitions/GroupMember2"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Subsidiaries": {
      "properties": {
        "members": {
          "description": "",
          "items": {
            "$ref": "#/definitions/GroupMember3"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Executive": {
      "properties": {
        "civilite": {
          "description": "Executive title",
          "example": "M",
          "type": "string"
        },
        "name": {
          "description": "Executive Lastname",
          "example": "Doe",
          "type": "string"
        },
        "firstname": {
          "description": "Executive Firstname",
          "example": "Jane",
          "type": "string"
        },
        "type": {
          "description": "Executive type can be 'person', 'company' or 'family' (equivalent to person)",
          "example": "person",
          "type": "string"
        },
        "maidenName": {
          "description": "Executive maiden name if available",
          "example": "Smith",
          "type": "string"
        },
        "siren": {
          "description": "Company Identifier if Executive is also a company, only available in France",
          "example": "0123456789",
          "type": "string"
        },
        "fonction": {
          "$ref": "#/definitions/ExecutiveFonction"
        },
        "email": {
          "description": "Executive email address",
          "example": "mail@example.com",
          "type": "string",
          "format": "email"
        },
        "phone": {
          "description": "Executive phone number",
          "example": "+33658452114",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CompanyMandats": {
      "properties": {
        "mandats": {
          "description": "List of assignement",
          "items": {
            "$ref": "#/definitions/Mandat2"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ExecutiveTerms": {
      "properties": {
        "mandats": {
          "description": "List of term of office",
          "items": {
            "$ref": "#/definitions/Mandat3"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Risk": {
      "properties": {
        "class": {
          "description": "Risk class as a score range",
          "example": "3-5",
          "type": "string"
        },
        "label": {
          "description": "Risk class label",
          "example": "Risque \u00e9lev\u00e9",
          "type": "string"
        },
        "status": {
          "description": "Company Status, values can be 'active', 'insolvancy' or 'closed'",
          "example": "active",
          "type": "string"
        },
        "insolvency": {
          "$ref": "#/definitions/Insolvency"
        }
      },
      "type": "object"
    },
    "Score": {
      "properties": {
        "score": {
          "description": "Score",
          "example": 12,
          "type": "integer"
        },
        "previous": {
          "description": "Previous score",
          "example": 12,
          "type": "integer"
        },
        "creditLimit": {
          "description": "Advise on max credit",
          "example": 10000,
          "type": "integer"
        },
        "delaiReglementFournisseur": {
          "description": "Estimated number of day for a company to pay its providers",
          "example": 86.2,
          "type": "number",
          "format": "float"
        },
        "delaiReglementFournisseurSecteur": {
          "description": "Estimated number of day for a segment to pay its providers",
          "example": 58.1,
          "type": "number",
          "format": "float"
        },
        "comments": {
          "description": "Score comments (non-exhaustive list)",
          "items": {
            "type": "object"
          },
          "type": "array"
        },
        "summary": {
          "description": "Score summary, not null if the score is less than 4",
          "example": "Dissolution anticip\u00e9e",
          "type": "string"
        },
        "history": {
          "description": "Score history",
          "items": {
            "properties": {
              "year": {
                "example": "2017",
                "type": "string"
              },
              "month": {
                "example": "05",
                "type": "string"
              },
              "average_score": {
                "example": "15.0",
                "type": "string"
              },
              "average_score_activity": {
                "example": "10.1",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "tendance": {
          "description": "Tendancy",
          "example": "=",
          "type": "string"
        },
        "COVIDImpact": {
          "description": "Indicateur Covid-19",
          "example": "impact Covid 19 fort",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ScreeningCandidates": {
      "properties": {
        "id": {
          "description": "Candidates identifier",
          "example": "8cb0617a719d92b3322d06dd8ba64f793f00a39d",
          "type": "string"
        },
        "candidates": {
          "description": "Candidates list",
          "items": {
            "$ref": "#/definitions/ScreeningCandidate"
          },
          "type": "array"
        },
        "processed": {
          "description": "Wether candidates has been processed",
          "example": 0,
          "type": "boolean"
        },
        "count": {
          "description": "Number of candidates",
          "example": 1,
          "type": "integer"
        },
        "candidatesGeneratedAt": {
          "description": "Candidates's last search date",
          "example": "2018-12-07 12:52:35",
          "type": "string"
        },
        "candidatesOldestGeneratedAt": {
          "description": "Candidates's oldest search date",
          "example": "2018-12-07 12:52:35",
          "type": "string"
        },
        "analytics": {
          "$ref": "#/definitions/ScreeningCandidateAnalytics"
        },
        "source": {
          "description": "Data source",
          "example": "ILG / LN / MIXED",
          "type": "string"
        },
        "hasScreened": {
          "description": "Wether candidates has been screened",
          "example": 0,
          "type": "boolean"
        },
        "identity": {
          "$ref": "#/definitions/ConformityIdentity"
        },
        "nbUnprocessed": {
          "description": "Number of unprocessed candidate",
          "example": 1,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "KycConformitySummaryModel": {
      "properties": {
        "company": {
          "$ref": "#/definitions/KycConformitySummaryNodeModel"
        },
        "executives": {
          "$ref": "#/definitions/KycConformitySummaryNodeModel"
        },
        "group": {
          "$ref": "#/definitions/KycConformitySummaryNodeModel"
        },
        "shareholders": {
          "$ref": "#/definitions/KycConformitySummaryNodeModel"
        },
        "ubos": {
          "$ref": "#/definitions/KycConformitySummaryNodeModel"
        },
        "summary": {
          "$ref": "#/definitions/KycConformitySummaryNodeModel"
        }
      },
      "type": "object"
    },
    "ScreeningCandidates2": {
      "properties": {
        "id": {
          "description": "Candidates identifier",
          "example": "8cb0617a719d92b3322d06dd8ba64f793f00a39d",
          "type": "string"
        },
        "candidates": {
          "description": "Candidates list",
          "items": {
            "$ref": "#/definitions/ScreeningCandidate2"
          },
          "type": "array"
        },
        "processed": {
          "description": "Wether candidates has been processed",
          "example": 0,
          "type": "boolean"
        },
        "count": {
          "description": "Number of candidates",
          "example": 1,
          "type": "integer"
        },
        "candidatesGeneratedAt": {
          "description": "Candidates's last search date",
          "example": "2018-12-07 12:52:35",
          "type": "string"
        },
        "candidatesOldestGeneratedAt": {
          "description": "Candidates's oldest search date",
          "example": "2018-12-07 12:52:35",
          "type": "string"
        },
        "analytics": {
          "$ref": "#/definitions/ScreeningCandidateAnalytics2"
        },
        "source": {
          "description": "Data source",
          "example": "ILG / LN / MIXED",
          "type": "string"
        },
        "hasScreened": {
          "description": "Wether candidates has been screened",
          "example": 0,
          "type": "boolean"
        },
        "identity": {
          "$ref": "#/definitions/ConformityIdentity2"
        },
        "nbUnprocessed": {
          "description": "Number of unprocessed candidate",
          "example": 1,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Company": {
      "properties": {
        "identity": {
          "$ref": "#/definitions/Identity"
        },
        "sites": {
          "$ref": "#/definitions/Sites2"
        },
        "risk": {
          "$ref": "#/definitions/Risk"
        },
        "score": {
          "$ref": "#/definitions/Score"
        },
        "financial": {
          "$ref": "#/definitions/Financial"
        },
        "links": {
          "$ref": "#/definitions/Links2"
        },
        "groupStructure": {
          "$ref": "#/definitions/GroupMember4"
        },
        "groupInfo": {
          "$ref": "#/definitions/GroupInfo"
        },
        "mandataire": {
          "$ref": "#/definitions/Executive"
        },
        "lastAds": {
          "description": "",
          "items": {
            "$ref": "#/definitions/Event3"
          },
          "type": "array"
        },
        "events": {
          "$ref": "#/definitions/Events2"
        },
        "executives": {
          "$ref": "#/definitions/Executives3"
        },
        "mandats": {
          "$ref": "#/definitions/CompanyMandats2"
        },
        "legal": {
          "$ref": "#/definitions/Legal2"
        },
        "kyc": {
          "$ref": "#/definitions/Kyc"
        }
      },
      "type": "object"
    },
    "Availability": {
      "properties": {
        "identity": {
          "description": "Identity availability",
          "type": "boolean",
          "enum": [
            true,
            false,
            null
          ]
        },
        "sites": {
          "description": "Sites availability",
          "type": "boolean",
          "enum": [
            true,
            false,
            null
          ]
        },
        "risk": {
          "description": "Risk availability",
          "type": "boolean",
          "enum": [
            true,
            false,
            null
          ]
        },
        "score": {
          "description": "Score availability",
          "type": "boolean",
          "enum": [
            true,
            false,
            null
          ]
        },
        "financial": {
          "description": "Financial availability",
          "type": "boolean",
          "enum": [
            true,
            false,
            null
          ]
        },
        "links": {
          "description": "Links availability",
          "type": "boolean",
          "enum": [
            true,
            false,
            null
          ]
        },
        "groupStructure": {
          "description": "Group structure availability",
          "type": "boolean",
          "enum": [
            true,
            false,
            null
          ]
        },
        "groupInfo": {
          "description": "Group infos availability",
          "type": "boolean",
          "enum": [
            true,
            false,
            null
          ]
        },
        "mandataire": {
          "description": "Mandataire availability",
          "type": "boolean",
          "enum": [
            true,
            false,
            null
          ]
        },
        "lastAds": {
          "description": "Last ads availability",
          "type": "boolean",
          "enum": [
            true,
            false,
            null
          ]
        },
        "events": {
          "description": "Events availability",
          "type": "boolean",
          "enum": [
            true,
            false,
            null
          ]
        },
        "executives": {
          "description": "Executives availability",
          "type": "boolean",
          "enum": [
            true,
            false,
            null
          ]
        },
        "mandats": {
          "description": "Mandats availability",
          "type": "boolean",
          "enum": [
            true,
            false,
            null
          ]
        },
        "legal": {
          "description": "Legal availability",
          "type": "boolean",
          "enum": [
            true,
            false,
            null
          ]
        },
        "kyc": {
          "description": "Kyc availability",
          "type": "boolean",
          "enum": [
            true,
            false,
            null
          ]
        }
      },
      "type": "object"
    },
    "MonitoringAlertsList": {
      "type": "object"
    },
    "MonitoringAlertsList2": {
      "type": "object"
    },
    "PortfolioItems": {
      "type": "object"
    },
    "Targets": {
      "type": "object"
    },
    "Portfolios": {
      "properties": {
        "portfolios": {
          "description": "List of portfolios",
          "items": {
            "$ref": "#/definitions/Portfolio3"
          },
          "type": "array"
        },
        "count": {
          "description": "Number of portfolios",
          "example": "1",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Portfolio": {
      "properties": {
        "id": {
          "description": "Portfolio's Id",
          "example": 2,
          "type": "integer"
        },
        "label": {
          "description": "Name of the portfolio",
          "example": "Cr\u00e9alerte Rh\u00f4ne",
          "type": "string"
        },
        "title": {
          "description": "Display name of the portfolio",
          "example": "Surveillance en ligne",
          "type": "string"
        },
        "alertType": {
          "description": "Type of alert (jurialerte, scorealerte\u2026",
          "example": 2,
          "type": "integer"
        },
        "extendable": {
          "description": "Extension of financial links",
          "example": 0,
          "type": "boolean"
        },
        "matchable": {
          "description": "Is a machine expert portfolio",
          "example": 1,
          "type": "boolean"
        },
        "type": {
          "description": "Portfolio type : complex, normal\u2026",
          "example": 1,
          "type": "integer"
        },
        "updateDate": {
          "description": "Update date of the portfolio",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "createdAt": {
          "description": "Creation date of the portfolio",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "customer": {
          "description": "customer information",
          "items": {
            "$ref": "#/definitions/Customer"
          },
          "type": "array"
        },
        "editable": {
          "description": "this portfolio is editable",
          "example": 1,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Portfolio2": {
      "properties": {
        "id": {
          "description": "Portfolio's Id",
          "example": 2,
          "type": "integer"
        },
        "label": {
          "description": "Name of the portfolio",
          "example": "Cr\u00e9alerte Rh\u00f4ne",
          "type": "string"
        },
        "alertType": {
          "description": "Type of alert (jurialerte, scorealerte\u2026",
          "example": 2,
          "type": "integer"
        },
        "item": {
          "description": "List of monitored item",
          "items": {
            "$ref": "#/definitions/PortfolioItem"
          },
          "type": "array"
        },
        "editable": {
          "description": "this portfolio is editable",
          "example": 1,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "MonitoringNumbers": {
      "properties": {
        "nbitems": {
          "description": "Number of items",
          "example": 2,
          "type": "integer"
        },
        "nbSubscriptions": {
          "description": "Number of subscriptions",
          "example": 2,
          "type": "integer"
        },
        "nbPortfolios": {
          "description": "Number of portfolios",
          "example": 2,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Subscriptions": {
      "type": "object"
    },
    "PortfolioItems2": {
      "properties": {
        "sirens": {
          "description": "siren",
          "items": {
            "example": "258899555",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Company2": {
      "properties": {
        "identity": {
          "$ref": "#/definitions/Identity2"
        },
        "score": {
          "$ref": "#/definitions/Score2"
        }
      },
      "type": "object"
    },
    "Score2": {
      "properties": {
        "score": {
          "description": "Score",
          "example": 12,
          "type": "integer"
        },
        "creditLimit": {
          "description": "Advise on max credit",
          "example": 10000,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "CodeLabelPair": {
      "properties": {
        "code": {
          "description": "Code",
          "type": "string"
        },
        "label": {
          "description": "Description of the code",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CompanySearch": {
      "properties": {
        "companies": {
          "description": "",
          "items": {
            "$ref": "#/definitions/CompanySearchResult"
          },
          "type": "array"
        },
        "executives": {
          "description": "",
          "items": {
            "$ref": "#/definitions/CompanySearchResult"
          },
          "type": "array"
        },
        "count": {
          "description": "Number of companies",
          "type": "integer"
        },
        "countExecutives": {
          "description": "Number of executives",
          "type": "integer"
        },
        "found": {
          "description": "Total number of result for companies",
          "type": "integer"
        },
        "foundExecutives": {
          "description": "Total number of result for executives",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "CompanySearchGeneric": {
      "properties": {
        "results": {
          "description": "",
          "items": {
            "$ref": "#/definitions/CompanySearchResult"
          },
          "type": "array"
        },
        "count": {
          "description": "Number of search elements",
          "type": "integer"
        },
        "found": {
          "description": "Total number of result for search",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "FindResultModel": {
      "properties": {
        "company": {
          "$ref": "#/definitions/Company3"
        },
        "site": {
          "$ref": "#/definitions/Site3"
        }
      },
      "type": "object"
    },
    "SiteSearch": {
      "properties": {
        "sites": {
          "description": "",
          "items": {
            "$ref": "#/definitions/Site4"
          },
          "type": "array"
        },
        "count": {
          "type": "integer"
        },
        "found": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Site": {
      "properties": {
        "id": {
          "description": "Identifier for an establishment",
          "example": "12345678900129",
          "type": "string"
        },
        "companyId": {
          "description": "Identifier for the company owning the establishment",
          "example": "123456789",
          "type": "string"
        },
        "registrationId": {
          "description": "Fiscal registration Identifier",
          "example": "12345678900129",
          "type": "string"
        },
        "siteNumber": {
          "description": "Establishment number",
          "example": "00129",
          "type": "string"
        },
        "name": {
          "description": "Name of the establishment",
          "example": "Great Company",
          "type": "string"
        },
        "commercialName": {
          "description": "Commercial Name of the establishment",
          "example": "World Aware",
          "type": "string"
        },
        "tradings": {
          "description": "Trading Name of the establishment",
          "example": "GC Information",
          "type": "string"
        },
        "sigle": {
          "description": "Acronym of the establishment",
          "example": "G.C.W.A.",
          "type": "string"
        },
        "status": {
          "description": "Whether the establishment is active or not",
          "example": true,
          "type": "boolean"
        },
        "creationDate": {
          "description": "When the establishment opened",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "closingDate": {
          "description": "When the establishment closed (if status=false)",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "isHeadquarter": {
          "description": "Whether the establishment is headquarter or not",
          "example": true,
          "type": "boolean"
        },
        "address": {
          "$ref": "#/definitions/Address2"
        },
        "headquarter": {
          "$ref": "#/definitions/Site"
        },
        "workforce": {
          "$ref": "#/definitions/Workforce2"
        },
        "activity": {
          "$ref": "#/definitions/CodeLabelPair3"
        },
        "company": {
          "$ref": "#/definitions/Company4"
        },
        "tailleUniteUrbaine": {
          "description": "Size of urban unit",
          "type": "integer"
        },
        "trancheCommune": {
          "description": "Range size of city where the establishment is located",
          "example": "10000 - 100000",
          "type": "string"
        },
        "lieuActivite": {
          "description": "\u00e0 compl\u00e9ter",
          "type": "string"
        },
        "surface": {
          "description": "\u00e0 compl\u00e9ter",
          "type": "string"
        },
        "origine": {
          "description": "INSEE origin",
          "example": "Cr\u00e9ation",
          "type": "string"
        },
        "events": {
          "description": "list of event",
          "items": {
            "properties": {
              "eventDesc": {
                "example": "Modification si\u00e8ge",
                "type": "string"
              },
              "eventDate": {
                "example": "2015-07-09",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Sites": {
      "properties": {
        "sites": {
          "description": "",
          "items": {
            "$ref": "#/definitions/Site5"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Supervisions": {
      "properties": {
        "supervisions": {
          "description": "List of Supervision",
          "items": {
            "$ref": "#/definitions/Supervision"
          },
          "type": "array"
        },
        "count": {
          "description": "Number of supervision",
          "example": 2,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Error304Model": {
      "properties": {
        "code": {
          "description": "http error code",
          "example": 304,
          "type": "integer"
        },
        "message": {
          "description": "Error message",
          "example": "Not modified",
          "type": "string"
        }
      },
      "type": "object"
    },
    "EventDetail": {
      "properties": {
        "annonceInfo": {
          "$ref": "#/definitions/AnnonceInfo"
        },
        "personnes": {
          "$ref": "#/definitions/Personnes"
        },
        "evenements": {
          "$ref": "#/definitions/Evenements"
        },
        "acteursCession": {
          "$ref": "#/definitions/ActeursCession"
        },
        "acteursContentieux": {
          "$ref": "#/definitions/ActeursContentieux"
        },
        "etablissementsCession": {
          "$ref": "#/definitions/EtablissementsCession"
        },
        "actes": {
          "$ref": "#/definitions/Actes"
        }
      },
      "type": "object"
    },
    "ExecutiveDetail": {
      "properties": {
        "execInfos": {
          "$ref": "#/definitions/Executive2"
        },
        "mandats": {
          "description": "",
          "items": {
            "$ref": "#/definitions/Mandat"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Executive2": {
      "properties": {
        "exec_id": {
          "title": "test title",
          "description": "Executive Identifier",
          "example": 1,
          "type": "integer"
        },
        "civilite": {
          "description": "Executive title",
          "example": "M",
          "type": "string"
        },
        "name": {
          "description": "Executive Lastname",
          "example": "Doe",
          "type": "string"
        },
        "firstname": {
          "description": "Executive Firstname",
          "example": "Jane",
          "type": "string"
        },
        "type": {
          "description": "Executive type can be 'person', 'company' or 'family' (equivalent to person)",
          "example": "person",
          "type": "string"
        },
        "maidenName": {
          "description": "Executive maiden name if available",
          "example": "Smith",
          "type": "string"
        },
        "siren": {
          "description": "Company Identifier if Executive is also a company, only available in France",
          "example": "0123456789",
          "type": "string"
        },
        "fonction": {
          "$ref": "#/definitions/ExecutiveFonction2"
        },
        "address": {
          "$ref": "#/definitions/Address3"
        },
        "birthday": {
          "description": "Executive birthday, only available for a person",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "email": {
          "description": "Executive email address",
          "example": "mail@example.com",
          "type": "string",
          "format": "email"
        },
        "phone": {
          "description": "Executive phone number",
          "example": "+33658452114",
          "type": "string"
        },
        "en_poste": {
          "description": "Is the Executive is actually active",
          "example": 1,
          "type": "integer"
        },
        "mouvement": {
          "$ref": "#/definitions/ExecutiveMouvement"
        },
        "nbMandatsActifs": {
          "description": "Number of company in which executive has an active assignment",
          "example": 3,
          "type": "integer"
        },
        "scoreMoyen": {
          "description": "Average company score in which executive has an active assignment",
          "example": 12.4,
          "type": "number",
          "format": "float"
        },
        "nbMandatsInactifs": {
          "description": "Number of company in which executive has an inactive assignment",
          "example": 2,
          "type": "integer"
        },
        "nbProcols": {
          "description": "Number of event with an impact on company",
          "example": 1,
          "type": "integer"
        },
        "birthPlace": {
          "$ref": "#/definitions/Address3"
        },
        "nationality": {
          "description": "Executive nationality",
          "example": "France",
          "type": "string"
        },
        "nationalityCode": {
          "description": "Executive nationality code (ISO 3166-2)",
          "example": "FR",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Mandats": {
      "properties": {
        "mandats": {
          "description": "",
          "items": {
            "$ref": "#/definitions/Mandat4"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ExecutiveTerms2": {
      "properties": {
        "mandats": {
          "description": "List of term of office",
          "items": {
            "$ref": "#/definitions/Mandat5"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Mandat": {
      "properties": {
        "siren": {
          "description": "Company Identifier (Only available in France)",
          "example": "0123456789",
          "type": "string"
        },
        "raisonSociale": {
          "description": "Company name",
          "example": "Great Company",
          "type": "string"
        },
        "adresse": {
          "$ref": "#/definitions/Address3"
        },
        "fonction": {
          "$ref": "#/definitions/ExecutiveFonction2"
        },
        "mouvement": {
          "$ref": "#/definitions/ExecutiveMouvement"
        },
        "score": {
          "description": "Score of the company",
          "type": "integer"
        },
        "risk_label": {
          "description": "Score risk of the company",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Event": {
      "properties": {
        "adId": {
          "description": "Ad Unique Identifier",
          "example": "1A10015",
          "type": "string"
        },
        "source": {
          "description": "Source of the Information",
          "example": "JAL",
          "type": "string"
        },
        "origine": {
          "description": "Source of the Information",
          "example": "JAL",
          "type": "string"
        },
        "eventCode": {
          "description": "Event code",
          "example": "1100",
          "type": "integer"
        },
        "categorie": {
          "description": "Event in human readable text",
          "example": "Cr\u00e9ation d'entreprise",
          "type": "string"
        },
        "dateParution": {
          "description": "Date when the information was published",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "dateEffet": {
          "description": "Date when the change has happened or will happen",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "role": {
          "description": "Role of the company regarding the information",
          "type": "string"
        },
        "raisonSociale": {
          "description": "Company name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Block2": {
      "properties": {
        "id": {
          "description": "Identifier of block",
          "type": "integer"
        },
        "label": {
          "description": "Label of block",
          "type": "string"
        },
        "nbActiveTerms": {
          "description": "number of active term in the block",
          "type": "integer"
        },
        "nbInactiveTerms": {
          "description": "number of inactive term in the block",
          "type": "integer"
        },
        "nbActiveRegroupings": {
          "description": "number of active regroupings in the block",
          "type": "integer"
        },
        "nbInactiveRegroupings": {
          "description": "number of inactive regroupings in the block",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Group": {
      "properties": {
        "members": {
          "description": "Group members",
          "items": {
            "$ref": "#/definitions/GroupMember5"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Nafs": {
      "properties": {
        "nafs": {
          "description": "List of activity code",
          "items": {
            "$ref": "#/definitions/CodeLabelPair4"
          },
          "type": "array"
        },
        "count": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "StatActivity": {
      "properties": {
        "score": {
          "$ref": "#/definitions/Score3"
        },
        "ratios": {
          "$ref": "#/definitions/Ratios2"
        }
      },
      "type": "object"
    },
    "Score3": {
      "properties": {
        "score": {
          "description": "Score",
          "example": 12,
          "type": "integer"
        },
        "previous": {
          "description": "Previous score",
          "example": 12,
          "type": "integer"
        },
        "delaiReglementFournisseur": {
          "description": "Estimated number of day for a company to pay its providers",
          "example": 86.2,
          "type": "number",
          "format": "float"
        },
        "history": {
          "description": "Score history",
          "items": {
            "properties": {
              "year": {
                "example": "2017",
                "type": "string"
              },
              "month": {
                "example": "05",
                "type": "string"
              },
              "average_score": {
                "example": "15.0",
                "type": "string"
              },
              "average_score_activity": {
                "example": "10.1",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Ratios2": {
      "properties": {
        "turnover": {
          "description": "Turnover",
          "example": 110797,
          "type": "integer"
        },
        "operatingIncome": {
          "description": "Operating income",
          "example": 21,
          "type": "integer"
        },
        "financialExpenses": {
          "description": "Financial expenses",
          "example": 0,
          "type": "integer"
        },
        "netIncome": {
          "description": "Net income",
          "example": 0,
          "type": "integer"
        },
        "equity": {
          "description": "Equity",
          "example": 1633,
          "type": "integer"
        },
        "workforce": {
          "description": "Effectif",
          "example": 85,
          "type": "integer"
        },
        "liquidAssets": {
          "description": "Liquid Assets",
          "example": 2334333,
          "type": "integer"
        },
        "operationalMargin": {
          "description": "Operational margin",
          "example": 0.02,
          "type": "number",
          "format": "float"
        },
        "netMargin": {
          "description": "Net margin",
          "example": 1.01,
          "type": "number",
          "format": "float"
        },
        "grossOperatingSurplus": {
          "description": "Gross operating surplus",
          "example": 7000,
          "type": "integer"
        },
        "revenueEquityRatio": {
          "description": "Revenue on equity ratio",
          "example": 67.85,
          "type": "number",
          "format": "float"
        },
        "returnOnCapital": {
          "description": "Return on capital",
          "example": 0,
          "type": "number",
          "format": "float"
        },
        "fixedAssetsObsolescence": {
          "description": "Fixed assets obsolescence",
          "example": 0,
          "type": "integer"
        },
        "cashFlow": {
          "description": "Cash flow",
          "example": 27000,
          "type": "number",
          "format": "float"
        },
        "financialAutonomy": {
          "description": "Financial autonomy",
          "example": 0,
          "type": "number",
          "format": "float"
        },
        "repaymentCapacity": {
          "description": "Repayment capacity",
          "example": 178,
          "type": "number",
          "format": "float"
        },
        "generalCreditworthiness": {
          "description": "General creditworthiness",
          "example": 1,
          "type": "number",
          "format": "float"
        },
        "currentRatio": {
          "description": "Current ratio",
          "example": 5,
          "type": "number",
          "format": "float"
        },
        "restrictedLiquidity": {
          "description": "RestrictedLliquidity",
          "example": 5,
          "type": "number",
          "format": "float"
        },
        "financialExpensesReturnRatio": {
          "description": "Financial expenses on return ratio",
          "example": 26,
          "type": "number",
          "format": "float"
        },
        "debt": {
          "description": "Debt",
          "example": 3400,
          "type": "number",
          "format": "float"
        },
        "financialStrength": {
          "description": "Financial strength",
          "example": 45,
          "type": "number",
          "format": "float"
        },
        "workingCapitalRequirement": {
          "description": "Working capital requirement",
          "example": 516000,
          "type": "integer"
        },
        "workingCapitalRequirementTurnover": {
          "description": "Working capital requirement turnover",
          "example": 466,
          "type": "integer"
        },
        "customersPaymentTime": {
          "description": "Customers payment time",
          "example": 88,
          "type": "integer"
        },
        "suppliersPaymentTime": {
          "description": "Suppliers payment time",
          "example": 96,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "CodeLabelPair2": {
      "properties": {
        "code": {
          "description": "Code",
          "type": "string"
        },
        "label": {
          "description": "Description of the code",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Notices": {
      "properties": {
        "operationalMargin": {
          "description": "Operational margin",
          "example": "+",
          "type": "string"
        },
        "netMargin": {
          "description": "Net margin",
          "example": "+",
          "type": "string"
        },
        "grossOperatingSurplus": {
          "description": "Gross operating surplus",
          "example": "++",
          "type": "string"
        },
        "revenueEquityRatio": {
          "description": "Revenue on equity ratio",
          "example": "++",
          "type": "string"
        },
        "returnOnCapital": {
          "description": "Return on capital",
          "example": "+",
          "type": "string"
        },
        "fixedAssetsObsolescence": {
          "description": "Fixed assets obsolescence",
          "example": "-",
          "type": "string"
        },
        "cashFlow": {
          "description": "Cash flow",
          "example": "",
          "type": "string"
        },
        "financialAutonomy": {
          "description": "Financial autonomy",
          "example": "--",
          "type": "string"
        },
        "repaymentCapacity": {
          "description": "Repayment capacity",
          "example": "+++",
          "type": "string"
        },
        "generalCreditworthiness": {
          "description": "General creditworthiness",
          "example": "---",
          "type": "string"
        },
        "currentRatio": {
          "description": "Current ratio",
          "example": "",
          "type": "string"
        },
        "restrictedLiquidity": {
          "description": "RestrictedLliquidity",
          "example": "++",
          "type": "string"
        },
        "financialExpensesReturnRatio": {
          "description": "Financial expenses on return ratio",
          "example": "",
          "type": "string"
        },
        "debt": {
          "description": "Debt",
          "example": "+",
          "type": "string"
        },
        "financialStrength": {
          "description": "Financial strength",
          "example": "-",
          "type": "string"
        },
        "workingCapitalRequirement": {
          "description": "Working capital requirement",
          "example": "-",
          "type": "string"
        },
        "workingCapitalRequirementTurnover": {
          "description": "Working capital requirement turnover",
          "example": "",
          "type": "string"
        },
        "customersPaymentTime": {
          "description": "Customers payment time",
          "example": "",
          "type": "string"
        },
        "suppliersPaymentTime": {
          "description": "Suppliers payment time",
          "example": "",
          "type": "string"
        }
      },
      "type": "object"
    },
    "BalanceRawData2": {
      "properties": {
        "formats": {
          "description": "Base official balance forms in company country which data fill",
          "items": {
            "example": "CERFA",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SoldeIntermediaireGestion2": {
      "type": "object"
    },
    "Balance2": {
      "properties": {
        "typeName": {
          "description": "Identifier type for Balance",
          "example": "social",
          "type": "string"
        },
        "closingDate": {
          "description": "Close balance date",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "confidentiality": {
          "description": "Balance confidentiality",
          "example": "none",
          "type": "string"
        },
        "ratios": {
          "$ref": "#/definitions/Ratios3"
        },
        "availability": {
          "description": "Availability",
          "example": true,
          "type": "boolean"
        },
        "raw": {
          "$ref": "#/definitions/BalanceRawData3"
        },
        "sig": {
          "$ref": "#/definitions/SoldeIntermediaireGestion3"
        },
        "documents": {
          "description": "PDF document available for download (May be charged per call)",
          "items": {
            "$ref": "#/definitions/BalanceDocument"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Event2": {
      "properties": {
        "adId": {
          "description": "Ad Unique Identifier",
          "example": "1A10015",
          "type": "string"
        },
        "source": {
          "description": "Source of the Information",
          "example": "JAL",
          "type": "string"
        },
        "origine": {
          "description": "Source of the Information",
          "example": "JAL",
          "type": "string"
        },
        "eventCode": {
          "description": "Event code",
          "example": "1100",
          "type": "integer"
        },
        "categorie": {
          "description": "Event in human readable text",
          "example": "Cr\u00e9ation d'entreprise",
          "type": "string"
        },
        "dateParution": {
          "description": "Date when the information was published",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "dateEffet": {
          "description": "Date when the change has happened or will happen",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "role": {
          "description": "Role of the company regarding the information",
          "type": "string"
        },
        "impact": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Executive3": {
      "properties": {
        "exec_id": {
          "title": "test title",
          "description": "Executive Identifier",
          "example": 1,
          "type": "integer"
        },
        "civilite": {
          "description": "Executive title",
          "example": "M",
          "type": "string"
        },
        "name": {
          "description": "Executive Lastname",
          "example": "Doe",
          "type": "string"
        },
        "firstname": {
          "description": "Executive Firstname",
          "example": "Jane",
          "type": "string"
        },
        "type": {
          "description": "Executive type can be 'person', 'company' or 'family' (equivalent to person)",
          "example": "person",
          "type": "string"
        },
        "maidenName": {
          "description": "Executive maiden name if available",
          "example": "Smith",
          "type": "string"
        },
        "siren": {
          "description": "Company Identifier if Executive is also a company, only available in France",
          "example": "0123456789",
          "type": "string"
        },
        "fonction": {
          "$ref": "#/definitions/ExecutiveFonction3"
        },
        "address": {
          "$ref": "#/definitions/Address4"
        },
        "birthday": {
          "description": "Executive birthday, only available for a person",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "email": {
          "description": "Executive email address",
          "example": "mail@example.com",
          "type": "string",
          "format": "email"
        },
        "phone": {
          "description": "Executive phone number",
          "example": "+33658452114",
          "type": "string"
        },
        "en_poste": {
          "description": "Is the Executive is actually active",
          "example": 1,
          "type": "integer"
        },
        "mouvement": {
          "$ref": "#/definitions/ExecutiveMouvement2"
        },
        "birthPlace": {
          "$ref": "#/definitions/Address4"
        },
        "nationality": {
          "description": "Executive nationality",
          "example": "France",
          "type": "string"
        },
        "nationalityCode": {
          "description": "Executive nationality code (ISO 3166-2)",
          "example": "FR",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Executive4": {
      "properties": {
        "exec_id": {
          "title": "test title",
          "description": "Executive Identifier",
          "example": 1,
          "type": "integer"
        },
        "civilite": {
          "description": "Executive title",
          "example": "M",
          "type": "string"
        },
        "name": {
          "description": "Executive Lastname",
          "example": "Doe",
          "type": "string"
        },
        "firstname": {
          "description": "Executive Firstname",
          "example": "Jane",
          "type": "string"
        },
        "maidenName": {
          "description": "Executive maiden name if available",
          "example": "Smith",
          "type": "string"
        },
        "siren": {
          "description": "Company Identifier if Executive is also a company, only available in France",
          "example": "0123456789",
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/Address5"
        },
        "birthday": {
          "description": "Executive birthday, only available for a person",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "birthPlace": {
          "$ref": "#/definitions/Address5"
        },
        "nationalityCode": {
          "description": "Executive nationality code (ISO 3166-2)",
          "example": "FR",
          "type": "string"
        },
        "terms": {
          "description": "List of terms",
          "items": {
            "$ref": "#/definitions/Term"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Executive5": {
      "properties": {
        "exec_id": {
          "title": "test title",
          "description": "Executive Identifier",
          "example": 1,
          "type": "integer"
        },
        "civilite": {
          "description": "Executive title",
          "example": "M",
          "type": "string"
        },
        "name": {
          "description": "Executive Lastname",
          "example": "Doe",
          "type": "string"
        },
        "firstname": {
          "description": "Executive Firstname",
          "example": "Jane",
          "type": "string"
        },
        "maidenName": {
          "description": "Executive maiden name if available",
          "example": "Smith",
          "type": "string"
        },
        "siren": {
          "description": "Company Identifier if Executive is also a company, only available in France",
          "example": "0123456789",
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/Address6"
        },
        "birthday": {
          "description": "Executive birthday, only available for a person",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "birthPlace": {
          "$ref": "#/definitions/Address6"
        },
        "nationalityCode": {
          "description": "Executive nationality code (ISO 3166-2)",
          "example": "FR",
          "type": "string"
        },
        "regroupings": {
          "description": "List of regroupings",
          "items": {
            "$ref": "#/definitions/Regrouping"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "DebtSocialStatusModel": {
      "properties": {
        "code": {
          "description": "Status of privilege at Social Security Services",
          "example": "A",
          "type": "string"
        },
        "label": {
          "description": "Documentation in progress",
          "example": "",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DebtTaxOfficeStatusModel": {
      "properties": {
        "code": {
          "description": "Status of privilege at Tax Office",
          "example": "C",
          "type": "string"
        },
        "label": {
          "description": "Documentation in progress",
          "example": "",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Privilege": {
      "properties": {
        "monitoringState": {
          "$ref": "#/definitions/MonitoringStateModel"
        },
        "monitoringStartDate": {
          "description": "Monitoring start date",
          "type": "string"
        },
        "monitoringEndDate": {
          "description": "Monitoring end date",
          "type": "string"
        },
        "amount": {
          "description": "Current active privileges amount",
          "example": 1234.56,
          "type": "number"
        },
        "amountPerTaxAndSocialLiabilityRatio": {
          "description": "Amount per tax and social liability ratio",
          "example": 1.42,
          "type": "number"
        },
        "activePrivilegesCount": {
          "description": "Number of currently active privileges",
          "example": 3,
          "type": "integer"
        },
        "privilegeCategorySynthesis": {
          "description": "Synthesis for each privilege category",
          "items": {
            "$ref": "#/definitions/PrivilegeCategorySynthesisModel"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "PrivilegeDetail": {
      "properties": {
        "privilegeCategory": {
          "$ref": "#/definitions/PrivilegeCategoryModel"
        },
        "status": {
          "$ref": "#/definitions/PrivilegeStatus"
        },
        "inscriptionDate": {
          "description": "Inscription date",
          "type": "string"
        },
        "inscriptionNumber": {
          "description": "Inscription number",
          "type": "string"
        },
        "debtAmount": {
          "description": "Debt amount",
          "type": "number"
        },
        "debtCurrency": {
          "description": "Debt currency",
          "type": "string"
        },
        "creditorName": {
          "description": "Privilege's creditor name",
          "type": "string"
        },
        "creditorAddress": {
          "$ref": "#/definitions/Address7"
        },
        "greffe": {
          "$ref": "#/definitions/Greffe"
        },
        "expirationDate": {
          "description": "Privilege expiration date",
          "type": "string"
        },
        "lastPartialRadiationDate": {
          "description": "Last partial radiation date",
          "type": "string"
        },
        "partialRadiationAmount": {
          "description": "Partial radiation amount",
          "type": "number"
        },
        "definitiveRadiationDate": {
          "description": "Definitive radiation date",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Address": {
      "properties": {
        "country": {
          "description": "Country name",
          "example": "France",
          "type": "string"
        },
        "countryCode": {
          "description": "Country code (ISO 3166-2)",
          "example": "FR",
          "type": "string"
        },
        "street": {
          "description": "Street address",
          "example": "1 rue Michel Vaillant",
          "type": "string"
        },
        "streetDetail": {
          "$ref": "#/definitions/Street"
        },
        "street2": {
          "description": "Street address 2",
          "example": "Enco de Botte",
          "type": "string"
        },
        "postalBoxNumber": {
          "description": "Postal Box number",
          "example": "BP 001",
          "type": "string"
        },
        "region": {
          "description": "Region name",
          "example": "\u00cele-de-France",
          "type": "string"
        },
        "postalCode": {
          "description": "Postal Code",
          "example": "75000",
          "type": "string"
        },
        "locality": {
          "description": "City",
          "example": "Paris",
          "type": "string"
        },
        "mailFormatted": {
          "$ref": "#/definitions/PostalAddressMailFormat"
        }
      },
      "type": "object"
    },
    "Site2": {
      "properties": {
        "id": {
          "description": "Identifier for an establishment",
          "example": "12345678900129",
          "type": "string"
        },
        "companyId": {
          "description": "Identifier for the company owning the establishment",
          "example": "123456789",
          "type": "string"
        },
        "registrationId": {
          "description": "Fiscal registration Identifier",
          "example": "12345678900129",
          "type": "string"
        },
        "siteNumber": {
          "description": "Establishment number",
          "example": "00129",
          "type": "string"
        },
        "name": {
          "description": "Name of the establishment",
          "example": "Great Company",
          "type": "string"
        },
        "commercialName": {
          "description": "Commercial Name of the establishment",
          "example": "World Aware",
          "type": "string"
        },
        "tradings": {
          "description": "Trading Name of the establishment",
          "example": "GC Information",
          "type": "string"
        },
        "status": {
          "description": "Whether the establishment is active or not",
          "example": true,
          "type": "boolean"
        },
        "isHeadquarter": {
          "description": "Whether the establishment is headquarter or not",
          "example": true,
          "type": "boolean"
        },
        "origine": {
          "description": "INSEE origin",
          "example": "Cr\u00e9ation",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Contact2": {
      "properties": {
        "type": {
          "description": "Type of contact info",
          "example": "Personal",
          "type": "string"
        },
        "phone": {
          "description": "Phone number",
          "example": "+33123456789",
          "type": "string"
        },
        "fax": {
          "description": "Fax number",
          "example": "+33123456789",
          "type": "string"
        },
        "email": {
          "description": "Email",
          "example": "email@example.org",
          "type": "string",
          "format": "mail"
        },
        "webSite": {
          "description": "Homepage",
          "example": "http://greatcompany.com",
          "type": "string",
          "format": "url"
        }
      },
      "type": "object"
    },
    "LegalFormModel": {
      "properties": {
        "code": {
          "description": "Legal form code",
          "example": "1900",
          "type": "string"
        },
        "codeINSEE": {
          "description": "Legal form INSEE code",
          "example": "1000",
          "type": "string"
        },
        "label": {
          "description": "Legal form label",
          "example": "Personne physique",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ActivityModel": {
      "properties": {
        "code": {
          "description": "Activity code",
          "example": "3030Z",
          "type": "string"
        },
        "label": {
          "description": "Activity label",
          "example": "Construction a\u00e9ronautique et spatiale",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SecondaryActivityModel": {
      "properties": {
        "code": {
          "description": "Secondary activity code",
          "example": "4941B",
          "type": "string"
        },
        "label": {
          "description": "Secondary activity label",
          "example": "Transports routiers de fret de proximit\u00e9",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Cotation": {
      "properties": {
        "codeIsin": {
          "description": "ISIN Code of a company",
          "example": "FR0000120271",
          "type": "string"
        },
        "placeCotation": {
          "description": "Exchange Market",
          "example": "Euronext Paris, Brussels",
          "type": "string"
        },
        "indices": {
          "description": "Stock market index names",
          "items": {
            "example": "CAC 40",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "MarketInformationModel": {
      "properties": {
        "code": {
          "description": "Market information code",
          "example": "PME",
          "type": "string"
        },
        "label": {
          "description": "Market information label",
          "example": "Petite ou Moyenne Entreprise",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GroupMember": {
      "properties": {
        "entityId": {
          "description": "Member ID",
          "example": 0,
          "type": "integer"
        },
        "entityName": {
          "description": "Member name",
          "example": "BAZIN S\u00e9bastien",
          "type": "string"
        },
        "registrationNumber": {
          "description": "Member registration number",
          "example": "503207896",
          "type": "string"
        },
        "countryCode": {
          "description": "Country code in ISO 3166-2",
          "example": "FR",
          "type": "string"
        },
        "country": {
          "description": "Country label",
          "example": "France",
          "type": "string"
        },
        "share": {
          "description": "Share percentage",
          "example": 15,
          "type": "number",
          "format": "float"
        },
        "type": {
          "description": "Member type",
          "example": "person",
          "type": "string"
        },
        "methodUsed": {
          "description": "Method used in UBO seek",
          "example": "legal representative",
          "type": "string"
        },
        "qualite": {
          "description": "qualit\u00e9 de l'ubo",
          "example": "Repr\u00e9sentant L\u00e9gal / Actionnaire",
          "type": "string"
        },
        "distance": {
          "description": "Distance between company and UBO",
          "example": 0,
          "type": "integer"
        },
        "address": {
          "$ref": "#/definitions/Address8"
        },
        "fonction": {
          "$ref": "#/definitions/ExecutiveFonction4"
        },
        "birthday": {
          "description": "UBO birthday if available",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "birthCity": {
          "description": "UBO birth city if available",
          "example": "PARIS",
          "type": "string"
        },
        "birthCountry": {
          "description": "UBO birth country if available",
          "example": "France",
          "type": "string"
        },
        "birthCountryCode": {
          "description": "UBO birth country code (ISO 3166-2) if available",
          "example": "FR",
          "type": "string"
        },
        "nationality": {
          "description": "Executive nationality",
          "example": "France",
          "type": "string"
        },
        "nationalityCode": {
          "description": "Executive country code (ISO 3166-2)",
          "example": "FR",
          "type": "string"
        },
        "name": {
          "description": "Member name",
          "example": "BAZIN",
          "type": "string"
        },
        "firstname": {
          "description": "Member firstname",
          "example": "S\u00e9bastien",
          "type": "string"
        },
        "maidenName": {
          "description": "Member maidenname",
          "example": "BAZIN",
          "type": "string"
        },
        "title": {
          "description": "Member title",
          "example": "M / Mme",
          "type": "string"
        },
        "minDate": {
          "description": "Oldest information date",
          "example": "1970-01-01",
          "type": "string"
        },
        "maxDate": {
          "description": "Most recent information date",
          "example": "1970-01-01",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UboInvestigationStep": {
      "properties": {
        "step": {
          "description": "Investigation step name",
          "type": "string"
        },
        "reason": {
          "description": "Investigation step result",
          "type": "string"
        },
        "decision": {
          "$ref": "#/definitions/CodeLabelPair5"
        }
      },
      "type": "object"
    },
    "KycUbo2": {
      "properties": {
        "minDate": {
          "description": "Oldest information date",
          "type": "string"
        },
        "maxDate": {
          "description": "Most recent information date",
          "type": "string"
        },
        "totalMembers": {
          "description": "Number of UBO",
          "type": "integer"
        },
        "totalCapitalDetentionMembers": {
          "description": "Number of capital detentions",
          "type": "integer"
        },
        "totalLegalRepresentativeMembers": {
          "description": "Number of legal representatives",
          "type": "integer"
        },
        "members": {
          "description": "UBO",
          "items": {
            "$ref": "#/definitions/GroupMember6"
          },
          "type": "array"
        },
        "steps": {
          "description": "Procedure steps passed through to find ubo",
          "items": {
            "$ref": "#/definitions/UboInvestigationStep2"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Conformity2": {
      "properties": {
        "operatingRisk": {
          "$ref": "#/definitions/ConformityRisk2"
        },
        "countryRisk": {
          "$ref": "#/definitions/ConformityRisk2"
        },
        "activityRisk": {
          "$ref": "#/definitions/ConformityRisk2"
        }
      },
      "type": "object"
    },
    "LegalDepositList2": {
      "properties": {
        "list": {
          "description": "list of document",
          "items": {
            "$ref": "#/definitions/LegalDeposit2"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "LegalStatus": {
      "properties": {
        "registrationId": {
          "description": "company identifier",
          "example": "15ED4561111",
          "type": "string"
        },
        "date": {
          "description": "Deposit date",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "dateAct": {
          "description": "Act date",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "availability": {
          "description": "Available or not",
          "example": true,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "LegalDeposit": {
      "properties": {
        "number": {
          "description": "Deposit number",
          "example": "456",
          "type": "integer"
        },
        "date": {
          "description": "where the deposit happened",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "acts": {
          "description": "list of act composing the deposit",
          "items": {
            "$ref": "#/definitions/LegalAct"
          },
          "type": "array"
        },
        "availability": {
          "description": "Available or not",
          "example": true,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Shareholders2": {
      "properties": {
        "members": {
          "description": "",
          "items": {
            "$ref": "#/definitions/GroupMember7"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Subsidiaries2": {
      "properties": {
        "members": {
          "description": "",
          "items": {
            "$ref": "#/definitions/GroupMember7"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "GroupMember2": {
      "properties": {
        "entityId": {
          "description": "Member ID",
          "example": 0,
          "type": "integer"
        },
        "entityName": {
          "description": "Member name",
          "example": "BAZIN S\u00e9bastien",
          "type": "string"
        },
        "registrationNumber": {
          "description": "Member registration number",
          "example": "503207896",
          "type": "string"
        },
        "countryCodeIso3": {
          "description": "Country code in ISO 3166-1 alpha-3",
          "example": "FRA",
          "type": "string"
        },
        "countryCode": {
          "description": "Country code in ISO 3166-2",
          "example": "FR",
          "type": "string"
        },
        "country": {
          "description": "Country label",
          "example": "France",
          "type": "string"
        },
        "share": {
          "description": "Share percentage",
          "example": 15,
          "type": "number",
          "format": "float"
        },
        "score": {
          "description": "Member score",
          "example": 12,
          "type": "integer"
        },
        "type": {
          "description": "Member type",
          "example": "person",
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/Address9"
        },
        "birthday": {
          "description": "UBO birthday if available",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "birthCity": {
          "description": "UBO birth city if available",
          "example": "PARIS",
          "type": "string"
        },
        "birthCountry": {
          "description": "UBO birth country if available",
          "example": "France",
          "type": "string"
        },
        "birthCountryCode": {
          "description": "UBO birth country code (ISO 3166-2) if available",
          "example": "FR",
          "type": "string"
        },
        "name": {
          "description": "Member name",
          "example": "BAZIN",
          "type": "string"
        },
        "firstname": {
          "description": "Member firstname",
          "example": "S\u00e9bastien",
          "type": "string"
        },
        "maidenName": {
          "description": "Member maidenname",
          "example": "BAZIN",
          "type": "string"
        },
        "title": {
          "description": "Member title",
          "example": "M / Mme",
          "type": "string"
        },
        "minDate": {
          "description": "Oldest information date",
          "example": "1970-01-01",
          "type": "string"
        },
        "maxDate": {
          "description": "Most recent information date",
          "example": "1970-01-01",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GroupMember3": {
      "properties": {
        "entityId": {
          "description": "Member ID",
          "example": 0,
          "type": "integer"
        },
        "entityName": {
          "description": "Member name",
          "example": "BAZIN S\u00e9bastien",
          "type": "string"
        },
        "registrationNumber": {
          "description": "Member registration number",
          "example": "503207896",
          "type": "string"
        },
        "countryCodeIso3": {
          "description": "Country code in ISO 3166-1 alpha-3",
          "example": "FRA",
          "type": "string"
        },
        "countryCode": {
          "description": "Country code in ISO 3166-2",
          "example": "FR",
          "type": "string"
        },
        "country": {
          "description": "Country label",
          "example": "France",
          "type": "string"
        },
        "share": {
          "description": "Share percentage",
          "example": 15,
          "type": "number",
          "format": "float"
        },
        "score": {
          "description": "Member score",
          "example": 12,
          "type": "integer"
        },
        "type": {
          "description": "Member type",
          "example": "person",
          "type": "string"
        },
        "name": {
          "description": "Member name",
          "example": "BAZIN",
          "type": "string"
        },
        "firstname": {
          "description": "Member firstname",
          "example": "S\u00e9bastien",
          "type": "string"
        },
        "maidenName": {
          "description": "Member maidenname",
          "example": "BAZIN",
          "type": "string"
        },
        "title": {
          "description": "Member title",
          "example": "M / Mme",
          "type": "string"
        },
        "minDate": {
          "description": "Oldest information date",
          "example": "1970-01-01",
          "type": "string"
        },
        "maxDate": {
          "description": "Most recent information date",
          "example": "1970-01-01",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ExecutiveFonction": {
      "properties": {
        "code": {
          "description": "Position code",
          "example": "047",
          "type": "string"
        },
        "label": {
          "description": "Position description",
          "example": "Administrateur",
          "type": "string"
        },
        "priority": {
          "description": "Position priority order",
          "example": 4,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Mandat2": {
      "properties": {
        "siren": {
          "description": "Company Identifier (Only available in France)",
          "example": "0123456789",
          "type": "string"
        },
        "raisonSociale": {
          "description": "Company name",
          "example": "Great Company",
          "type": "string"
        },
        "adresse": {
          "$ref": "#/definitions/Address10"
        },
        "fonction": {
          "$ref": "#/definitions/ExecutiveFonction5"
        },
        "mouvement": {
          "$ref": "#/definitions/ExecutiveMouvement3"
        },
        "score": {
          "description": "Score of the company",
          "type": "integer"
        },
        "risk_label": {
          "description": "Score risk of the company",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Mandat3": {
      "properties": {
        "siren": {
          "description": "Company Identifier (Only available in France)",
          "example": "0123456789",
          "type": "string"
        },
        "raisonSociale": {
          "description": "Company name",
          "example": "Great Company",
          "type": "string"
        },
        "adresse": {
          "$ref": "#/definitions/Address11"
        },
        "regroupings": {
          "description": "List of term of offices",
          "items": {
            "$ref": "#/definitions/Term2"
          },
          "type": "array"
        },
        "score": {
          "description": "Score of the company",
          "type": "integer"
        },
        "risk_label": {
          "description": "Score risk of the company",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Insolvency": {
      "properties": {
        "code": {
          "description": "Collective procedure code",
          "example": "5210",
          "type": "integer"
        },
        "label": {
          "description": "Label of the insolvency procedure",
          "example": "Liquidation en cours",
          "type": "string"
        },
        "effectiveStart": {
          "description": "Effective start date of the insolvency procedure",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "effectiveEnd": {
          "description": "Effective end date of the insolvency procedure",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        }
      },
      "type": "object"
    },
    "ScreeningCandidate": {
      "properties": {
        "id": {
          "description": "Candidate identifier",
          "example": "WX0009125985",
          "type": "string"
        },
        "siren": {
          "description": "Registration id, only defined when processed with a company",
          "example": "780129987",
          "type": "string"
        },
        "individualId": {
          "description": "Registration id, only defined when processes with an individual",
          "example": "55874",
          "type": "string"
        },
        "processed": {
          "description": "Wether candidate is processed",
          "example": false,
          "type": "boolean"
        },
        "name": {
          "description": "Candidate name",
          "example": "Renault S.A.S",
          "type": "string"
        },
        "addresses": {
          "description": "Candidate addresses",
          "items": {
            "properties": {
              "street": {
                "example": "13 Quai Alphonse le Gallo",
                "type": "string"
              },
              "postalCode": {
                "example": "92100",
                "type": "string"
              },
              "city": {
                "example": "Boulogne-Billancourt",
                "type": "string"
              },
              "country": {
                "example": "France",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "birthday": {
          "description": "Candidate birthday, can be multiple because of unreliable sources",
          "items": {
            "example": "1954-01-XX",
            "type": "string"
          },
          "type": "array"
        },
        "fileTypes": {
          "description": "Candidate file types",
          "items": {
            "example": "Full",
            "type": "string"
          },
          "type": "array",
          "enum": [
            "Full"
          ]
        },
        "type": {
          "description": "Candidate type",
          "example": "Individual",
          "type": "string",
          "enum": [
            "Individual",
            "Business",
            "Unknown"
          ]
        },
        "gender": {
          "description": "Candidate gender",
          "example": "Female",
          "type": "string",
          "enum": [
            "Female",
            "Male",
            "Unknown"
          ]
        },
        "reasonListed": {
          "description": "Candidate reason listed",
          "example": "Enforcement:Money Laundering",
          "type": "string"
        },
        "entityIDs": {
          "description": "Candidate entity IDs",
          "items": {
            "properties": {
              "Other": {
                "example": "78012998703591",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array",
          "enum": [
            "Other",
            "ProprietaryUID"
          ]
        },
        "score": {
          "description": "Candidate score relevance",
          "example": "95",
          "type": "integer"
        },
        "generatedAt": {
          "description": "Candidate generation or updated date",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "raw": {
          "description": "Raw values return by WorldCompliance",
          "type": "object"
        },
        "processedBy": {
          "description": "Username who processed the last evaluation process",
          "example": "example@infolegale.fr",
          "type": "string"
        },
        "processedAt": {
          "description": "Last processed date for the last evaluation process",
          "example": "2018-12-07 15:28:30",
          "type": "string"
        },
        "analytics": {
          "$ref": "#/definitions/ScreeningCandidateAnalytics"
        },
        "processingStatus": {
          "description": "processing status",
          "example": "PROCESSED / UNPROCESSED",
          "type": "string"
        },
        "validationStatus": {
          "description": "Validation Status",
          "example": "VALIDATED / UNVALIDATED / PROCESS PENDING",
          "type": "string"
        },
        "source": {
          "description": "Data source of candidate",
          "example": "ILG / LN",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ScreeningCandidateAnalytics": {
      "properties": {
        "solvability": {
          "$ref": "#/definitions/ConformityRiskItem"
        },
        "activity": {
          "$ref": "#/definitions/ConformityRiskItem"
        },
        "domiciliationCountry": {
          "$ref": "#/definitions/ConformityRiskItem"
        },
        "nationality": {
          "$ref": "#/definitions/ConformityRiskItem"
        },
        "operatingRisk": {
          "$ref": "#/definitions/ConformityRiskItem"
        },
        "soe": {
          "$ref": "#/definitions/ConformityRiskItem"
        },
        "pep": {
          "$ref": "#/definitions/ConformityRiskItem"
        },
        "sanction": {
          "$ref": "#/definitions/ConformityRiskItem"
        },
        "adverseMedia": {
          "$ref": "#/definitions/ConformityRiskItem"
        }
      },
      "type": "object"
    },
    "ConformityIdentity": {
      "properties": {
        "id": {
          "description": "Siren or LFI Entity ID or Exec Id",
          "example": 1,
          "type": "integer"
        },
        "name": {
          "description": "Full name of executives / shareholders / ubo OR company name",
          "example": "M Jean PIERRE / Padaccor",
          "type": "string"
        },
        "firstName": {
          "description": "First name of executives",
          "example": "Jean",
          "type": "string"
        },
        "lastName": {
          "description": "Last name of executives",
          "example": "PIERRE",
          "type": "string"
        },
        "title": {
          "description": "Title of executives",
          "example": "M/Mme",
          "type": "string"
        },
        "birthday": {
          "description": "Date of birth",
          "example": "1970-01-01",
          "type": "string",
          "format": "date"
        },
        "nationality": {
          "description": "Nationality",
          "example": "FR",
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/Address12"
        },
        "position": {
          "description": "Executive's position",
          "example": "G\u00e9rant",
          "type": "string"
        },
        "quality": {
          "description": "Ubo's position",
          "example": "Repr\u00e9sentant l\u00e9gal / Actionnaire",
          "type": "string"
        },
        "share": {
          "description": "Share",
          "example": 29.99,
          "type": "number",
          "format": "float"
        },
        "siren": {
          "description": "Company registration number",
          "example": "602036444",
          "type": "string"
        },
        "type": {
          "description": "Person Type",
          "example": "business/individual",
          "type": "string"
        }
      },
      "type": "object"
    },
    "KycConformitySummaryNodeModel": {
      "properties": {
        "status": {
          "description": "Summary status",
          "example": "low",
          "type": "string",
          "enum": [
            "low",
            "medium",
            "high"
          ]
        },
        "reason": {
          "description": "Summary reason",
          "example": "Risque Faible",
          "type": "string",
          "enum": [
            "Risque Faible",
            "Risque Moyen",
            "Risque \u00c9lev\u00e9"
          ]
        },
        "statusCount": {
          "$ref": "#/definitions/KycConformityStatusCountModel"
        }
      },
      "type": "object"
    },
    "ScreeningCandidate2": {
      "properties": {
        "id": {
          "description": "Candidate identifier",
          "example": "WX0009125985",
          "type": "string"
        },
        "siren": {
          "description": "Registration id, only defined when processed with a company",
          "example": "780129987",
          "type": "string"
        },
        "individualId": {
          "description": "Registration id, only defined when processes with an individual",
          "example": "55874",
          "type": "string"
        },
        "processed": {
          "description": "Wether candidate is processed",
          "example": false,
          "type": "boolean"
        },
        "name": {
          "description": "Candidate name",
          "example": "Renault S.A.S",
          "type": "string"
        },
        "addresses": {
          "description": "Candidate addresses",
          "items": {
            "properties": {
              "street": {
                "example": "13 Quai Alphonse le Gallo",
                "type": "string"
              },
              "postalCode": {
                "example": "92100",
                "type": "string"
              },
              "city": {
                "example": "Boulogne-Billancourt",
                "type": "string"
              },
              "country": {
                "example": "France",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "birthday": {
          "description": "Candidate birthday, can be multiple because of unreliable sources",
          "items": {
            "example": "1954-01-XX",
            "type": "string"
          },
          "type": "array"
        },
        "fileTypes": {
          "description": "Candidate file types",
          "items": {
            "example": "Full",
            "type": "string"
          },
          "type": "array",
          "enum": [
            "Full"
          ]
        },
        "type": {
          "description": "Candidate type",
          "example": "Individual",
          "type": "string",
          "enum": [
            "Individual",
            "Business",
            "Unknown"
          ]
        },
        "gender": {
          "description": "Candidate gender",
          "example": "Female",
          "type": "string",
          "enum": [
            "Female",
            "Male",
            "Unknown"
          ]
        },
        "reasonListed": {
          "description": "Candidate reason listed",
          "example": "Enforcement:Money Laundering",
          "type": "string"
        },
        "entityIDs": {
          "description": "Candidate entity IDs",
          "items": {
            "properties": {
              "Other": {
                "example": "78012998703591",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array",
          "enum": [
            "Other",
            "ProprietaryUID"
          ]
        },
        "score": {
          "description": "Candidate score relevance",
          "example": "95",
          "type": "integer"
        },
        "generatedAt": {
          "description": "Candidate generation or updated date",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "processedBy": {
          "description": "Username who processed the last evaluation process",
          "example": "example@infolegale.fr",
          "type": "string"
        },
        "processedAt": {
          "description": "Last processed date for the last evaluation process",
          "example": "2018-12-07 15:28:30",
          "type": "string"
        },
        "analytics": {
          "$ref": "#/definitions/ScreeningCandidateAnalytics2"
        },
        "processingStatus": {
          "description": "processing status",
          "example": "PROCESSED / UNPROCESSED",
          "type": "string"
        },
        "validationStatus": {
          "description": "Validation Status",
          "example": "VALIDATED / UNVALIDATED / PROCESS PENDING",
          "type": "string"
        },
        "source": {
          "description": "Data source of candidate",
          "example": "ILG / LN",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ScreeningCandidateAnalytics2": {
      "properties": {
        "solvability": {
          "$ref": "#/definitions/ConformityRiskItem2"
        },
        "activity": {
          "$ref": "#/definitions/ConformityRiskItem2"
        },
        "domiciliationCountry": {
          "$ref": "#/definitions/ConformityRiskItem2"
        },
        "nationality": {
          "$ref": "#/definitions/ConformityRiskItem2"
        },
        "operatingRisk": {
          "$ref": "#/definitions/ConformityRiskItem2"
        },
        "soe": {
          "$ref": "#/definitions/ConformityRiskItem2"
        },
        "pep": {
          "$ref": "#/definitions/ConformityRiskItem2"
        },
        "sanction": {
          "$ref": "#/definitions/ConformityRiskItem2"
        },
        "adverseMedia": {
          "$ref": "#/definitions/ConformityRiskItem2"
        }
      },
      "type": "object"
    },
    "ConformityIdentity2": {
      "properties": {
        "id": {
          "description": "Siren or LFI Entity ID or Exec Id",
          "example": 1,
          "type": "integer"
        },
        "name": {
          "description": "Full name of executives / shareholders / ubo OR company name",
          "example": "M Jean PIERRE / Padaccor",
          "type": "string"
        },
        "firstName": {
          "description": "First name of executives",
          "example": "Jean",
          "type": "string"
        },
        "lastName": {
          "description": "Last name of executives",
          "example": "PIERRE",
          "type": "string"
        },
        "title": {
          "description": "Title of executives",
          "example": "M/Mme",
          "type": "string"
        },
        "birthday": {
          "description": "Date of birth",
          "example": "1970-01-01",
          "type": "string",
          "format": "date"
        },
        "nationality": {
          "description": "Nationality",
          "example": "FR",
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/Address13"
        },
        "position": {
          "description": "Executive's position",
          "example": "G\u00e9rant",
          "type": "string"
        },
        "quality": {
          "description": "Ubo's position",
          "example": "Repr\u00e9sentant l\u00e9gal / Actionnaire",
          "type": "string"
        },
        "share": {
          "description": "Share",
          "example": 29.99,
          "type": "number",
          "format": "float"
        },
        "siren": {
          "description": "Company registration number",
          "example": "602036444",
          "type": "string"
        },
        "type": {
          "description": "Person Type",
          "example": "business/individual",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Sites2": {
      "type": "object"
    },
    "Financial": {
      "properties": {
        "turnover": {
          "description": "Financial turnover",
          "example": "1000",
          "type": "string"
        },
        "currency": {
          "description": "Currency used for financial datas",
          "example": "k\u20ac",
          "type": "string"
        },
        "netIncome": {
          "description": "Net income",
          "example": "32",
          "type": "string"
        },
        "operatingIncome": {
          "description": "Operation income",
          "example": "65",
          "type": "string"
        },
        "equity": {
          "description": "Operation income",
          "example": "145",
          "type": "string"
        },
        "closingDate": {
          "description": "Fiscal year closing date",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "lastUpdate": {
          "description": "Last update",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "workforce": {
          "$ref": "#/definitions/Workforce"
        },
        "balances": {
          "$ref": "#/definitions/Balances2"
        },
        "deptStatus": {
          "$ref": "#/definitions/DebtStatus2"
        }
      },
      "type": "object"
    },
    "Links2": {
      "properties": {
        "counts": {
          "$ref": "#/definitions/LinksCounts"
        },
        "shareholders": {
          "$ref": "#/definitions/Shareholders3"
        },
        "subsidiaries": {
          "$ref": "#/definitions/Subsidiaries3"
        }
      },
      "type": "object"
    },
    "GroupMember4": {
      "properties": {
        "parentId": {
          "description": "Parent group ID",
          "example": 0,
          "type": "integer"
        },
        "nodePath": {
          "description": "Complete path from root to current node",
          "example": "0/1",
          "type": "string"
        },
        "entityId": {
          "description": "Member ID",
          "example": 0,
          "type": "integer"
        },
        "entityName": {
          "description": "Member name",
          "example": "BAZIN S\u00e9bastien",
          "type": "string"
        },
        "registrationNumber": {
          "description": "Member registration number",
          "example": "503207896",
          "type": "string"
        },
        "countryCodeIso3": {
          "description": "Country code in ISO 3166-1 alpha-3",
          "example": "FRA",
          "type": "string"
        },
        "countryCode": {
          "description": "Country code in ISO 3166-2",
          "example": "FR",
          "type": "string"
        },
        "country": {
          "description": "Country label",
          "example": "France",
          "type": "string"
        },
        "score": {
          "description": "Member score",
          "example": 12,
          "type": "integer"
        },
        "group": {
          "$ref": "#/definitions/Group2"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "name": {
          "description": "Member name",
          "example": "BAZIN",
          "type": "string"
        },
        "firstname": {
          "description": "Member firstname",
          "example": "S\u00e9bastien",
          "type": "string"
        },
        "maidenName": {
          "description": "Member maidenname",
          "example": "BAZIN",
          "type": "string"
        },
        "title": {
          "description": "Member title",
          "example": "M / Mme",
          "type": "string"
        },
        "frenchPrivateGroupHead": {
          "$ref": "#/definitions/GroupInfo"
        },
        "minDate": {
          "description": "Oldest information date",
          "example": "1970-01-01",
          "type": "string"
        },
        "maxDate": {
          "description": "Most recent information date",
          "example": "1970-01-01",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GroupInfo": {
      "properties": {
        "entityId": {
          "type": "string"
        },
        "registrationId": {
          "type": "string"
        },
        "companyName": {
          "type": "string"
        },
        "groupWorkforce": {
          "type": "integer"
        },
        "groupTurnover": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Event3": {
      "properties": {
        "adId": {
          "description": "Ad Unique Identifier",
          "example": "1A10015",
          "type": "string"
        },
        "source": {
          "description": "Source of the Information",
          "example": "JAL",
          "type": "string"
        },
        "origine": {
          "description": "Source of the Information",
          "example": "JAL",
          "type": "string"
        },
        "eventCode": {
          "description": "Event code",
          "example": "1100",
          "type": "integer"
        },
        "categorie": {
          "description": "Event in human readable text",
          "example": "Cr\u00e9ation d'entreprise",
          "type": "string"
        },
        "dateParution": {
          "description": "Date when the information was published",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "dateEffet": {
          "description": "Date when the change has happened or will happen",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "role": {
          "description": "Role of the company regarding the information",
          "type": "string"
        },
        "impact": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Events2": {
      "type": "object"
    },
    "Executives3": {
      "type": "object"
    },
    "CompanyMandats2": {
      "type": "object"
    },
    "Legal2": {
      "type": "object"
    },
    "Kyc": {
      "properties": {
        "ubo": {
          "$ref": "#/definitions/KycUbo3"
        },
        "conformity": {
          "$ref": "#/definitions/Conformity3"
        }
      },
      "type": "object"
    },
    "Portfolio3": {
      "properties": {
        "id": {
          "description": "Portfolio's Id",
          "example": 2,
          "type": "integer"
        },
        "label": {
          "description": "Name of the portfolio",
          "example": "Cr\u00e9alerte Rh\u00f4ne",
          "type": "string"
        },
        "title": {
          "description": "Display name of the portfolio",
          "example": "Surveillance en ligne",
          "type": "string"
        },
        "alertType": {
          "description": "Type of alert (jurialerte, scorealerte\u2026",
          "example": 2,
          "type": "integer"
        },
        "matchable": {
          "description": "Is a machine expert portfolio",
          "example": 1,
          "type": "boolean"
        },
        "referenceContrat": {
          "description": "Reference contrat",
          "example": 1,
          "type": "string"
        },
        "updateDate": {
          "description": "Update date of the portfolio",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "customer": {
          "description": "customer information",
          "items": {
            "$ref": "#/definitions/Customer2"
          },
          "type": "array"
        },
        "countSubscriptions": {
          "description": "number of subscriptions",
          "example": 1,
          "type": "integer"
        },
        "countItems": {
          "description": "number of items",
          "example": 1,
          "type": "integer"
        },
        "editable": {
          "description": "this portfolio is editable",
          "example": 1,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Customer": {
      "properties": {
        "id": {
          "description": "Customer's Id",
          "example": 2,
          "type": "integer"
        },
        "label": {
          "description": "Name of the Customer",
          "example": "INFOLEGALE",
          "type": "string"
        },
        "customerCode": {
          "description": "Customer code",
          "example": 1,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PortfolioItem": {
      "properties": {
        "id": {
          "description": "id",
          "example": 2588955,
          "type": "integer"
        },
        "siren": {
          "description": "siren",
          "example": 258899555,
          "type": "integer"
        },
        "customCode": {
          "description": "Reference of the item",
          "example": "SXXCCS",
          "type": "string"
        },
        "customCredit": {
          "description": "Custom credit of the item",
          "example": 1000,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Identity2": {
      "properties": {
        "tags": {
          "description": "Market information",
          "items": {
            "$ref": "#/definitions/MarketInformationModel2"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "CompanySearchResult": {
      "properties": {
        "id": {
          "description": "Company Identitfier",
          "type": "string"
        },
        "companyId": {
          "description": "Company identifier",
          "type": "string"
        },
        "registrationId": {
          "description": "Company registration Number",
          "type": "string"
        },
        "name": {
          "description": "Company Name",
          "type": "string"
        },
        "tradings": {
          "description": "Company trading name",
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/Address14"
        },
        "activity": {
          "description": "Activity of the company",
          "type": "string"
        },
        "siege": {
          "type": "integer"
        },
        "actif": {
          "type": "integer"
        },
        "nb_etabs": {
          "type": "integer"
        },
        "representantLegal": {
          "type": "string"
        },
        "matchedExecutive": {
          "$ref": "#/definitions/Executive6"
        },
        "mandataire": {
          "$ref": "#/definitions/Executive6"
        }
      },
      "type": "object"
    },
    "Company3": {
      "properties": {
        "identity": {
          "$ref": "#/definitions/Identity3"
        },
        "risk": {
          "$ref": "#/definitions/Risk2"
        },
        "financial": {
          "$ref": "#/definitions/Financial2"
        },
        "groupInfo": {
          "$ref": "#/definitions/GroupInfo2"
        }
      },
      "type": "object"
    },
    "Site3": {
      "properties": {
        "id": {
          "description": "Identifier for an establishment",
          "example": "12345678900129",
          "type": "string"
        },
        "companyId": {
          "description": "Identifier for the company owning the establishment",
          "example": "123456789",
          "type": "string"
        },
        "registrationId": {
          "description": "Fiscal registration Identifier",
          "example": "12345678900129",
          "type": "string"
        },
        "siteNumber": {
          "description": "Establishment number",
          "example": "00129",
          "type": "string"
        },
        "name": {
          "description": "Name of the establishment",
          "example": "Great Company",
          "type": "string"
        },
        "commercialName": {
          "description": "Commercial Name of the establishment",
          "example": "World Aware",
          "type": "string"
        },
        "tradings": {
          "description": "Trading Name of the establishment",
          "example": "GC Information",
          "type": "string"
        },
        "sigle": {
          "description": "Acronym of the establishment",
          "example": "G.C.W.A.",
          "type": "string"
        },
        "status": {
          "description": "Whether the establishment is active or not",
          "example": true,
          "type": "boolean"
        },
        "creationDate": {
          "description": "When the establishment opened",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "closingDate": {
          "description": "When the establishment closed (if status=false)",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "isHeadquarter": {
          "description": "Whether the establishment is headquarter or not",
          "example": true,
          "type": "boolean"
        },
        "address": {
          "$ref": "#/definitions/Address15"
        },
        "headquarter": {
          "$ref": "#/definitions/Site3"
        },
        "workforce": {
          "$ref": "#/definitions/Workforce3"
        },
        "activity": {
          "$ref": "#/definitions/CodeLabelPair6"
        },
        "tailleUniteUrbaine": {
          "description": "Size of urban unit",
          "type": "integer"
        },
        "trancheCommune": {
          "description": "Range size of city where the establishment is located",
          "example": "10000 - 100000",
          "type": "string"
        },
        "lieuActivite": {
          "description": "\u00e0 compl\u00e9ter",
          "type": "string"
        },
        "surface": {
          "description": "\u00e0 compl\u00e9ter",
          "type": "string"
        },
        "origine": {
          "description": "INSEE origin",
          "example": "Cr\u00e9ation",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Site4": {
      "properties": {
        "id": {
          "description": "Identifier for an establishment",
          "example": "12345678900129",
          "type": "string"
        },
        "companyId": {
          "description": "Identifier for the company owning the establishment",
          "example": "123456789",
          "type": "string"
        },
        "registrationId": {
          "description": "Fiscal registration Identifier",
          "example": "12345678900129",
          "type": "string"
        },
        "siteNumber": {
          "description": "Establishment number",
          "example": "00129",
          "type": "string"
        },
        "name": {
          "description": "Name of the establishment",
          "example": "Great Company",
          "type": "string"
        },
        "commercialName": {
          "description": "Commercial Name of the establishment",
          "example": "World Aware",
          "type": "string"
        },
        "tradings": {
          "description": "Trading Name of the establishment",
          "example": "GC Information",
          "type": "string"
        },
        "status": {
          "description": "Whether the establishment is active or not",
          "example": true,
          "type": "boolean"
        },
        "isHeadquarter": {
          "description": "Whether the establishment is headquarter or not",
          "example": true,
          "type": "boolean"
        },
        "address": {
          "$ref": "#/definitions/Address16"
        },
        "company": {
          "$ref": "#/definitions/Company5"
        }
      },
      "type": "object"
    },
    "Address2": {
      "properties": {
        "country": {
          "description": "Country name",
          "example": "France",
          "type": "string"
        },
        "countryCode": {
          "description": "Country code (ISO 3166-2)",
          "example": "FR",
          "type": "string"
        },
        "street": {
          "description": "Street address",
          "example": "1 rue Michel Vaillant",
          "type": "string"
        },
        "streetDetail": {
          "$ref": "#/definitions/Street2"
        },
        "street2": {
          "description": "Street address 2",
          "example": "Enco de Botte",
          "type": "string"
        },
        "postalBoxNumber": {
          "description": "Postal Box number",
          "example": "BP 001",
          "type": "string"
        },
        "region": {
          "description": "Region name",
          "example": "\u00cele-de-France",
          "type": "string"
        },
        "deptName": {
          "description": "Department name",
          "example": "Paris",
          "type": "string"
        },
        "postalCode": {
          "description": "Postal Code",
          "example": "75000",
          "type": "string"
        },
        "locality": {
          "description": "City",
          "example": "Paris",
          "type": "string"
        },
        "mailFormatted": {
          "$ref": "#/definitions/PostalAddressMailFormat2"
        }
      },
      "type": "object"
    },
    "Workforce2": {
      "properties": {
        "value": {
          "description": "Number of employee, can be 'NN' indicating that no data has been collected",
          "example": "10",
          "type": "string"
        },
        "range": {
          "description": "Range of employees",
          "example": "10 - 50",
          "type": "string"
        },
        "rangeMin": {
          "description": "Range minimum",
          "example": 10,
          "type": "integer"
        },
        "rangeMax": {
          "description": "Range maximum",
          "example": 50,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "CodeLabelPair3": {
      "properties": {
        "code": {
          "description": "Code",
          "type": "string"
        },
        "label": {
          "description": "Description of the code",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Company4": {
      "properties": {
        "identity": {
          "$ref": "#/definitions/Identity4"
        }
      },
      "type": "object"
    },
    "Site5": {
      "properties": {
        "registrationId": {
          "description": "Fiscal registration Identifier",
          "example": "12345678900129",
          "type": "string"
        },
        "siteNumber": {
          "description": "Establishment number",
          "example": "00129",
          "type": "string"
        },
        "commercialName": {
          "description": "Commercial Name of the establishment",
          "example": "World Aware",
          "type": "string"
        },
        "tradings": {
          "description": "Trading Name of the establishment",
          "example": "GC Information",
          "type": "string"
        },
        "status": {
          "description": "Whether the establishment is active or not",
          "example": true,
          "type": "boolean"
        },
        "creationDate": {
          "description": "When the establishment opened",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "closingDate": {
          "description": "When the establishment closed (if status=false)",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "isHeadquarter": {
          "description": "Whether the establishment is headquarter or not",
          "example": true,
          "type": "boolean"
        },
        "address": {
          "$ref": "#/definitions/Address17"
        },
        "workforce": {
          "$ref": "#/definitions/Workforce4"
        }
      },
      "type": "object"
    },
    "Supervision": {
      "properties": {
        "company": {
          "$ref": "#/definitions/Company6"
        },
        "startDate": {
          "description": "Number of employee",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "alertType": {
          "description": "Type of supervision",
          "items": {
            "type": "string"
          },
          "type": "array",
          "enum": [
            "event",
            "score"
          ]
        },
        "customData": {
          "$ref": "#/definitions/SupervisionCustomData"
        },
        "scoreOrigin": {
          "description": "Company Score when supervision started",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AnnonceInfo": {
      "properties": {
        "adID": {
          "description": "Event identifier",
          "example": "XA1235456",
          "type": "string"
        },
        "origine": {
          "description": "Source of information",
          "example": "Bodacc",
          "type": "string"
        },
        "origineUrl": {
          "description": "Source URL",
          "type": "string"
        },
        "nomPublication": {
          "description": "Name of publication",
          "type": "string"
        },
        "dateParution": {
          "description": "Date when event has been released",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "numParution": {
          "description": "Parution number",
          "example": "BXA2017",
          "type": "string"
        },
        "numAnnonce": {
          "description": "Event number in parution",
          "example": "20001",
          "type": "string"
        },
        "tribunal": {
          "description": "Court (if available)",
          "example": "PARIS",
          "type": "string"
        },
        "juriste": {
          "description": "Lawer",
          "example": "Lawers Associate",
          "type": "string"
        },
        "descriptif": {
          "description": "Summary",
          "type": "string"
        },
        "texte": {
          "description": "Event full text",
          "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed...",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Personnes": {
      "properties": {
        "personne": {
          "description": "Array of personne",
          "items": {
            "$ref": "#/definitions/Personne"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Evenements": {
      "properties": {
        "evenement": {
          "description": "",
          "items": {
            "$ref": "#/definitions/Evenement"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ActeursCession": {
      "properties": {
        "acteurCession": {
          "description": "",
          "items": {
            "$ref": "#/definitions/ActeurCession"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ActeursContentieux": {
      "properties": {
        "acteurContentieux": {
          "$ref": "#/definitions/ActeurContentieux"
        }
      },
      "type": "object"
    },
    "EtablissementsCession": {
      "properties": {
        "etablissementCession": {
          "description": "",
          "items": {
            "$ref": "#/definitions/Etablissement"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Actes": {
      "properties": {
        "acte": {
          "description": "list",
          "items": {
            "$ref": "#/definitions/Acte"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ExecutiveFonction2": {
      "properties": {
        "code": {
          "description": "Position code",
          "example": "047",
          "type": "string"
        },
        "label": {
          "description": "Position description",
          "example": "Administrateur",
          "type": "string"
        },
        "priority": {
          "description": "Position priority order",
          "example": 4,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Address3": {
      "properties": {
        "country": {
          "description": "Country name",
          "example": "France",
          "type": "string"
        },
        "countryCode": {
          "description": "Country code (ISO 3166-2)",
          "example": "FR",
          "type": "string"
        },
        "street": {
          "description": "Street address",
          "example": "1 rue Michel Vaillant",
          "type": "string"
        },
        "streetDetail": {
          "$ref": "#/definitions/Street3"
        },
        "street2": {
          "description": "Street address 2",
          "example": "Enco de Botte",
          "type": "string"
        },
        "postalBoxNumber": {
          "description": "Postal Box number",
          "example": "BP 001",
          "type": "string"
        },
        "postalCode": {
          "description": "Postal Code",
          "example": "75000",
          "type": "string"
        },
        "locality": {
          "description": "City",
          "example": "Paris",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ExecutiveMouvement": {
      "properties": {
        "code": {
          "description": "Movement code",
          "example": 1,
          "type": "integer"
        },
        "label": {
          "description": "Human readable movement description",
          "example": "Nomination",
          "type": "string"
        },
        "dateMouvement": {
          "description": "When the movement happened",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "source": {
          "description": "Source of movement",
          "example": "JAL",
          "type": "string"
        },
        "eventDetail": {
          "$ref": "#/definitions/EventDetail2"
        }
      },
      "type": "object"
    },
    "Mandat4": {
      "properties": {
        "siren": {
          "description": "Company Identifier (Only available in France)",
          "example": "0123456789",
          "type": "string"
        },
        "raisonSociale": {
          "description": "Company name",
          "example": "Great Company",
          "type": "string"
        },
        "adresse": {
          "$ref": "#/definitions/Address18"
        },
        "mouvements": {
          "description": "",
          "items": {
            "$ref": "#/definitions/ExecutiveMouvement4"
          },
          "type": "array"
        },
        "score": {
          "description": "Score of the company",
          "type": "integer"
        },
        "risk_label": {
          "description": "Score risk of the company",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Mandat5": {
      "properties": {
        "siren": {
          "description": "Company Identifier (Only available in France)",
          "example": "0123456789",
          "type": "string"
        },
        "raisonSociale": {
          "description": "Company name",
          "example": "Great Company",
          "type": "string"
        },
        "adresse": {
          "$ref": "#/definitions/Address19"
        },
        "regroupings": {
          "description": "List of term of offices",
          "items": {
            "$ref": "#/definitions/Term3"
          },
          "type": "array"
        },
        "score": {
          "description": "Score of the company",
          "type": "integer"
        },
        "risk_label": {
          "description": "Score risk of the company",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "GroupMember5": {
      "properties": {
        "parentId": {
          "description": "Parent group ID",
          "example": 0,
          "type": "integer"
        },
        "entityId": {
          "description": "Member ID",
          "example": 0,
          "type": "integer"
        },
        "entityName": {
          "description": "Member name",
          "example": "BAZIN S\u00e9bastien",
          "type": "string"
        },
        "registrationNumber": {
          "description": "Member registration number",
          "example": "503207896",
          "type": "string"
        },
        "countryCodeIso3": {
          "description": "Country code in ISO 3166-1 alpha-3",
          "example": "FRA",
          "type": "string"
        },
        "countryCode": {
          "description": "Country code in ISO 3166-2",
          "example": "FR",
          "type": "string"
        },
        "country": {
          "description": "Country label",
          "example": "France",
          "type": "string"
        },
        "share": {
          "description": "Share percentage",
          "example": 15,
          "type": "number",
          "format": "float"
        },
        "score": {
          "description": "Member score",
          "example": 12,
          "type": "integer"
        },
        "group": {
          "$ref": "#/definitions/Group"
        },
        "type": {
          "description": "Member type",
          "example": "person",
          "type": "string"
        },
        "name": {
          "description": "Member name",
          "example": "BAZIN",
          "type": "string"
        },
        "firstname": {
          "description": "Member firstname",
          "example": "S\u00e9bastien",
          "type": "string"
        },
        "maidenName": {
          "description": "Member maidenname",
          "example": "BAZIN",
          "type": "string"
        },
        "title": {
          "description": "Member title",
          "example": "M / Mme",
          "type": "string"
        },
        "frenchPrivateGroupHead": {
          "$ref": "#/definitions/GroupInfo3"
        },
        "minDate": {
          "description": "Oldest information date",
          "example": "1970-01-01",
          "type": "string"
        },
        "maxDate": {
          "description": "Most recent information date",
          "example": "1970-01-01",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CodeLabelPair4": {
      "properties": {
        "code": {
          "description": "Code",
          "type": "string"
        },
        "label": {
          "description": "Description of the code",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Ratios3": {
      "type": "object"
    },
    "BalanceRawData3": {
      "type": "object"
    },
    "SoldeIntermediaireGestion3": {
      "type": "object"
    },
    "BalanceDocument": {
      "properties": {
        "documentType": {
          "description": "Type of document, raw : Simple PDF print, rg : Original PDF, cc : Original pdf + statutory auditor's report",
          "type": "string"
        },
        "availability": {
          "description": "Document is available",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ExecutiveFonction3": {
      "properties": {
        "code": {
          "description": "Position code",
          "example": "047",
          "type": "string"
        },
        "label": {
          "description": "Position description",
          "example": "Administrateur",
          "type": "string"
        },
        "priority": {
          "description": "Position priority order",
          "example": 4,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Address4": {
      "properties": {
        "country": {
          "description": "Country name",
          "example": "France",
          "type": "string"
        },
        "countryCode": {
          "description": "Country code (ISO 3166-2)",
          "example": "FR",
          "type": "string"
        },
        "street": {
          "description": "Street address",
          "example": "1 rue Michel Vaillant",
          "type": "string"
        },
        "streetDetail": {
          "$ref": "#/definitions/Street4"
        },
        "street2": {
          "description": "Street address 2",
          "example": "Enco de Botte",
          "type": "string"
        },
        "postalBoxNumber": {
          "description": "Postal Box number",
          "example": "BP 001",
          "type": "string"
        },
        "region": {
          "description": "Region name",
          "example": "\u00cele-de-France",
          "type": "string"
        },
        "postalCode": {
          "description": "Postal Code",
          "example": "75000",
          "type": "string"
        },
        "locality": {
          "description": "City",
          "example": "Paris",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ExecutiveMouvement2": {
      "properties": {
        "code": {
          "description": "Movement code",
          "example": 1,
          "type": "integer"
        },
        "label": {
          "description": "Human readable movement description",
          "example": "Nomination",
          "type": "string"
        },
        "dateMouvement": {
          "description": "When the movement happened",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "source": {
          "description": "Source of movement",
          "example": "JAL",
          "type": "string"
        },
        "eventDetail": {
          "$ref": "#/definitions/EventDetail3"
        }
      },
      "type": "object"
    },
    "Address5": {
      "properties": {
        "country": {
          "description": "Country name",
          "example": "France",
          "type": "string"
        },
        "countryCode": {
          "description": "Country code (ISO 3166-2)",
          "example": "FR",
          "type": "string"
        },
        "street": {
          "description": "Street address",
          "example": "1 rue Michel Vaillant",
          "type": "string"
        },
        "streetDetail": {
          "$ref": "#/definitions/Street5"
        },
        "street2": {
          "description": "Street address 2",
          "example": "Enco de Botte",
          "type": "string"
        },
        "postalBoxNumber": {
          "description": "Postal Box number",
          "example": "BP 001",
          "type": "string"
        },
        "postalCode": {
          "description": "Postal Code",
          "example": "75000",
          "type": "string"
        },
        "locality": {
          "description": "City",
          "example": "Paris",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Term": {
      "properties": {
        "id": {
          "description": "identifier of term",
          "example": "1",
          "type": "string"
        },
        "siren": {
          "description": "identifier of a company",
          "example": 503207896,
          "type": "integer"
        },
        "fonction": {
          "$ref": "#/definitions/ExecutiveFonction6"
        },
        "startCode": {
          "$ref": "#/definitions/ExecutiveMouvement5"
        },
        "startDate": {
          "description": "Date opening the term",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "endCode": {
          "$ref": "#/definitions/ExecutiveMouvement5"
        },
        "endDate": {
          "description": "Date closing the term",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "lastMovementCode": {
          "$ref": "#/definitions/ExecutiveMouvement5"
        },
        "lastMovementDate": {
          "description": "Last movement date during the term",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "principal": {
          "description": "principal",
          "example": "0/1",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Address6": {
      "properties": {
        "country": {
          "description": "Country name",
          "example": "France",
          "type": "string"
        },
        "countryCode": {
          "description": "Country code (ISO 3166-2)",
          "example": "FR",
          "type": "string"
        },
        "street": {
          "description": "Street address",
          "example": "1 rue Michel Vaillant",
          "type": "string"
        },
        "streetDetail": {
          "$ref": "#/definitions/Street6"
        },
        "street2": {
          "description": "Street address 2",
          "example": "Enco de Botte",
          "type": "string"
        },
        "postalBoxNumber": {
          "description": "Postal Box number",
          "example": "BP 001",
          "type": "string"
        },
        "postalCode": {
          "description": "Postal Code",
          "example": "75000",
          "type": "string"
        },
        "locality": {
          "description": "City",
          "example": "Paris",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Regrouping": {
      "properties": {
        "regroupingId": {
          "description": "regrouping identifier",
          "example": "4",
          "type": "integer"
        },
        "terms": {
          "description": "List of terms",
          "items": {
            "$ref": "#/definitions/Term4"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "MonitoringStateModel": {
      "properties": {
        "code": {
          "description": "State code",
          "example": "A mettre sous surveillance",
          "type": "string"
        },
        "label": {
          "description": "State label",
          "example": "En attente des greffes",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PrivilegeCategorySynthesisModel": {
      "properties": {
        "privilegeCategory": {
          "$ref": "#/definitions/PrivilegeCategoryModel2"
        },
        "amount": {
          "description": "Privilege amount for the category",
          "example": 1234.56,
          "type": "number"
        },
        "activePrivilegesCount": {
          "description": "Number of active privileges for the category",
          "example": 3,
          "type": "integer"
        },
        "lastPrivilegeDate": {
          "description": "Last privilege date for the category",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PrivilegeCategoryModel": {
      "properties": {
        "code": {
          "description": "Category code",
          "example": "03",
          "type": "string"
        },
        "label": {
          "description": "Category label",
          "example": "Tr\u00e9sor",
          "type": "string"
        },
        "validityInMonths": {
          "description": "Privilege validity in months for the category",
          "example": "48",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PrivilegeStatus": {
      "properties": {
        "code": {
          "description": "Status code",
          "example": "4",
          "type": "string"
        },
        "label": {
          "description": "Status label",
          "example": "Actif",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Address7": {
      "properties": {
        "country": {
          "description": "Country name",
          "example": "France",
          "type": "string"
        },
        "countryCode": {
          "description": "Country code (ISO 3166-2)",
          "example": "FR",
          "type": "string"
        },
        "street": {
          "description": "Street address",
          "example": "1 rue Michel Vaillant",
          "type": "string"
        },
        "streetDetail": {
          "$ref": "#/definitions/Street7"
        },
        "street2": {
          "description": "Street address 2",
          "example": "Enco de Botte",
          "type": "string"
        },
        "postalBoxNumber": {
          "description": "Postal Box number",
          "example": "BP 001",
          "type": "string"
        },
        "region": {
          "description": "Region name",
          "example": "\u00cele-de-France",
          "type": "string"
        },
        "postalCode": {
          "description": "Postal Code",
          "example": "75000",
          "type": "string"
        },
        "locality": {
          "description": "City",
          "example": "Paris",
          "type": "string"
        },
        "mailFormatted": {
          "$ref": "#/definitions/PostalAddressMailFormat3"
        }
      },
      "type": "object"
    },
    "Greffe": {
      "properties": {
        "code": {
          "description": "Greffe code",
          "example": "0605",
          "type": "string"
        },
        "city": {
          "description": "Greffe city",
          "example": "NICE",
          "type": "string"
        },
        "groupement": {
          "description": "Greffe group",
          "example": "INTERGREFFE",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Street": {
      "properties": {
        "number": {
          "description": "Street number",
          "example": "1",
          "type": "string"
        },
        "repetition": {
          "description": "Street number repetition",
          "example": "bis",
          "type": "string"
        },
        "streetType": {
          "description": "Street Type",
          "example": "rue",
          "type": "string"
        },
        "streetName": {
          "description": "Street name",
          "example": "de la baule",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PostalAddressMailFormat": {
      "properties": {
        "addressL1": {
          "description": "Line 1 Mail formatted AFNOR NF Z 10-011 (Name)",
          "example": "ACCOR",
          "type": "string"
        },
        "addressL2": {
          "description": "Line 2 Mail formatted AFNOR NF Z 10-011 (Name complement)",
          "example": "CIB CACIB",
          "type": "string"
        },
        "addressL3": {
          "description": "Line 3 Mail formatted AFNOR NF Z 10-011 (Address Complement) ",
          "example": "TOUR SEQUANA",
          "type": "string"
        },
        "addressL4": {
          "description": "Line 4 Mail formatted AFNOR NF Z 10-011 (Address Number & Street)",
          "example": "82 RUE HENRY FARMAN",
          "type": "string"
        },
        "addressL5": {
          "description": "Line 5 Mail formatted AFNOR NF Z 10-011 (Postal Box, district)",
          "example": "CS 70052",
          "type": "string"
        },
        "addressL6": {
          "description": "Line 6 Mail formatted AFNOR NF Z 10-011 (Zip code & city)",
          "example": "75008 PARIS",
          "type": "string"
        },
        "addressL7": {
          "description": "Line 7 Mail formatted AFNOR NF Z 10-011 (Country)",
          "example": "France",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Address8": {
      "properties": {
        "country": {
          "description": "Country name",
          "example": "France",
          "type": "string"
        },
        "countryCode": {
          "description": "Country code (ISO 3166-2)",
          "example": "FR",
          "type": "string"
        },
        "street": {
          "description": "Street address",
          "example": "1 rue Michel Vaillant",
          "type": "string"
        },
        "streetDetail": {
          "$ref": "#/definitions/Street8"
        },
        "street2": {
          "description": "Street address 2",
          "example": "Enco de Botte",
          "type": "string"
        },
        "postalCode": {
          "description": "Postal Code",
          "example": "75000",
          "type": "string"
        },
        "locality": {
          "description": "City",
          "example": "Paris",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ExecutiveFonction4": {
      "properties": {
        "code": {
          "description": "Position code",
          "example": "047",
          "type": "string"
        },
        "label": {
          "description": "Position description",
          "example": "Administrateur",
          "type": "string"
        },
        "priority": {
          "description": "Position priority order",
          "example": 4,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "CodeLabelPair5": {
      "properties": {
        "code": {
          "description": "Code",
          "type": "string"
        },
        "label": {
          "description": "Description of the code",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GroupMember6": {
      "properties": {
        "entityId": {
          "description": "Member ID",
          "example": 0,
          "type": "integer"
        },
        "entityName": {
          "description": "Member name",
          "example": "BAZIN S\u00e9bastien",
          "type": "string"
        },
        "registrationNumber": {
          "description": "Member registration number",
          "example": "503207896",
          "type": "string"
        },
        "countryCode": {
          "description": "Country code in ISO 3166-2",
          "example": "FR",
          "type": "string"
        },
        "country": {
          "description": "Country label",
          "example": "France",
          "type": "string"
        },
        "share": {
          "description": "Share percentage",
          "example": 15,
          "type": "number",
          "format": "float"
        },
        "type": {
          "description": "Member type",
          "example": "person",
          "type": "string"
        },
        "methodUsed": {
          "description": "Method used in UBO seek",
          "example": "legal representative",
          "type": "string"
        },
        "qualite": {
          "description": "qualit\u00e9 de l'ubo",
          "example": "Repr\u00e9sentant L\u00e9gal / Actionnaire",
          "type": "string"
        },
        "distance": {
          "description": "Distance between company and UBO",
          "example": 0,
          "type": "integer"
        },
        "address": {
          "$ref": "#/definitions/Address20"
        },
        "fonction": {
          "$ref": "#/definitions/ExecutiveFonction7"
        },
        "birthday": {
          "description": "UBO birthday if available",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "birthCity": {
          "description": "UBO birth city if available",
          "example": "PARIS",
          "type": "string"
        },
        "birthCountry": {
          "description": "UBO birth country if available",
          "example": "France",
          "type": "string"
        },
        "birthCountryCode": {
          "description": "UBO birth country code (ISO 3166-2) if available",
          "example": "FR",
          "type": "string"
        },
        "nationality": {
          "description": "Executive nationality",
          "example": "France",
          "type": "string"
        },
        "nationalityCode": {
          "description": "Executive country code (ISO 3166-2)",
          "example": "FR",
          "type": "string"
        },
        "name": {
          "description": "Member name",
          "example": "BAZIN",
          "type": "string"
        },
        "firstname": {
          "description": "Member firstname",
          "example": "S\u00e9bastien",
          "type": "string"
        },
        "maidenName": {
          "description": "Member maidenname",
          "example": "BAZIN",
          "type": "string"
        },
        "title": {
          "description": "Member title",
          "example": "M / Mme",
          "type": "string"
        },
        "minDate": {
          "description": "Oldest information date",
          "example": "1970-01-01",
          "type": "string"
        },
        "maxDate": {
          "description": "Most recent information date",
          "example": "1970-01-01",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UboInvestigationStep2": {
      "properties": {
        "step": {
          "description": "Investigation step name",
          "type": "string"
        },
        "reason": {
          "description": "Investigation step result",
          "type": "string"
        },
        "decision": {
          "$ref": "#/definitions/CodeLabelPair7"
        }
      },
      "type": "object"
    },
    "ConformityRisk2": {
      "properties": {
        "status": {
          "description": "Risk status",
          "example": "low",
          "type": "string",
          "enum": [
            "low",
            "medium",
            "high"
          ]
        },
        "reason": {
          "description": "Risk reason",
          "example": "Risque Faible",
          "type": "string"
        }
      },
      "type": "object"
    },
    "LegalDeposit2": {
      "properties": {
        "number": {
          "description": "Deposit number",
          "example": "456",
          "type": "integer"
        },
        "date": {
          "description": "where the deposit happened",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "acts": {
          "description": "list of act composing the deposit",
          "items": {
            "$ref": "#/definitions/LegalAct2"
          },
          "type": "array"
        },
        "availability": {
          "description": "Available or not",
          "example": true,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "LegalAct": {
      "properties": {
        "id": {
          "type": "string"
        },
        "date": {
          "description": "Date of the act in deposit",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "number": {
          "description": "Number of the Act",
          "example": 1,
          "type": "integer"
        },
        "type": {
          "$ref": "#/definitions/CodeLabelPair8"
        },
        "pages": {
          "description": "Date of the act in deposit",
          "type": "integer"
        },
        "decisions": {
          "description": "Decisions",
          "items": {
            "$ref": "#/definitions/LegalActDecision"
          },
          "type": "array"
        },
        "downloadable": {
          "description": "Wether the document is downloadable or not",
          "type": "boolean"
        },
        "available": {
          "description": "Wether the document is available or not",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GroupMember7": {
      "properties": {
        "entityId": {
          "description": "Member ID",
          "example": 0,
          "type": "integer"
        },
        "entityName": {
          "description": "Member name",
          "example": "BAZIN S\u00e9bastien",
          "type": "string"
        },
        "registrationNumber": {
          "description": "Member registration number",
          "example": "503207896",
          "type": "string"
        },
        "countryCodeIso3": {
          "description": "Country code in ISO 3166-1 alpha-3",
          "example": "FRA",
          "type": "string"
        },
        "countryCode": {
          "description": "Country code in ISO 3166-2",
          "example": "FR",
          "type": "string"
        },
        "country": {
          "description": "Country label",
          "example": "France",
          "type": "string"
        },
        "share": {
          "description": "Share percentage",
          "example": 15,
          "type": "number",
          "format": "float"
        },
        "score": {
          "description": "Member score",
          "example": 12,
          "type": "integer"
        },
        "type": {
          "description": "Member type",
          "example": "person",
          "type": "string"
        },
        "name": {
          "description": "Member name",
          "example": "BAZIN",
          "type": "string"
        },
        "firstname": {
          "description": "Member firstname",
          "example": "S\u00e9bastien",
          "type": "string"
        },
        "maidenName": {
          "description": "Member maidenname",
          "example": "BAZIN",
          "type": "string"
        },
        "title": {
          "description": "Member title",
          "example": "M / Mme",
          "type": "string"
        },
        "frenchPrivateGroupHead": {
          "$ref": "#/definitions/GroupInfo4"
        },
        "minDate": {
          "description": "Oldest information date",
          "example": "1970-01-01",
          "type": "string"
        },
        "maxDate": {
          "description": "Most recent information date",
          "example": "1970-01-01",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Address9": {
      "properties": {
        "country": {
          "description": "Country name",
          "example": "France",
          "type": "string"
        },
        "street": {
          "description": "Street address",
          "example": "1 rue Michel Vaillant",
          "type": "string"
        },
        "postalCode": {
          "description": "Postal Code",
          "example": "75000",
          "type": "string"
        },
        "locality": {
          "description": "City",
          "example": "Paris",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Address10": {
      "properties": {
        "country": {
          "description": "Country name",
          "example": "France",
          "type": "string"
        },
        "countryCode": {
          "description": "Country code (ISO 3166-2)",
          "example": "FR",
          "type": "string"
        },
        "street": {
          "description": "Street address",
          "example": "1 rue Michel Vaillant",
          "type": "string"
        },
        "streetDetail": {
          "$ref": "#/definitions/Street9"
        },
        "street2": {
          "description": "Street address 2",
          "example": "Enco de Botte",
          "type": "string"
        },
        "postalBoxNumber": {
          "description": "Postal Box number",
          "example": "BP 001",
          "type": "string"
        },
        "postalCode": {
          "description": "Postal Code",
          "example": "75000",
          "type": "string"
        },
        "locality": {
          "description": "City",
          "example": "Paris",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ExecutiveFonction5": {
      "properties": {
        "code": {
          "description": "Position code",
          "example": "047",
          "type": "string"
        },
        "label": {
          "description": "Position description",
          "example": "Administrateur",
          "type": "string"
        },
        "priority": {
          "description": "Position priority order",
          "example": 4,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ExecutiveMouvement3": {
      "properties": {
        "code": {
          "description": "Movement code",
          "example": 1,
          "type": "integer"
        },
        "label": {
          "description": "Human readable movement description",
          "example": "Nomination",
          "type": "string"
        },
        "dateMouvement": {
          "description": "When the movement happened",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "source": {
          "description": "Source of movement",
          "example": "JAL",
          "type": "string"
        },
        "eventDetail": {
          "$ref": "#/definitions/EventDetail4"
        }
      },
      "type": "object"
    },
    "Address11": {
      "properties": {
        "country": {
          "description": "Country name",
          "example": "France",
          "type": "string"
        },
        "countryCode": {
          "description": "Country code (ISO 3166-2)",
          "example": "FR",
          "type": "string"
        },
        "street": {
          "description": "Street address",
          "example": "1 rue Michel Vaillant",
          "type": "string"
        },
        "streetDetail": {
          "$ref": "#/definitions/Street10"
        },
        "street2": {
          "description": "Street address 2",
          "example": "Enco de Botte",
          "type": "string"
        },
        "postalBoxNumber": {
          "description": "Postal Box number",
          "example": "BP 001",
          "type": "string"
        },
        "postalCode": {
          "description": "Postal Code",
          "example": "75000",
          "type": "string"
        },
        "locality": {
          "description": "City",
          "example": "Paris",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Term2": {
      "properties": {
        "id": {
          "description": "identifier of term",
          "example": "1",
          "type": "string"
        },
        "siren": {
          "description": "identifier of a company",
          "example": 503207896,
          "type": "integer"
        },
        "fonction": {
          "$ref": "#/definitions/ExecutiveFonction8"
        },
        "startCode": {
          "$ref": "#/definitions/ExecutiveMouvement6"
        },
        "startDate": {
          "description": "Date opening the term",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "endCode": {
          "$ref": "#/definitions/ExecutiveMouvement6"
        },
        "endDate": {
          "description": "Date closing the term",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "lastMovementCode": {
          "$ref": "#/definitions/ExecutiveMouvement6"
        },
        "lastMovementDate": {
          "description": "Last movement date during the term",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "principal": {
          "description": "principal",
          "example": "0/1",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ConformityRiskItem": {
      "properties": {
        "status": {
          "description": "Risk status",
          "example": "low",
          "type": "string",
          "enum": [
            "low",
            "medium",
            "high"
          ]
        },
        "reason": {
          "description": "Risk reason",
          "example": "Risque Faible",
          "type": "string"
        },
        "source": {
          "description": "Risk Source",
          "example": "ILG / LN / MIXED",
          "type": "string"
        },
        "processingType": {
          "description": "Risk Source",
          "example": "ILG / LN",
          "type": "string"
        },
        "candidateProcessed": {
          "description": "Candidates unprocessed",
          "example": 1,
          "type": "integer"
        },
        "candidateUnprocessed": {
          "description": "Candidates unprocessed",
          "example": 1,
          "type": "integer"
        },
        "count": {
          "description": "Risk count",
          "example": 1,
          "type": "integer"
        },
        "indice": {
          "description": "Risk indice",
          "example": 1,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Address12": {
      "properties": {
        "country": {
          "description": "Country name",
          "example": "France",
          "type": "string"
        },
        "countryCode": {
          "description": "Country code (ISO 3166-2)",
          "example": "FR",
          "type": "string"
        },
        "street": {
          "description": "Street address",
          "example": "1 rue Michel Vaillant",
          "type": "string"
        },
        "streetDetail": {
          "$ref": "#/definitions/Street11"
        },
        "street2": {
          "description": "Street address 2",
          "example": "Enco de Botte",
          "type": "string"
        },
        "postalBoxNumber": {
          "description": "Postal Box number",
          "example": "BP 001",
          "type": "string"
        },
        "region": {
          "description": "Region name",
          "example": "\u00cele-de-France",
          "type": "string"
        },
        "deptName": {
          "description": "Department name",
          "example": "Paris",
          "type": "string"
        },
        "postalCode": {
          "description": "Postal Code",
          "example": "75000",
          "type": "string"
        },
        "locality": {
          "description": "City",
          "example": "Paris",
          "type": "string"
        },
        "mailFormatted": {
          "$ref": "#/definitions/PostalAddressMailFormat4"
        }
      },
      "type": "object"
    },
    "KycConformityStatusCountModel": {
      "properties": {
        "low": {
          "description": "Low status count",
          "example": 2,
          "type": "integer"
        },
        "medium": {
          "description": "Medium status count",
          "example": 1,
          "type": "integer"
        },
        "high": {
          "description": "High status count",
          "example": 0,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ConformityRiskItem2": {
      "properties": {
        "status": {
          "description": "Risk status",
          "example": "low",
          "type": "string",
          "enum": [
            "low",
            "medium",
            "high"
          ]
        },
        "reason": {
          "description": "Risk reason",
          "example": "Risque Faible",
          "type": "string"
        },
        "source": {
          "description": "Risk Source",
          "example": "ILG / LN / MIXED",
          "type": "string"
        },
        "processingType": {
          "description": "Risk Source",
          "example": "ILG / LN",
          "type": "string"
        },
        "candidateProcessed": {
          "description": "Candidates unprocessed",
          "example": 1,
          "type": "integer"
        },
        "candidateUnprocessed": {
          "description": "Candidates unprocessed",
          "example": 1,
          "type": "integer"
        },
        "count": {
          "description": "Risk count",
          "example": 1,
          "type": "integer"
        },
        "indice": {
          "description": "Risk indice",
          "example": 1,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Address13": {
      "properties": {
        "country": {
          "description": "Country name",
          "example": "France",
          "type": "string"
        },
        "countryCode": {
          "description": "Country code (ISO 3166-2)",
          "example": "FR",
          "type": "string"
        },
        "street": {
          "description": "Street address",
          "example": "1 rue Michel Vaillant",
          "type": "string"
        },
        "streetDetail": {
          "$ref": "#/definitions/Street12"
        },
        "street2": {
          "description": "Street address 2",
          "example": "Enco de Botte",
          "type": "string"
        },
        "postalBoxNumber": {
          "description": "Postal Box number",
          "example": "BP 001",
          "type": "string"
        },
        "region": {
          "description": "Region name",
          "example": "\u00cele-de-France",
          "type": "string"
        },
        "deptName": {
          "description": "Department name",
          "example": "Paris",
          "type": "string"
        },
        "postalCode": {
          "description": "Postal Code",
          "example": "75000",
          "type": "string"
        },
        "locality": {
          "description": "City",
          "example": "Paris",
          "type": "string"
        },
        "mailFormatted": {
          "$ref": "#/definitions/PostalAddressMailFormat5"
        }
      },
      "type": "object"
    },
    "Balances2": {
      "type": "object"
    },
    "DebtStatus2": {
      "type": "object"
    },
    "LinksCounts": {
      "properties": {
        "shareholders": {
          "type": "integer"
        },
        "directSubsidiaries": {
          "type": "integer"
        },
        "indirectSubsidiaries": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Shareholders3": {
      "type": "object"
    },
    "Subsidiaries3": {
      "type": "object"
    },
    "Group2": {
      "type": "object"
    },
    "KycUbo3": {
      "type": "object"
    },
    "Conformity3": {
      "type": "object"
    },
    "Customer2": {
      "properties": {
        "id": {
          "description": "Customer's Id",
          "example": 2,
          "type": "integer"
        },
        "label": {
          "description": "Name of the Customer",
          "example": "INFOLEGALE",
          "type": "string"
        },
        "customerCode": {
          "description": "Customer code",
          "example": 1,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "MarketInformationModel2": {
      "properties": {
        "code": {
          "description": "Market information code",
          "example": "PME",
          "type": "string"
        },
        "label": {
          "description": "Market information label",
          "example": "Petite ou Moyenne Entreprise",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Address14": {
      "properties": {
        "country": {
          "description": "Country name",
          "example": "France",
          "type": "string"
        },
        "countryCode": {
          "description": "Country code (ISO 3166-2)",
          "example": "FR",
          "type": "string"
        },
        "street": {
          "description": "Street address",
          "example": "1 rue Michel Vaillant",
          "type": "string"
        },
        "streetDetail": {
          "$ref": "#/definitions/Street13"
        },
        "street2": {
          "description": "Street address 2",
          "example": "Enco de Botte",
          "type": "string"
        },
        "postalBoxNumber": {
          "description": "Postal Box number",
          "example": "BP 001",
          "type": "string"
        },
        "postalCode": {
          "description": "Postal Code",
          "example": "75000",
          "type": "string"
        },
        "locality": {
          "description": "City",
          "example": "Paris",
          "type": "string"
        },
        "mailFormatted": {
          "$ref": "#/definitions/PostalAddressMailFormat6"
        }
      },
      "type": "object"
    },
    "Executive6": {
      "properties": {
        "civilite": {
          "description": "Executive title",
          "example": "M",
          "type": "string"
        },
        "name": {
          "description": "Executive Lastname",
          "example": "Doe",
          "type": "string"
        },
        "firstname": {
          "description": "Executive Firstname",
          "example": "Jane",
          "type": "string"
        },
        "type": {
          "description": "Executive type can be 'person', 'company' or 'family' (equivalent to person)",
          "example": "person",
          "type": "string"
        },
        "maidenName": {
          "description": "Executive maiden name if available",
          "example": "Smith",
          "type": "string"
        },
        "siren": {
          "description": "Company Identifier if Executive is also a company, only available in France",
          "example": "0123456789",
          "type": "string"
        },
        "fonction": {
          "$ref": "#/definitions/ExecutiveFonction9"
        }
      },
      "type": "object"
    },
    "Identity3": {
      "properties": {
        "id": {
          "description": "Company Identifier",
          "example": "0123456789",
          "type": "string"
        },
        "registrationId": {
          "description": "Fiscal Registration Number",
          "example": "0123456789",
          "type": "string"
        },
        "vatnumber": {
          "description": "Tax registration number",
          "example": "FR670123456789",
          "type": "string"
        },
        "name": {
          "description": "Company name",
          "example": "Great Company",
          "type": "string"
        },
        "tradings": {
          "description": "Company trading name",
          "example": "GC Information",
          "type": "string"
        },
        "acronym": {
          "description": "Company acronym",
          "example": "G.C.I",
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/Address15"
        },
        "headquarter": {
          "$ref": "#/definitions/Site3"
        },
        "workforce": {
          "$ref": "#/definitions/Workforce3"
        },
        "contact": {
          "$ref": "#/definitions/Contact3"
        },
        "legalForm": {
          "$ref": "#/definitions/LegalFormModel2"
        },
        "activity": {
          "$ref": "#/definitions/ActivityModel2"
        },
        "declaredActivity": {
          "description": "Declared activity",
          "example": "Commerce de mat\u00e9riel audio",
          "type": "string"
        },
        "secondaryActivities": {
          "description": "List of secondary activities",
          "items": {
            "$ref": "#/definitions/SecondaryActivityModel2"
          },
          "type": "array"
        },
        "creationDate": {
          "description": "When the company was created",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "status": {
          "description": "Whether the company is active or not",
          "example": 1,
          "type": "integer"
        },
        "rna": {
          "description": "RNA (R\u00e9pertoire National des Associations) number if company registred as association or null",
          "example": "W452006858",
          "type": "string"
        },
        "capital": {
          "description": "Company Capitalization",
          "type": "string"
        },
        "tags": {
          "description": "Market information",
          "items": {
            "$ref": "#/definitions/MarketInformationModel3"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Risk2": {
      "properties": {
        "class": {
          "description": "Risk class as a score range",
          "example": "3-5",
          "type": "string"
        },
        "label": {
          "description": "Risk class label",
          "example": "Risque \u00e9lev\u00e9",
          "type": "string"
        },
        "status": {
          "description": "Company Status, values can be 'active', 'insolvancy' or 'closed'",
          "example": "active",
          "type": "string"
        },
        "insolvency": {
          "$ref": "#/definitions/Insolvency2"
        }
      },
      "type": "object"
    },
    "Financial2": {
      "properties": {
        "turnover": {
          "description": "Financial turnover",
          "example": "1000",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GroupInfo2": {
      "properties": {
        "entityId": {
          "type": "string"
        },
        "registrationId": {
          "type": "string"
        },
        "companyName": {
          "type": "string"
        },
        "groupWorkforce": {
          "type": "integer"
        },
        "groupTurnover": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Address15": {
      "properties": {
        "country": {
          "description": "Country name",
          "example": "France",
          "type": "string"
        },
        "countryCode": {
          "description": "Country code (ISO 3166-2)",
          "example": "FR",
          "type": "string"
        },
        "street": {
          "description": "Street address",
          "example": "1 rue Michel Vaillant",
          "type": "string"
        },
        "streetDetail": {
          "$ref": "#/definitions/Street14"
        },
        "street2": {
          "description": "Street address 2",
          "example": "Enco de Botte",
          "type": "string"
        },
        "postalBoxNumber": {
          "description": "Postal Box number",
          "example": "BP 001",
          "type": "string"
        },
        "region": {
          "description": "Region name",
          "example": "\u00cele-de-France",
          "type": "string"
        },
        "deptName": {
          "description": "Department name",
          "example": "Paris",
          "type": "string"
        },
        "postalCode": {
          "description": "Postal Code",
          "example": "75000",
          "type": "string"
        },
        "locality": {
          "description": "City",
          "example": "Paris",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Workforce3": {
      "properties": {
        "value": {
          "description": "Number of employee, can be 'NN' indicating that no data has been collected",
          "example": "10",
          "type": "string"
        },
        "range": {
          "description": "Range of employees",
          "example": "10 - 50",
          "type": "string"
        },
        "rangeMin": {
          "description": "Range minimum",
          "example": 10,
          "type": "integer"
        },
        "rangeMax": {
          "description": "Range maximum",
          "example": 50,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "CodeLabelPair6": {
      "type": "object"
    },
    "Address16": {
      "properties": {
        "country": {
          "description": "Country name",
          "example": "France",
          "type": "string"
        },
        "countryCode": {
          "description": "Country code (ISO 3166-2)",
          "example": "FR",
          "type": "string"
        },
        "street": {
          "description": "Street address",
          "example": "1 rue Michel Vaillant",
          "type": "string"
        },
        "streetDetail": {
          "$ref": "#/definitions/Street15"
        },
        "street2": {
          "description": "Street address 2",
          "example": "Enco de Botte",
          "type": "string"
        },
        "postalBoxNumber": {
          "description": "Postal Box number",
          "example": "BP 001",
          "type": "string"
        },
        "region": {
          "description": "Region name",
          "example": "\u00cele-de-France",
          "type": "string"
        },
        "postalCode": {
          "description": "Postal Code",
          "example": "75000",
          "type": "string"
        },
        "locality": {
          "description": "City",
          "example": "Paris",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Company5": {
      "properties": {
        "identity": {
          "$ref": "#/definitions/Identity5"
        }
      },
      "type": "object"
    },
    "Street2": {
      "properties": {
        "number": {
          "description": "Street number",
          "example": "1",
          "type": "string"
        },
        "repetition": {
          "description": "Street number repetition",
          "example": "bis",
          "type": "string"
        },
        "streetType": {
          "description": "Street Type",
          "example": "rue",
          "type": "string"
        },
        "streetName": {
          "description": "Street name",
          "example": "de la baule",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PostalAddressMailFormat2": {
      "properties": {
        "addressL1": {
          "description": "Line 1 Mail formatted AFNOR NF Z 10-011 (Name)",
          "example": "ACCOR",
          "type": "string"
        },
        "addressL2": {
          "description": "Line 2 Mail formatted AFNOR NF Z 10-011 (Name complement)",
          "example": "CIB CACIB",
          "type": "string"
        },
        "addressL3": {
          "description": "Line 3 Mail formatted AFNOR NF Z 10-011 (Address Complement) ",
          "example": "TOUR SEQUANA",
          "type": "string"
        },
        "addressL4": {
          "description": "Line 4 Mail formatted AFNOR NF Z 10-011 (Address Number & Street)",
          "example": "82 RUE HENRY FARMAN",
          "type": "string"
        },
        "addressL5": {
          "description": "Line 5 Mail formatted AFNOR NF Z 10-011 (Postal Box, district)",
          "example": "CS 70052",
          "type": "string"
        },
        "addressL6": {
          "description": "Line 6 Mail formatted AFNOR NF Z 10-011 (Zip code & city)",
          "example": "75008 PARIS",
          "type": "string"
        },
        "addressL7": {
          "description": "Line 7 Mail formatted AFNOR NF Z 10-011 (Country)",
          "example": "France",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Identity4": {
      "properties": {
        "id": {
          "description": "Company Identifier",
          "example": "0123456789",
          "type": "string"
        },
        "registrationId": {
          "description": "Fiscal Registration Number",
          "example": "0123456789",
          "type": "string"
        },
        "name": {
          "description": "Company name",
          "example": "Great Company",
          "type": "string"
        },
        "legalForm": {
          "$ref": "#/definitions/LegalFormModel3"
        },
        "activity": {
          "$ref": "#/definitions/ActivityModel3"
        }
      },
      "type": "object"
    },
    "Address17": {
      "properties": {
        "street": {
          "description": "Street address",
          "example": "1 rue Michel Vaillant",
          "type": "string"
        },
        "streetDetail": {
          "$ref": "#/definitions/Street16"
        },
        "street2": {
          "description": "Street address 2",
          "example": "Enco de Botte",
          "type": "string"
        },
        "postalCode": {
          "description": "Postal Code",
          "example": "75000",
          "type": "string"
        },
        "locality": {
          "description": "City",
          "example": "Paris",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Workforce4": {
      "properties": {
        "value": {
          "description": "Number of employee, can be 'NN' indicating that no data has been collected",
          "example": "10",
          "type": "string"
        },
        "range": {
          "description": "Range of employees",
          "example": "10 - 50",
          "type": "string"
        },
        "rangeMin": {
          "description": "Range minimum",
          "example": 10,
          "type": "integer"
        },
        "rangeMax": {
          "description": "Range maximum",
          "example": 50,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Company6": {
      "properties": {
        "identity": {
          "$ref": "#/definitions/Identity6"
        }
      },
      "type": "object"
    },
    "SupervisionCustomData": {
      "properties": {
        "customCode": {
          "description": "Custom reference for a supervision",
          "example": "AD-2456-87",
          "type": "string"
        },
        "customCredit": {
          "description": "Custom credit allowed",
          "example": 5000,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Personne": {
      "properties": {
        "identite": {
          "$ref": "#/definitions/Identite"
        },
        "dirigeants": {
          "$ref": "#/definitions/Dirigeants"
        },
        "administration": {
          "description": "Administration",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Evenement": {
      "properties": {
        "codeEvenement": {
          "description": "Event code",
          "example": 1100,
          "type": "integer"
        },
        "labelEvenement": {
          "description": "Event label",
          "example": "Cr\u00e9ation d'entreprise",
          "type": "string"
        },
        "codeEvenementInsee": {
          "description": "Insee event code",
          "example": 0,
          "type": "integer"
        },
        "labelEvenementInsee": {
          "description": "Insee Event Label",
          "example": "A compl\u00e9ter",
          "type": "string"
        },
        "dateDecision": {
          "description": "Event decision date",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "dateEffet": {
          "description": "Event effect date",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "dateImmatriculation": {
          "description": "Company creation date",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "dateCommencementActivite": {
          "description": "When company start its business",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "opposition": {
          "description": "a compl\u00e9ter",
          "example": "A compl\u00e9ter",
          "type": "string"
        },
        "procedureCollective": {
          "$ref": "#/definitions/ProcedureCollective"
        },
        "ancienneIdentite": {
          "$ref": "#/definitions/Identite"
        },
        "rectificatif": {
          "$ref": "#/definitions/Rectificatif"
        }
      },
      "type": "object"
    },
    "ActeurCession": {
      "properties": {
        "typeActeur": {
          "$ref": "#/definitions/Role"
        },
        "identiteActeur": {
          "$ref": "#/definitions/IdentiteActeur"
        },
        "cessionInfo": {
          "$ref": "#/definitions/CessionInfo"
        }
      },
      "type": "object"
    },
    "ActeurContentieux": {
      "properties": {
        "identiteActeur": {
          "$ref": "#/definitions/IdentiteActeur"
        },
        "typeActeur": {
          "$ref": "#/definitions/Role"
        },
        "representantActeur": {
          "$ref": "#/definitions/RepresentantActeur"
        }
      },
      "type": "object"
    },
    "Etablissement": {
      "properties": {
        "typeEtablissement": {
          "description": "Type of Site",
          "example": "Principal",
          "type": "string",
          "enum": [
            "Non sp\u00e9cifi\u00e9",
            "Si\u00e8ge social",
            "Principal",
            "Secondaire",
            "Domicile"
          ]
        },
        "siret": {
          "description": "Site unique identifier (only available in france)",
          "example": "12345678900010",
          "type": "string"
        },
        "nic": {
          "description": "Site number",
          "example": "00010",
          "type": "string"
        },
        "enseigne": {
          "description": "Commercial name",
          "example": "GC Technology",
          "type": "string"
        },
        "naf": {
          "description": "Activity Code",
          "example": "1200Z",
          "type": "string"
        },
        "activite": {
          "description": "Activity text",
          "example": "Commerce de d'autoradio",
          "type": "string"
        },
        "origineFonds": {
          "description": "\u00e0 Compl\u00e9ter",
          "type": "string"
        },
        "adresse": {
          "description": "Site address",
          "example": "123 Rue Fleur 12456 Fleurville",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Acte": {
      "properties": {
        "type": {
          "description": "type of Act",
          "example": "vente",
          "type": "string"
        },
        "descriptif": {
          "description": "Summary of Act",
          "example": "Vente d'un fond de commerce",
          "type": "string"
        },
        "description": {
          "description": "Text of act",
          "example": "Vente d'un fond en seeing priv\u00e9....",
          "type": "string"
        },
        "dateCommencementActivite": {
          "description": "When the act starts",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "opposition": {
          "description": "Terms and conditions to invalidate the act",
          "example": "Delai d'opposition de 10 jours apr\u00e8s publication",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Street3": {
      "type": "object"
    },
    "EventDetail2": {
      "properties": {
        "annonceInfo": {
          "$ref": "#/definitions/AnnonceInfo2"
        }
      },
      "type": "object"
    },
    "Address18": {
      "properties": {
        "country": {
          "description": "Country name",
          "example": "France",
          "type": "string"
        },
        "countryCode": {
          "description": "Country code (ISO 3166-2)",
          "example": "FR",
          "type": "string"
        },
        "street": {
          "description": "Street address",
          "example": "1 rue Michel Vaillant",
          "type": "string"
        },
        "streetDetail": {
          "$ref": "#/definitions/Street17"
        },
        "street2": {
          "description": "Street address 2",
          "example": "Enco de Botte",
          "type": "string"
        },
        "postalBoxNumber": {
          "description": "Postal Box number",
          "example": "BP 001",
          "type": "string"
        },
        "postalCode": {
          "description": "Postal Code",
          "example": "75000",
          "type": "string"
        },
        "locality": {
          "description": "City",
          "example": "Paris",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ExecutiveMouvement4": {
      "properties": {
        "code": {
          "description": "Movement code",
          "example": 1,
          "type": "integer"
        },
        "label": {
          "description": "Human readable movement description",
          "example": "Nomination",
          "type": "string"
        },
        "dateMouvement": {
          "description": "When the movement happened",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "source": {
          "description": "Source of movement",
          "example": "JAL",
          "type": "string"
        },
        "eventDetail": {
          "$ref": "#/definitions/EventDetail5"
        },
        "fonction": {
          "$ref": "#/definitions/ExecutiveFonction10"
        }
      },
      "type": "object"
    },
    "Address19": {
      "properties": {
        "country": {
          "description": "Country name",
          "example": "France",
          "type": "string"
        },
        "countryCode": {
          "description": "Country code (ISO 3166-2)",
          "example": "FR",
          "type": "string"
        },
        "street": {
          "description": "Street address",
          "example": "1 rue Michel Vaillant",
          "type": "string"
        },
        "streetDetail": {
          "$ref": "#/definitions/Street18"
        },
        "street2": {
          "description": "Street address 2",
          "example": "Enco de Botte",
          "type": "string"
        },
        "postalBoxNumber": {
          "description": "Postal Box number",
          "example": "BP 001",
          "type": "string"
        },
        "postalCode": {
          "description": "Postal Code",
          "example": "75000",
          "type": "string"
        },
        "locality": {
          "description": "City",
          "example": "Paris",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Term3": {
      "properties": {
        "id": {
          "description": "identifier of term",
          "example": "1",
          "type": "string"
        },
        "siren": {
          "description": "identifier of a company",
          "example": 503207896,
          "type": "integer"
        },
        "fonction": {
          "$ref": "#/definitions/ExecutiveFonction11"
        },
        "startCode": {
          "$ref": "#/definitions/ExecutiveMouvement7"
        },
        "startDate": {
          "description": "Date opening the term",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "endCode": {
          "$ref": "#/definitions/ExecutiveMouvement7"
        },
        "endDate": {
          "description": "Date closing the term",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "lastMovementCode": {
          "$ref": "#/definitions/ExecutiveMouvement7"
        },
        "lastMovementDate": {
          "description": "Last movement date during the term",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "principal": {
          "description": "principal",
          "example": "0/1",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "GroupInfo3": {
      "type": "object"
    },
    "Street4": {
      "type": "object"
    },
    "EventDetail3": {
      "properties": {
        "annonceInfo": {
          "$ref": "#/definitions/AnnonceInfo3"
        }
      },
      "type": "object"
    },
    "Street5": {
      "type": "object"
    },
    "ExecutiveFonction6": {
      "properties": {
        "code": {
          "description": "Position code",
          "example": "047",
          "type": "string"
        },
        "label": {
          "description": "Position description",
          "example": "Administrateur",
          "type": "string"
        },
        "role": {
          "description": "role of office",
          "example": "M",
          "type": "string"
        },
        "block": {
          "$ref": "#/definitions/Block3"
        },
        "showOrder": {
          "description": "order identifier",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ExecutiveMouvement5": {
      "properties": {
        "code": {
          "description": "Movement code",
          "example": 1,
          "type": "integer"
        },
        "label": {
          "description": "Human readable movement description",
          "example": "Nomination",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Street6": {
      "type": "object"
    },
    "Term4": {
      "properties": {
        "id": {
          "description": "identifier of term",
          "example": "1",
          "type": "string"
        },
        "siren": {
          "description": "identifier of a company",
          "example": 503207896,
          "type": "integer"
        },
        "fonction": {
          "$ref": "#/definitions/ExecutiveFonction12"
        },
        "startCode": {
          "$ref": "#/definitions/ExecutiveMouvement8"
        },
        "startDate": {
          "description": "Date opening the term",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "endCode": {
          "$ref": "#/definitions/ExecutiveMouvement8"
        },
        "endDate": {
          "description": "Date closing the term",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "lastMovementCode": {
          "$ref": "#/definitions/ExecutiveMouvement8"
        },
        "lastMovementDate": {
          "description": "Last movement date during the term",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "principal": {
          "description": "principal",
          "example": "0/1",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PrivilegeCategoryModel2": {
      "properties": {
        "code": {
          "description": "Category code",
          "example": "03",
          "type": "string"
        },
        "label": {
          "description": "Category label",
          "example": "Tr\u00e9sor",
          "type": "string"
        },
        "validityInMonths": {
          "description": "Privilege validity in months for the category",
          "example": "48",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Street7": {
      "properties": {
        "number": {
          "description": "Street number",
          "example": "1",
          "type": "string"
        },
        "repetition": {
          "description": "Street number repetition",
          "example": "bis",
          "type": "string"
        },
        "streetType": {
          "description": "Street Type",
          "example": "rue",
          "type": "string"
        },
        "streetName": {
          "description": "Street name",
          "example": "de la baule",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PostalAddressMailFormat3": {
      "properties": {
        "addressL1": {
          "description": "Line 1 Mail formatted AFNOR NF Z 10-011 (Name)",
          "example": "ACCOR",
          "type": "string"
        },
        "addressL2": {
          "description": "Line 2 Mail formatted AFNOR NF Z 10-011 (Name complement)",
          "example": "CIB CACIB",
          "type": "string"
        },
        "addressL3": {
          "description": "Line 3 Mail formatted AFNOR NF Z 10-011 (Address Complement) ",
          "example": "TOUR SEQUANA",
          "type": "string"
        },
        "addressL4": {
          "description": "Line 4 Mail formatted AFNOR NF Z 10-011 (Address Number & Street)",
          "example": "82 RUE HENRY FARMAN",
          "type": "string"
        },
        "addressL5": {
          "description": "Line 5 Mail formatted AFNOR NF Z 10-011 (Postal Box, district)",
          "example": "CS 70052",
          "type": "string"
        },
        "addressL6": {
          "description": "Line 6 Mail formatted AFNOR NF Z 10-011 (Zip code & city)",
          "example": "75008 PARIS",
          "type": "string"
        },
        "addressL7": {
          "description": "Line 7 Mail formatted AFNOR NF Z 10-011 (Country)",
          "example": "France",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Street8": {
      "type": "object"
    },
    "Address20": {
      "properties": {
        "country": {
          "description": "Country name",
          "example": "France",
          "type": "string"
        },
        "countryCode": {
          "description": "Country code (ISO 3166-2)",
          "example": "FR",
          "type": "string"
        },
        "street": {
          "description": "Street address",
          "example": "1 rue Michel Vaillant",
          "type": "string"
        },
        "streetDetail": {
          "$ref": "#/definitions/Street19"
        },
        "street2": {
          "description": "Street address 2",
          "example": "Enco de Botte",
          "type": "string"
        },
        "postalBoxNumber": {
          "description": "Postal Box number",
          "example": "BP 001",
          "type": "string"
        },
        "region": {
          "description": "Region name",
          "example": "\u00cele-de-France",
          "type": "string"
        },
        "deptName": {
          "description": "Department name",
          "example": "Paris",
          "type": "string"
        },
        "postalCode": {
          "description": "Postal Code",
          "example": "75000",
          "type": "string"
        },
        "locality": {
          "description": "City",
          "example": "Paris",
          "type": "string"
        },
        "mailFormatted": {
          "$ref": "#/definitions/PostalAddressMailFormat7"
        }
      },
      "type": "object"
    },
    "ExecutiveFonction7": {
      "properties": {
        "code": {
          "description": "Position code",
          "example": "047",
          "type": "string"
        },
        "label": {
          "description": "Position description",
          "example": "Administrateur",
          "type": "string"
        },
        "priority": {
          "description": "Position priority order",
          "example": 4,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "CodeLabelPair7": {
      "properties": {
        "code": {
          "description": "Code",
          "type": "string"
        },
        "label": {
          "description": "Description of the code",
          "type": "string"
        }
      },
      "type": "object"
    },
    "LegalAct2": {
      "properties": {
        "id": {
          "type": "string"
        },
        "date": {
          "description": "Date of the act in deposit",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "number": {
          "description": "Number of the Act",
          "example": 1,
          "type": "integer"
        },
        "type": {
          "$ref": "#/definitions/CodeLabelPair9"
        },
        "pages": {
          "description": "Date of the act in deposit",
          "type": "integer"
        },
        "decisions": {
          "description": "Decisions",
          "items": {
            "$ref": "#/definitions/LegalActDecision2"
          },
          "type": "array"
        },
        "downloadable": {
          "description": "Wether the document is downloadable or not",
          "type": "boolean"
        },
        "available": {
          "description": "Wether the document is available or not",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "CodeLabelPair8": {
      "properties": {
        "code": {
          "description": "Code",
          "type": "string"
        },
        "label": {
          "description": "Description of the code",
          "type": "string"
        }
      },
      "type": "object"
    },
    "LegalActDecision": {
      "properties": {
        "type": {
          "description": "Type of decision",
          "type": "string"
        },
        "label": {
          "description": "Complementary information about the decision",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GroupInfo4": {
      "type": "object"
    },
    "Street9": {
      "properties": {
        "number": {
          "description": "Street number",
          "example": "1",
          "type": "string"
        },
        "repetition": {
          "description": "Street number repetition",
          "example": "bis",
          "type": "string"
        },
        "streetType": {
          "description": "Street Type",
          "example": "rue",
          "type": "string"
        },
        "streetName": {
          "description": "Street name",
          "example": "de la baule",
          "type": "string"
        }
      },
      "type": "object"
    },
    "EventDetail4": {
      "type": "object"
    },
    "Street10": {
      "properties": {
        "number": {
          "description": "Street number",
          "example": "1",
          "type": "string"
        },
        "repetition": {
          "description": "Street number repetition",
          "example": "bis",
          "type": "string"
        },
        "streetType": {
          "description": "Street Type",
          "example": "rue",
          "type": "string"
        },
        "streetName": {
          "description": "Street name",
          "example": "de la baule",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ExecutiveFonction8": {
      "properties": {
        "code": {
          "description": "Position code",
          "example": "047",
          "type": "string"
        },
        "label": {
          "description": "Position description",
          "example": "Administrateur",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ExecutiveMouvement6": {
      "properties": {
        "code": {
          "description": "Movement code",
          "example": 1,
          "type": "integer"
        },
        "label": {
          "description": "Human readable movement description",
          "example": "Nomination",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Street11": {
      "type": "object"
    },
    "PostalAddressMailFormat4": {
      "type": "object"
    },
    "Street12": {
      "type": "object"
    },
    "PostalAddressMailFormat5": {
      "type": "object"
    },
    "Street13": {
      "type": "object"
    },
    "PostalAddressMailFormat6": {
      "type": "object"
    },
    "ExecutiveFonction9": {
      "properties": {
        "code": {
          "description": "Position code",
          "example": "047",
          "type": "string"
        },
        "label": {
          "description": "Position description",
          "example": "Administrateur",
          "type": "string"
        },
        "priority": {
          "description": "Position priority order",
          "example": 4,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Contact3": {
      "properties": {
        "phone": {
          "description": "Phone number",
          "example": "+33123456789",
          "type": "string"
        },
        "fax": {
          "description": "Fax number",
          "example": "+33123456789",
          "type": "string"
        },
        "email": {
          "description": "Email",
          "example": "email@example.org",
          "type": "string",
          "format": "mail"
        },
        "webSite": {
          "description": "Homepage",
          "example": "http://greatcompany.com",
          "type": "string",
          "format": "url"
        }
      },
      "type": "object"
    },
    "LegalFormModel2": {
      "type": "object"
    },
    "ActivityModel2": {
      "type": "object"
    },
    "SecondaryActivityModel2": {
      "type": "object"
    },
    "MarketInformationModel3": {
      "type": "object"
    },
    "Insolvency2": {
      "properties": {
        "code": {
          "description": "Collective procedure code",
          "example": "5210",
          "type": "integer"
        },
        "label": {
          "description": "Label of the insolvency procedure",
          "example": "Liquidation en cours",
          "type": "string"
        },
        "effectiveStart": {
          "description": "Effective start date of the insolvency procedure",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "effectiveEnd": {
          "description": "Effective end date of the insolvency procedure",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        }
      },
      "type": "object"
    },
    "Street14": {
      "type": "object"
    },
    "Street15": {
      "type": "object"
    },
    "Identity5": {
      "properties": {
        "registrationId": {
          "description": "Fiscal Registration Number",
          "example": "0123456789",
          "type": "string"
        }
      },
      "type": "object"
    },
    "LegalFormModel3": {
      "properties": {
        "code": {
          "description": "Legal form code",
          "example": "1900",
          "type": "string"
        },
        "codeINSEE": {
          "description": "Legal form INSEE code",
          "example": "1000",
          "type": "string"
        },
        "label": {
          "description": "Legal form label",
          "example": "Personne physique",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ActivityModel3": {
      "properties": {
        "code": {
          "description": "Activity code",
          "example": "3030Z",
          "type": "string"
        },
        "label": {
          "description": "Activity label",
          "example": "Construction a\u00e9ronautique et spatiale",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Street16": {
      "properties": {
        "number": {
          "description": "Street number",
          "example": "1",
          "type": "string"
        },
        "repetition": {
          "description": "Street number repetition",
          "example": "bis",
          "type": "string"
        },
        "streetType": {
          "description": "Street Type",
          "example": "rue",
          "type": "string"
        },
        "streetName": {
          "description": "Street name",
          "example": "de la baule",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Identity6": {
      "properties": {
        "id": {
          "description": "Company Identifier",
          "example": "0123456789",
          "type": "string"
        },
        "registrationId": {
          "description": "Fiscal Registration Number",
          "example": "0123456789",
          "type": "string"
        },
        "name": {
          "description": "Company name",
          "example": "Great Company",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Identite": {
      "properties": {
        "nom": {
          "description": "Name",
          "example": "Great Company",
          "type": "string"
        },
        "pseudonyme": {
          "example": "GC",
          "type": "string"
        },
        "sigle": {
          "description": "acronym",
          "example": "GC",
          "type": "string"
        },
        "type": {
          "description": "Whether the person is a real person (P), or a company (M)",
          "example": "M",
          "type": "string",
          "enum": [
            "M",
            "P"
          ]
        },
        "siren": {
          "description": "Company Identifier",
          "example": "123456789",
          "type": "string"
        },
        "codeFormeJuridique": {
          "example": "5498",
          "type": "integer"
        },
        "labelFormeJuridique": {
          "example": "SARL unipersonnelle (EURL)",
          "type": "string"
        },
        "capital": {
          "example": 100,
          "type": "integer"
        },
        "devise": {
          "description": "Currency",
          "example": "EUR",
          "type": "string"
        },
        "dateCreation": {
          "description": "Company creation date",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "duree": {
          "description": "Company max age, in year",
          "type": "integer"
        },
        "garant": {
          "description": "Guarantor",
          "type": "string"
        },
        "dateClotureDesComptes": {
          "description": "Date on which the accounts are closed",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "etablissements": {
          "$ref": "#/definitions/Etablissements"
        }
      },
      "type": "object"
    },
    "Dirigeants": {
      "properties": {
        "dirigeant": {
          "description": "",
          "items": {
            "$ref": "#/definitions/Dirigeant"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ProcedureCollective": {
      "properties": {
        "dateCessationPaiements": {
          "description": "When the company has ceased payments",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "dateFinPeriodeObservation": {
          "description": "End of watching period",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "dureePlan": {
          "description": "Backup/recovery plan duration in month",
          "type": "integer"
        },
        "mandataires": {
          "description": "judicial representative",
          "example": "G\u00e9rard Butin",
          "type": "string"
        },
        "administrateur": {
          "description": "judicial representative",
          "example": "Joseph Humin",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Rectificatif": {
      "properties": {
        "nomPublication": {
          "description": "Parution name",
          "example": "Great Newspaper",
          "type": "string"
        },
        "dateParution": {
          "description": "Release date",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "numParution": {
          "description": "Parution number",
          "example": "XA123456",
          "type": "string"
        },
        "numAnnonce": {
          "description": "Event number",
          "example": "45632",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Role": {
      "properties": {
        "type": {
          "description": "Role type",
          "example": "PR",
          "type": "string"
        },
        "description": {
          "description": "Role description",
          "example": "Principal",
          "type": "string"
        }
      },
      "type": "object"
    },
    "IdentiteActeur": {
      "properties": {
        "nic": {
          "description": "Site number",
          "example": "00010",
          "type": "integer"
        },
        "siret": {
          "description": "Site unique identifier (only available in france)",
          "example": "12345678900010",
          "type": "integer"
        },
        "nom": {
          "description": "Name",
          "example": "Great Company",
          "type": "string"
        },
        "enseigne": {
          "description": "Commercial name",
          "example": "GC Technology",
          "type": "string"
        },
        "sigle": {
          "description": "acronym",
          "example": "GC",
          "type": "string"
        },
        "type": {
          "description": "Whether the person is a real person (P), or a company (M)",
          "example": "M",
          "type": "string",
          "enum": [
            "M",
            "P"
          ]
        },
        "siren": {
          "description": "Company Identifier",
          "example": "123456789",
          "type": "string"
        },
        "codeFormeJuridique": {
          "example": "5498",
          "type": "integer"
        },
        "labelFormeJuridique": {
          "example": "SARL unipersonnelle (EURL)",
          "type": "string"
        },
        "capital": {
          "example": 100,
          "type": "integer"
        },
        "devise": {
          "description": "Currency",
          "example": "EUR",
          "type": "string"
        },
        "activite": {
          "description": "Activity text",
          "example": "Commerce de d'autoradio",
          "type": "string"
        },
        "garant": {
          "description": "Guarantor",
          "type": "string"
        },
        "adresse": {
          "$ref": "#/definitions/Adresse"
        }
      },
      "type": "object"
    },
    "CessionInfo": {
      "properties": {
        "montantCession": {
          "description": "Sale amount",
          "example": 10000,
          "type": "integer"
        },
        "deviseMontantCession": {
          "description": "Currency",
          "example": "EUR",
          "type": "string"
        },
        "natureCession": {
          "description": "A compl\u00e9ter",
          "example": "A compl\u00e9ter",
          "type": "string"
        },
        "dureeCession": {
          "description": "A compl\u00e9ter",
          "example": "A compl\u00e9ter",
          "type": "string"
        },
        "uniteMois": {
          "description": "A compl\u00e9ter",
          "example": "A compl\u00e9ter",
          "type": "string"
        },
        "dateFinCession": {
          "description": "When sales is closed",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "nbParts": {
          "description": "Sales percentage",
          "example": "20",
          "type": "integer"
        },
        "valeurTitre": {
          "description": "A compl\u00e9ter",
          "example": "A compl\u00e9ter",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RepresentantActeur": {
      "properties": {
        "identiteActeur": {
          "$ref": "#/definitions/IdentiteActeur"
        }
      },
      "type": "object"
    },
    "AnnonceInfo2": {
      "properties": {
        "adID": {
          "description": "Event identifier",
          "example": "XA1235456",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Street17": {
      "type": "object"
    },
    "EventDetail5": {
      "properties": {
        "annonceInfo": {
          "$ref": "#/definitions/AnnonceInfo4"
        }
      },
      "type": "object"
    },
    "ExecutiveFonction10": {
      "properties": {
        "code": {
          "description": "Position code",
          "example": "047",
          "type": "string"
        },
        "label": {
          "description": "Position description",
          "example": "Administrateur",
          "type": "string"
        },
        "priority": {
          "description": "Position priority order",
          "example": 4,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Street18": {
      "properties": {
        "number": {
          "description": "Street number",
          "example": "1",
          "type": "string"
        },
        "repetition": {
          "description": "Street number repetition",
          "example": "bis",
          "type": "string"
        },
        "streetType": {
          "description": "Street Type",
          "example": "rue",
          "type": "string"
        },
        "streetName": {
          "description": "Street name",
          "example": "de la baule",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ExecutiveFonction11": {
      "properties": {
        "code": {
          "description": "Position code",
          "example": "047",
          "type": "string"
        },
        "label": {
          "description": "Position description",
          "example": "Administrateur",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ExecutiveMouvement7": {
      "properties": {
        "code": {
          "description": "Movement code",
          "example": 1,
          "type": "integer"
        },
        "label": {
          "description": "Human readable movement description",
          "example": "Nomination",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AnnonceInfo3": {
      "properties": {
        "adID": {
          "description": "Event identifier",
          "example": "XA1235456",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Block3": {
      "properties": {
        "id": {
          "description": "Identifier of block",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ExecutiveFonction12": {
      "properties": {
        "code": {
          "description": "Position code",
          "example": "047",
          "type": "string"
        },
        "label": {
          "description": "Position description",
          "example": "Administrateur",
          "type": "string"
        },
        "showOrder": {
          "description": "order identifier",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ExecutiveMouvement8": {
      "properties": {
        "code": {
          "description": "Movement code",
          "example": 1,
          "type": "integer"
        },
        "label": {
          "description": "Human readable movement description",
          "example": "Nomination",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Street19": {
      "type": "object"
    },
    "PostalAddressMailFormat7": {
      "type": "object"
    },
    "CodeLabelPair9": {
      "properties": {
        "code": {
          "description": "Code",
          "type": "string"
        },
        "label": {
          "description": "Description of the code",
          "type": "string"
        }
      },
      "type": "object"
    },
    "LegalActDecision2": {
      "properties": {
        "type": {
          "description": "Type of decision",
          "type": "string"
        },
        "label": {
          "description": "Complementary information about the decision",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Etablissements": {
      "properties": {
        "etablissement": {
          "description": "",
          "items": {
            "$ref": "#/definitions/Etablissement"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Dirigeant": {
      "properties": {
        "civilite": {
          "description": "Executive title",
          "example": "M",
          "type": "string",
          "enum": [
            "Ste",
            "Dr",
            "M",
            "Mme",
            "Mlle",
            "Me"
          ]
        },
        "nom": {
          "description": "Lastname",
          "example": "Dupont",
          "type": "string"
        },
        "nomJeuneFille": {
          "description": "Maiden name",
          "example": "",
          "type": "string"
        },
        "prenom": {
          "description": "Firstname",
          "example": "Laurent",
          "type": "string"
        },
        "siren": {
          "description": "Company identifier if available",
          "example": "123456789",
          "type": "string"
        },
        "codeFonction": {
          "description": "Executive position",
          "example": "01",
          "type": "string"
        },
        "labelFonction": {
          "description": "Executive position label",
          "example": "Pr\u00e9sident",
          "type": "string"
        },
        "dateNaissance": {
          "description": "Birth date",
          "example": "yyyy-mm-dd",
          "type": "string",
          "format": "date"
        },
        "nationalite": {
          "description": "Nationality",
          "example": "Fran\u00e7aise",
          "type": "string"
        },
        "mouvement": {
          "description": "Assignment",
          "example": "Nomination",
          "type": "string"
        },
        "representePar": {
          "description": "Represented by",
          "type": "string"
        },
        "apport": {
          "description": "",
          "type": "string"
        },
        "telephone": {
          "description": "Phone number",
          "example": "012345789",
          "type": "string"
        },
        "adresse": {
          "$ref": "#/definitions/Adresse"
        }
      },
      "type": "object"
    },
    "Adresse": {
      "properties": {
        "rue": {
          "description": "Street name",
          "example": "123 Rue de fleur",
          "type": "string"
        },
        "boitePostal": {
          "description": "Postal Box",
          "example": "BP12",
          "type": "string"
        },
        "codePostal": {
          "description": "Postal Code",
          "example": "12345",
          "type": "string"
        },
        "ville": {
          "description": "City",
          "example": "Fleurviller",
          "type": "string"
        },
        "departement": {
          "description": "Departement as a number",
          "example": 75,
          "type": "integer"
        },
        "codePays": {
          "description": "Country code in ISO 3166-3",
          "example": "FRA",
          "type": "string"
        },
        "labelPays": {
          "description": "Country name",
          "example": "France",
          "type": "string"
        },
        "adresseTexte": {
          "description": "Full address text",
          "example": "123 Rue Fleur 123456 Fleurville France",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AnnonceInfo4": {
      "properties": {
        "adID": {
          "description": "Event identifier",
          "example": "XA1235456",
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "name": "Authorization",
      "type": "apiKey",
      "in": "header",
      "description": "Value: Bearer {jwt}"
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ],
  "basePath": "/v2"
}
