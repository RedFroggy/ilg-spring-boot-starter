/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package fr.redfroggy.ilg.client.openapi.api;

import fr.redfroggy.ilg.client.openapi.model.Block;
import fr.redfroggy.ilg.client.openapi.model.Block2;
import fr.redfroggy.ilg.client.openapi.model.Error400Model;
import fr.redfroggy.ilg.client.openapi.model.Error401Model;
import fr.redfroggy.ilg.client.openapi.model.Error403Model;
import fr.redfroggy.ilg.client.openapi.model.ErrorModel;
import fr.redfroggy.ilg.client.openapi.model.Event;
import fr.redfroggy.ilg.client.openapi.model.Executive2;
import fr.redfroggy.ilg.client.openapi.model.ExecutiveDetail;
import fr.redfroggy.ilg.client.openapi.model.ExecutiveTerms;
import fr.redfroggy.ilg.client.openapi.model.ExecutiveTerms2;
import fr.redfroggy.ilg.client.openapi.model.Executives;
import fr.redfroggy.ilg.client.openapi.model.Executives2;
import fr.redfroggy.ilg.client.openapi.model.Mandat;
import fr.redfroggy.ilg.client.openapi.model.Mandats;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "Executive", description = "the Executive API")
public interface ExecutiveApi {

    /**
     * GET /companies/{country}/{id}/executives/blocks
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @param blockId block identifier (optional)
     * @param active true(active) or false(inactive) (optional)
     * @param positionRole Type of term (optional)
     * @param ordersName Executive name  (asc/desc) (optional)
     * @param ordersTermPositionCode Term position code (asc/desc) (optional)
     * @param ordersPositionShowOrder priority of a membership (asc/desc) (optional)
     * @param ordersTermStartDate Term start date (asc/desc) (optional)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "", nickname = "companiesCountryIdExecutivesBlocksGet", notes = "", response = Block.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Executive", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Block.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/executives/blocks",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Block> companiesCountryIdExecutivesBlocksGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country,@ApiParam(value = "block identifier") @Valid @RequestParam(value = "blockId", required = false) Integer blockId,@ApiParam(value = "true(active) or false(inactive)") @Valid @RequestParam(value = "active", required = false) Boolean active,@ApiParam(value = "Type of term", allowableValues = "M, O, CAC") @Valid @RequestParam(value = "positionRole", required = false) String positionRole,@ApiParam(value = "Executive name  (asc/desc)") @Valid @RequestParam(value = "orders[name]", required = false) String ordersName,@ApiParam(value = "Term position code (asc/desc)") @Valid @RequestParam(value = "orders[term.position_code]", required = false) String ordersTermPositionCode,@ApiParam(value = "priority of a membership (asc/desc)") @Valid @RequestParam(value = "orders[position.show_order]", required = false) String ordersPositionShowOrder,@ApiParam(value = "Term start date (asc/desc)") @Valid @RequestParam(value = "orders[term.start_date]", required = false) String ordersTermStartDate);


    /**
     * GET /companies/{country}/{id}/executives : Return all executives for a given company
     * Use /companies/{country}/{id}/executives/terms instead
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     * @deprecated
     */
    @ApiOperation(value = "Return all executives for a given company", nickname = "companiesCountryIdExecutivesGet", notes = "Use /companies/{country}/{id}/executives/terms instead", response = Executives.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Executive", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Executives.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/executives",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Executives> companiesCountryIdExecutivesGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country);


    /**
     * GET /companies/{country}/{id}/executives/in-office : Return all in office executives for a given company
     * Use /companies/{country}/{id}/executives/terms instead
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @param limit Limit results (optional)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     * @deprecated
     */
    @ApiOperation(value = "Return all in office executives for a given company", nickname = "companiesCountryIdExecutivesInOfficeGet", notes = "Use /companies/{country}/{id}/executives/terms instead", response = Executives.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Executive", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Executives.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/executives/in-office",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Executives> companiesCountryIdExecutivesInOfficeGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country,@ApiParam(value = "Limit results") @Valid @RequestParam(value = "limit", required = false) Integer limit);


    /**
     * GET /companies/{country}/{id}/executives/terms : Return all executives&#39;s terms for a given company 
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @param blockId block identifier (optional)
     * @param active true(active) or false(inactive) (optional)
     * @param positionRole Type of term (optional)
     * @param ordersName Executive name (asc/desc) (optional)
     * @param ordersTermPositionCode Executive position code (asc/desc) (optional)
     * @param ordersTermStartDate Term start date (asc/desc) (optional)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return all executives's terms for a given company ", nickname = "companiesCountryIdExecutivesTermsGet", notes = "", response = Executives2.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Executive", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Executives2.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/executives/terms",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Executives2> companiesCountryIdExecutivesTermsGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country,@ApiParam(value = "block identifier") @Valid @RequestParam(value = "blockId", required = false) Integer blockId,@ApiParam(value = "true(active) or false(inactive)") @Valid @RequestParam(value = "active", required = false) Boolean active,@ApiParam(value = "Type of term", allowableValues = "M, O, CAC") @Valid @RequestParam(value = "positionRole", required = false) String positionRole,@ApiParam(value = "Executive name (asc/desc)") @Valid @RequestParam(value = "orders[name]", required = false) String ordersName,@ApiParam(value = "Executive position code (asc/desc)") @Valid @RequestParam(value = "orders[term.position_code]", required = false) String ordersTermPositionCode,@ApiParam(value = "Term start date (asc/desc)") @Valid @RequestParam(value = "orders[term.start_date]", required = false) String ordersTermStartDate);


    /**
     * GET /executive/{id}/events : Return all events for an executive
     *
     * @param id Unique identifier representing an executive (required)
     * @return Array of Event (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return all events for an executive", nickname = "executiveIdEventsGet", notes = "", response = Event.class, responseContainer = "List", authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Executive", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Array of Event", response = Event.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/executive/{id}/events",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<Event>> executiveIdEventsGet(@ApiParam(value = "Unique identifier representing an executive",required=true) @PathVariable("id") String id);


    /**
     * GET /executive/{id} : Return details for an executive
     *
     * @param id Unique identifier representing an executive (required)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     * @deprecated
     */
    @ApiOperation(value = "Return details for an executive", nickname = "executiveIdGet", notes = "", response = ExecutiveDetail.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Executive", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = ExecutiveDetail.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/executive/{id}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<ExecutiveDetail> executiveIdGet(@ApiParam(value = "Unique identifier representing an executive",required=true) @PathVariable("id") String id);


    /**
     * GET /executive/{id}/homonymesEvents : Return all event for homonyms
     *
     * @param id Unique identifier representing an executive (required)
     * @return Array of Event (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return all event for homonyms", nickname = "executiveIdHomonymesEventsGet", notes = "", response = Event.class, responseContainer = "List", authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Executive", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Array of Event", response = Event.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/executive/{id}/homonymesEvents",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<Event>> executiveIdHomonymesEventsGet(@ApiParam(value = "Unique identifier representing an executive",required=true) @PathVariable("id") String id);


    /**
     * GET /executive/{id}/homonymes : Return homonyms for an executive
     * Use /executive/{id}/homonyms instead
     *
     * @param id Unique identifier representing an executive (required)
     * @return Array of Mandat (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     * @deprecated
     */
    @ApiOperation(value = "Return homonyms for an executive", nickname = "executiveIdHomonymesGet", notes = "Use /executive/{id}/homonyms instead", response = Mandat.class, responseContainer = "List", authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Executive", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Array of Mandat", response = Mandat.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/executive/{id}/homonymes",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<Mandat>> executiveIdHomonymesGet(@ApiParam(value = "Unique identifier representing an executive",required=true) @PathVariable("id") String id);


    /**
     * GET /executive/{id}/homonyms : Return all homonyms for an executive
     *
     * @param id Unique identifier representing an executive (required)
     * @param page page to load (optional)
     * @param itemPerPage Number of items per page (optional)
     * @param siren Unique identifier representing a comapny (optional)
     * @param blockId Unique identifier representing a block (optional)
     * @param positionRole Role representing the type of a membership (optional)
     * @param principal  (optional)
     * @param active State of a term of office (open/close) (optional)
     * @param ordersStartDate Term of office start date (asc/desc) (optional)
     * @return List of terms of offices (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return all homonyms for an executive", nickname = "executiveIdHomonymsGet", notes = "", response = ExecutiveTerms2.class, responseContainer = "List", authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Executive", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of terms of offices", response = ExecutiveTerms2.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/executive/{id}/homonyms",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<ExecutiveTerms2>> executiveIdHomonymsGet(@ApiParam(value = "Unique identifier representing an executive",required=true) @PathVariable("id") String id,@ApiParam(value = "page to load") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "Number of items per page") @Valid @RequestParam(value = "itemPerPage", required = false) Integer itemPerPage,@ApiParam(value = "Unique identifier representing a comapny") @Valid @RequestParam(value = "siren", required = false) Integer siren,@ApiParam(value = "Unique identifier representing a block") @Valid @RequestParam(value = "blockId", required = false) Integer blockId,@ApiParam(value = "Role representing the type of a membership", allowableValues = "M, O, CAC") @Valid @RequestParam(value = "positionRole", required = false) String positionRole,@ApiParam(value = "") @Valid @RequestParam(value = "principal", required = false) Boolean principal,@ApiParam(value = "State of a term of office (open/close)") @Valid @RequestParam(value = "active", required = false) Boolean active,@ApiParam(value = "Term of office start date (asc/desc)") @Valid @RequestParam(value = "orders[start_date]", required = false) String ordersStartDate);


    /**
     * GET /executive/{id}/infos : Return information for an executive
     *
     * @param id Unique identifier representing an executive (required)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return information for an executive", nickname = "executiveIdInfosGet", notes = "", response = Executive2.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Executive", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Executive2.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/executive/{id}/infos",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Executive2> executiveIdInfosGet(@ApiParam(value = "Unique identifier representing an executive",required=true) @PathVariable("id") String id);


    /**
     * GET /executive/{id}/mandats : Return mandates for an executive
     * Use /executive/{id}/terms instead
     *
     * @param id Unique identifier representing an executive (required)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     * @deprecated
     */
    @ApiOperation(value = "Return mandates for an executive", nickname = "executiveIdMandatsGet", notes = "Use /executive/{id}/terms instead", response = Mandats.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Executive", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Mandats.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/executive/{id}/mandats",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Mandats> executiveIdMandatsGet(@ApiParam(value = "Unique identifier representing an executive",required=true) @PathVariable("id") String id);


    /**
     * GET /executive/{id}/terms : Return terms for an executive
     *
     * @param id Unique identifier representing an executive (required)
     * @param siren Unique identifier representing a comapny (optional)
     * @param blockId Unique identifier representing a block (optional)
     * @param positionRole Role representing the type of a membership (optional)
     * @param principal  (optional)
     * @param active State of a term of office (open/close) (optional)
     * @param termsState Filters companies with at least one (true) or no (false) active term of office (optional)
     * @param ordersStartDate Term of office start date (asc/desc) (optional)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return terms for an executive", nickname = "executiveIdTermsGet", notes = "", response = ExecutiveTerms.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Executive", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = ExecutiveTerms.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/executive/{id}/terms",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<ExecutiveTerms> executiveIdTermsGet(@ApiParam(value = "Unique identifier representing an executive",required=true) @PathVariable("id") String id,@ApiParam(value = "Unique identifier representing a comapny") @Valid @RequestParam(value = "siren", required = false) Integer siren,@ApiParam(value = "Unique identifier representing a block") @Valid @RequestParam(value = "blockId", required = false) Integer blockId,@ApiParam(value = "Role representing the type of a membership", allowableValues = "M, O, CAC") @Valid @RequestParam(value = "positionRole", required = false) String positionRole,@ApiParam(value = "") @Valid @RequestParam(value = "principal", required = false) Boolean principal,@ApiParam(value = "State of a term of office (open/close)") @Valid @RequestParam(value = "active", required = false) Boolean active,@ApiParam(value = "Filters companies with at least one (true) or no (false) active term of office") @Valid @RequestParam(value = "termsState", required = false) Boolean termsState,@ApiParam(value = "Term of office start date (asc/desc)") @Valid @RequestParam(value = "orders[start_date]", required = false) String ordersStartDate);


    /**
     * GET /executives/{country}/{id}/blocks : Return all blocks
     *
     * @param country  (required)
     * @param id2  (required)
     * @param id Unique identifier representing an executive (optional)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return all blocks", nickname = "executivesCountryIdBlocksGet", notes = "", response = Block2.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Executive", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Block2.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/executives/{country}/{id}/blocks",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Block2> executivesCountryIdBlocksGet(@ApiParam(value = "",required=true) @PathVariable("country") String country,@ApiParam(value = "",required=true) @PathVariable("id") String id2,@ApiParam(value = "Unique identifier representing an executive") @Valid @RequestParam(value = "id", required = false) String id);

}
