/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package fr.redfroggy.ilg.client.openapi.api;

import java.math.BigDecimal;
import fr.redfroggy.ilg.client.openapi.model.CompanySearch;
import fr.redfroggy.ilg.client.openapi.model.CompanySearchGeneric;
import fr.redfroggy.ilg.client.openapi.model.Error400Model;
import fr.redfroggy.ilg.client.openapi.model.Error401Model;
import fr.redfroggy.ilg.client.openapi.model.Error403Model;
import fr.redfroggy.ilg.client.openapi.model.ErrorModel;
import fr.redfroggy.ilg.client.openapi.model.FindResultModel;
import fr.redfroggy.ilg.client.openapi.model.SiteSearch;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "Search", description = "the Search API")
public interface SearchApi {

    /**
     * POST /companies/{country}/autocomplete : Suggest companies
     *
     * @param country Country Code in ISO 3166-2 (required)
     * @param name Company name (required)
     * @param codePostal Company postal code (optional)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Suggest companies", nickname = "companiesCountryAutocompletePost", notes = "", response = CompanySearch.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = CompanySearch.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/autocomplete",
        produces = "*/*", 
        consumes = "multipart/form-data",
        method = RequestMethod.POST)
    ResponseEntity<CompanySearch> companiesCountryAutocompletePost(@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country,@ApiParam(value = "Company name", required=true ) @RequestParam(value="name", required=true)  String name,@ApiParam(value = "Company postal code" ) @RequestParam(value="codePostal", required=false)  String codePostal);


    /**
     * POST /companies/{country}/find : Search companies/sites registration ID
     *
     * @param country Country Code in ISO 3166-2 (required)
     * @param registrationId Look for a company or a site identified by the requested ID  (optional)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Search companies/sites registration ID", nickname = "companiesCountryFindPost", notes = "", response = FindResultModel.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = FindResultModel.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/find",
        produces = "*/*", 
        consumes = "multipart/form-data",
        method = RequestMethod.POST)
    ResponseEntity<FindResultModel> companiesCountryFindPost(@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country,@ApiParam(value = "Look for a company or a site identified by the requested ID " ) @RequestParam(value="registrationId", required=false)  String registrationId);


    /**
     * POST /companies/{country}/search/companies : Search companies
     *
     * @param country Country Code in ISO 3166-2 (required)
     * @param limit Limit the number of result (optional)
     * @param vatNumber VAT number (international use only) (optional)
     * @param simpleSearch General search, can only be used alone (optional)
     * @param eirl Only search against individual limited companies (optional)
     * @param siege Company is headquarter (optional)
     * @param actif Company is active (optional)
     * @param societeNom Company name (optional)
     * @param societeNaf Company activity code (optional)
     * @param societeCodePostal Company postal code (optional)
     * @param societeNumVoie Company number in street (optional)
     * @param societeRue Company street (optional)
     * @param societeVille Company city (optional)
     * @param societeRegion Company region (optional)
     * @param societeDepartement Company departement (optional)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Search companies", nickname = "companiesCountrySearchCompaniesPost", notes = "", response = CompanySearchGeneric.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = CompanySearchGeneric.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/search/companies",
        produces = "*/*", 
        consumes = "multipart/form-data",
        method = RequestMethod.POST)
    ResponseEntity<CompanySearchGeneric> companiesCountrySearchCompaniesPost(@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country,@ApiParam(value = "Limit the number of result") @Valid @RequestParam(value = "limit", required = false) Integer limit,@ApiParam(value = "VAT number (international use only)") @Valid @RequestParam(value = "vatNumber", required = false) String vatNumber,@ApiParam(value = "General search, can only be used alone" ) @RequestParam(value="simpleSearch", required=false)  String simpleSearch,@ApiParam(value = "Only search against individual limited companies" ) @RequestParam(value="eirl", required=false)  BigDecimal eirl,@ApiParam(value = "Company is headquarter" , allowableValues="{enumVars=[{name=NUMBER_1, isString=false, value=1}, {name=NUMBER_0, isString=false, value=0}], values=[1, 0]}") @RequestParam(value="siege", required=false)  Integer siege,@ApiParam(value = "Company is active" , allowableValues="{enumVars=[{name=NUMBER_1, isString=false, value=1}, {name=NUMBER_0, isString=false, value=0}], values=[1, 0]}") @RequestParam(value="actif", required=false)  Integer actif,@ApiParam(value = "Company name" ) @RequestParam(value="societeNom", required=false)  String societeNom,@ApiParam(value = "Company activity code" ) @RequestParam(value="societeNaf", required=false)  String societeNaf,@ApiParam(value = "Company postal code" ) @RequestParam(value="societeCodePostal", required=false)  String societeCodePostal,@ApiParam(value = "Company number in street" ) @RequestParam(value="societeNumVoie", required=false)  String societeNumVoie,@ApiParam(value = "Company street" ) @RequestParam(value="societeRue", required=false)  String societeRue,@ApiParam(value = "Company city" ) @RequestParam(value="societeVille", required=false)  String societeVille,@ApiParam(value = "Company region" ) @RequestParam(value="societeRegion", required=false)  String societeRegion,@ApiParam(value = "Company departement" ) @RequestParam(value="societeDepartement", required=false)  String societeDepartement);


    /**
     * POST /companies/{country}/search/executives : Search companies
     *
     * @param country Country Code in ISO 3166-2 (required)
     * @param limit Limit the number of result (optional)
     * @param simpleSearch General search, can only be used alone (optional)
     * @param dirigeantNom Executive Lastname (optional)
     * @param dirigeantPrenom Executive Firstname (optional)
     * @param dirigeantDateNaissance Executive birthdate in format YYYY-MM-DD (optional)
     * @param dirigeantLieuNaissance Executive birth city (optional)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Search companies", nickname = "companiesCountrySearchExecutivesPost", notes = "", response = CompanySearchGeneric.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = CompanySearchGeneric.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/search/executives",
        produces = "*/*", 
        consumes = "multipart/form-data",
        method = RequestMethod.POST)
    ResponseEntity<CompanySearchGeneric> companiesCountrySearchExecutivesPost(@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country,@ApiParam(value = "Limit the number of result") @Valid @RequestParam(value = "limit", required = false) Integer limit,@ApiParam(value = "General search, can only be used alone" ) @RequestParam(value="simpleSearch", required=false)  String simpleSearch,@ApiParam(value = "Executive Lastname" ) @RequestParam(value="dirigeantNom", required=false)  String dirigeantNom,@ApiParam(value = "Executive Firstname" ) @RequestParam(value="dirigeantPrenom", required=false)  String dirigeantPrenom,@ApiParam(value = "Executive birthdate in format YYYY-MM-DD" ) @RequestParam(value="dirigeantDateNaissance", required=false)  String dirigeantDateNaissance,@ApiParam(value = "Executive birth city" ) @RequestParam(value="dirigeantLieuNaissance", required=false)  String dirigeantLieuNaissance);


    /**
     * POST /companies/{country}/search : Search companies
     *
     * @param country Country Code in ISO 3166-2 (required)
     * @param limit Limit the number of result (optional)
     * @param vatNumber VAT number (international use only) (optional)
     * @param simpleSearch General search, can only be used alone (optional)
     * @param eirl Only search against individual limited companies (optional)
     * @param siege Company is headquarter (optional)
     * @param actif Company is active (optional)
     * @param societeNom Company name (optional)
     * @param societeNaf Company activity code (optional)
     * @param societeCodePostal Company postal code (optional)
     * @param societeNumVoie Company number in street (optional)
     * @param societeRue Company street (optional)
     * @param societeVille Company city (optional)
     * @param societeRegion Company region (optional)
     * @param societeDepartement Company departement (optional)
     * @param dirigeantNom Executive Lastname (optional)
     * @param dirigeantPrenom Executive Firstname (optional)
     * @param dirigeantDateNaissance Executive birthdate in format YYYY-MM-DD (optional)
     * @param dirigeantLieuNaissance Executive birth city (optional)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Search companies", nickname = "companiesCountrySearchPost", notes = "", response = CompanySearch.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = CompanySearch.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/search",
        produces = "*/*", 
        consumes = "multipart/form-data",
        method = RequestMethod.POST)
    ResponseEntity<CompanySearch> companiesCountrySearchPost(@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country,@ApiParam(value = "Limit the number of result") @Valid @RequestParam(value = "limit", required = false) Integer limit,@ApiParam(value = "VAT number (international use only)") @Valid @RequestParam(value = "vatNumber", required = false) String vatNumber,@ApiParam(value = "General search, can only be used alone" ) @RequestParam(value="simpleSearch", required=false)  String simpleSearch,@ApiParam(value = "Only search against individual limited companies" ) @RequestParam(value="eirl", required=false)  BigDecimal eirl,@ApiParam(value = "Company is headquarter" , allowableValues="{enumVars=[{name=NUMBER_1, isString=false, value=1}, {name=NUMBER_0, isString=false, value=0}], values=[1, 0]}") @RequestParam(value="siege", required=false)  Integer siege,@ApiParam(value = "Company is active" , allowableValues="{enumVars=[{name=NUMBER_1, isString=false, value=1}, {name=NUMBER_0, isString=false, value=0}], values=[1, 0]}") @RequestParam(value="actif", required=false)  Integer actif,@ApiParam(value = "Company name" ) @RequestParam(value="societeNom", required=false)  String societeNom,@ApiParam(value = "Company activity code" ) @RequestParam(value="societeNaf", required=false)  String societeNaf,@ApiParam(value = "Company postal code" ) @RequestParam(value="societeCodePostal", required=false)  String societeCodePostal,@ApiParam(value = "Company number in street" ) @RequestParam(value="societeNumVoie", required=false)  String societeNumVoie,@ApiParam(value = "Company street" ) @RequestParam(value="societeRue", required=false)  String societeRue,@ApiParam(value = "Company city" ) @RequestParam(value="societeVille", required=false)  String societeVille,@ApiParam(value = "Company region" ) @RequestParam(value="societeRegion", required=false)  String societeRegion,@ApiParam(value = "Company departement" ) @RequestParam(value="societeDepartement", required=false)  String societeDepartement,@ApiParam(value = "Executive Lastname" ) @RequestParam(value="dirigeantNom", required=false)  String dirigeantNom,@ApiParam(value = "Executive Firstname" ) @RequestParam(value="dirigeantPrenom", required=false)  String dirigeantPrenom,@ApiParam(value = "Executive birthdate in format YYYY-MM-DD" ) @RequestParam(value="dirigeantDateNaissance", required=false)  String dirigeantDateNaissance,@ApiParam(value = "Executive birth city" ) @RequestParam(value="dirigeantLieuNaissance", required=false)  String dirigeantLieuNaissance);


    /**
     * POST /companies/{country}/search-simple : Search companies for autocomplete
     *
     * @param country Country Code in ISO 3166-2 (required)
     * @param name Company name (required)
     * @param codePostal Company postal code (optional)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     * @deprecated
     */
    @ApiOperation(value = "Search companies for autocomplete", nickname = "companiesCountrySearchSimplePost", notes = "", response = CompanySearch.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = CompanySearch.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/search-simple",
        produces = "*/*", 
        consumes = "multipart/form-data",
        method = RequestMethod.POST)
    ResponseEntity<CompanySearch> companiesCountrySearchSimplePost(@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country,@ApiParam(value = "Company name", required=true ) @RequestParam(value="name", required=true)  String name,@ApiParam(value = "Company postal code" ) @RequestParam(value="codePostal", required=false)  String codePostal);


    /**
     * POST /companies/{country}/sites/search : Search a site
     *
     * @param country Country Code in ISO 3166-2 (required)
     * @param limit Limit search result (optional)
     * @param name Company/Site name (optional)
     * @param street Company/Site street name (Only available in France) (optional)
     * @param zipCode Company/Site address zip code (Only available in France) (optional)
     * @param city Company/Site city (optional)
     * @param phone Company/Site street phone number (Only available in France) (optional)
     * @param companyRegistrationNumber Company registration number (Only available in France) (optional)
     * @param registrationNumber Site registration number (optional)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Search a site", nickname = "companiesCountrySitesSearchPost", notes = "", response = SiteSearch.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = SiteSearch.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/sites/search",
        produces = "*/*", 
        consumes = "multipart/form-data",
        method = RequestMethod.POST)
    ResponseEntity<SiteSearch> companiesCountrySitesSearchPost(@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country,@ApiParam(value = "Limit search result") @Valid @RequestParam(value = "limit", required = false) Integer limit,@ApiParam(value = "Company/Site name" ) @RequestParam(value="name", required=false)  String name,@ApiParam(value = "Company/Site street name (Only available in France)" ) @RequestParam(value="street", required=false)  String street,@ApiParam(value = "Company/Site address zip code (Only available in France)" ) @RequestParam(value="zipCode", required=false)  String zipCode,@ApiParam(value = "Company/Site city" ) @RequestParam(value="city", required=false)  String city,@ApiParam(value = "Company/Site street phone number (Only available in France)" ) @RequestParam(value="phone", required=false)  String phone,@ApiParam(value = "Company registration number (Only available in France)" ) @RequestParam(value="companyRegistrationNumber", required=false)  String companyRegistrationNumber,@ApiParam(value = "Site registration number" ) @RequestParam(value="registrationNumber", required=false)  String registrationNumber);


    /**
     * POST /companies/{country}/suggest : Suggest companies
     *
     * @param country Country Code in ISO 3166-2 (required)
     * @param name Company name (required)
     * @param codePostal Company postal code (optional)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Suggest companies", nickname = "companiesCountrySuggestPost", notes = "", response = CompanySearch.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = CompanySearch.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/suggest",
        produces = "*/*", 
        consumes = "multipart/form-data",
        method = RequestMethod.POST)
    ResponseEntity<CompanySearch> companiesCountrySuggestPost(@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country,@ApiParam(value = "Company name", required=true ) @RequestParam(value="name", required=true)  String name,@ApiParam(value = "Company postal code" ) @RequestParam(value="codePostal", required=false)  String codePostal);

}
