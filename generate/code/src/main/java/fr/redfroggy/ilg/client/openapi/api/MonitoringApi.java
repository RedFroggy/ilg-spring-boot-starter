/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package fr.redfroggy.ilg.client.openapi.api;

import fr.redfroggy.ilg.client.openapi.model.Error400Model;
import fr.redfroggy.ilg.client.openapi.model.Error401Model;
import fr.redfroggy.ilg.client.openapi.model.Error403Model;
import fr.redfroggy.ilg.client.openapi.model.ErrorModel;
import fr.redfroggy.ilg.client.openapi.model.InlineObject10;
import fr.redfroggy.ilg.client.openapi.model.InlineObject14;
import fr.redfroggy.ilg.client.openapi.model.InlineObject8;
import fr.redfroggy.ilg.client.openapi.model.InlineObject9;
import fr.redfroggy.ilg.client.openapi.model.MonitoringNumbers;
import fr.redfroggy.ilg.client.openapi.model.MonitoringSubscriptionsSubscriptions;
import fr.redfroggy.ilg.client.openapi.model.MonitoringUserSubscriptionsPortfolios;
import fr.redfroggy.ilg.client.openapi.model.Portfolio;
import fr.redfroggy.ilg.client.openapi.model.Portfolio2;
import fr.redfroggy.ilg.client.openapi.model.PortfolioItems2;
import fr.redfroggy.ilg.client.openapi.model.Portfolios;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "Monitoring", description = "the Monitoring API")
public interface MonitoringApi {

    /**
     * GET /monitoring/alert : Return a list of alerts
     *
     * @param entityId Identifiant unique représentant une entité (optional)
     * @param userEmail Email de l&#39;utilisateur (optional)
     * @param alertMinDate Date de début de recherche de parution des alertes (format yyyy-mm-dd) (optional)
     * @param alertMaxDate Date de fin de recherche de parution des alertes (format yyyy-mm-dd) (optional)
     * @param source Enum sur la source de l’alerte, Available values : BOD, JAL, PRE, RPC, SIR, TCO (optional)
     * @param isPerso Valeur de filtrage sur les portfolios perso (1) ou pro (0) (optional)
     * @param page Entier représentant le numéro de la page (optional)
     * @param number Nombre de résultats par page (optional)
     * @param sort Valeur de retour à trier (nom de la colonne) (optional, default to adId)
     * @param order Ordre ascendant ou descendant portant sur la condition de trie (optional, default to ASC)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return a list of alerts", nickname = "monitoringAlertGet", notes = "", response = Object.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Monitoring", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Object.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/monitoring/alert",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Object> monitoringAlertGet(@ApiParam(value = "Identifiant unique représentant une entité") @Valid @RequestParam(value = "entityId", required = false) Integer entityId,@ApiParam(value = "Email de l'utilisateur") @Valid @RequestParam(value = "userEmail", required = false) String userEmail,@ApiParam(value = "Date de début de recherche de parution des alertes (format yyyy-mm-dd)") @Valid @RequestParam(value = "alertMinDate", required = false) String alertMinDate,@ApiParam(value = "Date de fin de recherche de parution des alertes (format yyyy-mm-dd)") @Valid @RequestParam(value = "alertMaxDate", required = false) String alertMaxDate,@ApiParam(value = "Enum sur la source de l’alerte, Available values : BOD, JAL, PRE, RPC, SIR, TCO", allowableValues = "BOD, JAL, PRE, RPC, SIR, TCO") @Valid @RequestParam(value = "source[]", required = false) String source,@ApiParam(value = "Valeur de filtrage sur les portfolios perso (1) ou pro (0)", allowableValues = "0, 1") @Valid @RequestParam(value = "isPerso", required = false) Integer isPerso,@ApiParam(value = "Entier représentant le numéro de la page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "Nombre de résultats par page") @Valid @RequestParam(value = "number", required = false) Integer number,@ApiParam(value = "Valeur de retour à trier (nom de la colonne)", allowableValues = "adId, ", defaultValue = "adId") @Valid @RequestParam(value = "sort", required = false, defaultValue="adId") String sort,@ApiParam(value = "Ordre ascendant ou descendant portant sur la condition de trie", allowableValues = "ASC, DESC", defaultValue = "ASC") @Valid @RequestParam(value = "order", required = false, defaultValue="ASC") String order);


    /**
     * GET /monitoring/alert/portfolio/{portfolioId} : Return a list of alerts by portfolio id
     *
     * @param portfolioId Identifiant du portefeuille dont on veut les alertes (required)
     * @param alertMinDate Date de début de recherche de parution des alertes (format yyyy-mm-dd) (optional)
     * @param alertMaxDate Date de fin de recherche de parution des alertes (format yyyy-mm-dd) (optional)
     * @param source Enum sur la source de l’alerte, Available values : BOD, JAL, PRE, RPC, SIR, TCO (optional)
     * @param page Entier représentant le numéro de la page (optional)
     * @param number Nombre de résultats par page (optional)
     * @param sort Valeur de retour à trier (nom de la colonne) (optional, default to adId)
     * @param order Ordre ascendant ou descendant portant sur la condition de trie (optional, default to ASC)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return a list of alerts by portfolio id", nickname = "monitoringAlertPortfolioPortfolioIdGet", notes = "", response = Object.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Monitoring", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Object.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/monitoring/alert/portfolio/{portfolioId}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Object> monitoringAlertPortfolioPortfolioIdGet(@ApiParam(value = "Identifiant du portefeuille dont on veut les alertes",required=true) @PathVariable("portfolioId") Integer portfolioId,@ApiParam(value = "Date de début de recherche de parution des alertes (format yyyy-mm-dd)") @Valid @RequestParam(value = "alertMinDate", required = false) String alertMinDate,@ApiParam(value = "Date de fin de recherche de parution des alertes (format yyyy-mm-dd)") @Valid @RequestParam(value = "alertMaxDate", required = false) String alertMaxDate,@ApiParam(value = "Enum sur la source de l’alerte, Available values : BOD, JAL, PRE, RPC, SIR, TCO", allowableValues = "BOD, JAL, PRE, RPC, SIR, TCO") @Valid @RequestParam(value = "source[]", required = false) String source,@ApiParam(value = "Entier représentant le numéro de la page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "Nombre de résultats par page") @Valid @RequestParam(value = "number", required = false) Integer number,@ApiParam(value = "Valeur de retour à trier (nom de la colonne)", allowableValues = "adId, ", defaultValue = "adId") @Valid @RequestParam(value = "sort", required = false, defaultValue="adId") String sort,@ApiParam(value = "Ordre ascendant ou descendant portant sur la condition de trie", allowableValues = "ASC, DESC", defaultValue = "ASC") @Valid @RequestParam(value = "order", required = false, defaultValue="ASC") String order);


    /**
     * GET /monitoring/numbers : Return stats
     *
     * @param portfolioId Unique identifier representing a portfolio (optional)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return stats", nickname = "monitoringNumbersGet", notes = "", response = MonitoringNumbers.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Monitoring", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = MonitoringNumbers.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/monitoring/numbers",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<MonitoringNumbers> monitoringNumbersGet(@ApiParam(value = "Unique identifier representing a portfolio") @Valid @RequestParam(value = "portfolioId", required = false) Integer portfolioId);


    /**
     * GET /monitoring/portfolio : Return a list of portfolio for user or entity
     *
     * @param entityId Unique identifier representing a entity (optional)
     * @param userEmail Email of user (optional)
     * @param label part of name of the portfolio (optional)
     * @param alertType type of of alert 4&#x3D;juri, 8&#x3D;score, 12&#x3D;juri+score (ex: alertType[]&#x3D;4&amp;alertype[]&#x3D;12) (optional)
     * @param isPerso Portfolio perso or not 1&#x3D;perso, 0&#x3D;pro (optional)
     * @param updateDateMin update date min YYYY-MM-DD (optional)
     * @param updateDateMax update date max YYYY-MM-DD (optional)
     * @param audit Portfolio auditable or not 1 or 0 (optional)
     * @param editable Portfolio is editable or not 1 or 0 (optional)
     * @param page Page number (optional)
     * @param number Number of result by page (optional)
     * @param sort Value to sort (optional, default to label)
     * @param order Sorting order, ‘asc’ or ‘desc’ (optional, default to ASC)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return a list of portfolio for user or entity", nickname = "monitoringPortfolioGet", notes = "", response = Portfolios.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Monitoring", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Portfolios.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/monitoring/portfolio",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Portfolios> monitoringPortfolioGet(@ApiParam(value = "Unique identifier representing a entity") @Valid @RequestParam(value = "entityId", required = false) Integer entityId,@ApiParam(value = "Email of user") @Valid @RequestParam(value = "userEmail", required = false) String userEmail,@ApiParam(value = "part of name of the portfolio") @Valid @RequestParam(value = "label", required = false) String label,@ApiParam(value = "type of of alert 4=juri, 8=score, 12=juri+score (ex: alertType[]=4&alertype[]=12)") @Valid @RequestParam(value = "alertType[]", required = false) Integer alertType,@ApiParam(value = "Portfolio perso or not 1=perso, 0=pro") @Valid @RequestParam(value = "isPerso", required = false) Integer isPerso,@ApiParam(value = "update date min YYYY-MM-DD") @Valid @RequestParam(value = "updateDate[min]", required = false) String updateDateMin,@ApiParam(value = "update date max YYYY-MM-DD") @Valid @RequestParam(value = "updateDate[max]", required = false) String updateDateMax,@ApiParam(value = "Portfolio auditable or not 1 or 0") @Valid @RequestParam(value = "audit", required = false) Integer audit,@ApiParam(value = "Portfolio is editable or not 1 or 0") @Valid @RequestParam(value = "editable", required = false) Integer editable,@ApiParam(value = "Page number") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "Number of result by page") @Valid @RequestParam(value = "number", required = false) Integer number,@ApiParam(value = "Value to sort", allowableValues = "label, updateDate", defaultValue = "label") @Valid @RequestParam(value = "sort", required = false, defaultValue="label") String sort,@ApiParam(value = "Sorting order, ‘asc’ or ‘desc’", allowableValues = "ASC, DESC", defaultValue = "ASC") @Valid @RequestParam(value = "order", required = false, defaultValue="ASC") String order);


    /**
     * POST /monitoring/portfolio/perso : POST a personal portfolio
     *
     * @return The portfolio have been added (status code 201)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     *         or A personal portfolio already exists (status code 409)
     */
    @ApiOperation(value = "POST a personal portfolio", nickname = "monitoringPortfolioPersoPost", notes = "", authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Monitoring", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "The portfolio have been added"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class),
        @ApiResponse(code = 409, message = "A personal portfolio already exists") })
    @RequestMapping(value = "/monitoring/portfolio/perso",
        produces = "*/*", 
        method = RequestMethod.POST)
    ResponseEntity<Void> monitoringPortfolioPersoPost();


    /**
     * GET /monitoring/portfolio/{portfolioId} : Return information of portfolio
     *
     * @param portfolioId Unique identifier representing a Portfolio (required)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return information of portfolio", nickname = "monitoringPortfolioPortfolioIdGet", notes = "", response = Portfolio.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Monitoring", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Portfolio.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/monitoring/portfolio/{portfolioId}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Portfolio> monitoringPortfolioPortfolioIdGet(@ApiParam(value = "Unique identifier representing a Portfolio",required=true) @PathVariable("portfolioId") Integer portfolioId);


    /**
     * GET /monitoring/portfolio/{portfolioId}/item : Return a list of items
     *
     * @param portfolioId Unique identifier representing a portfolio (required)
     * @param page Page number (optional)
     * @param number Number of result by page (optional)
     * @param customCode Filter for a custom code (optional)
     * @param eventCode Filter for the event code (optional)
     * @param siren Filter for a siren (optional)
     * @param cname Search text in company name (optional)
     * @param ilgScoreOrigin Filter for a origin score (optional)
     * @param customCreditMin Filter for a custom credit min (optional)
     * @param customCreditMax Filter for a custom credit max (optional)
     * @param portfolio List of monitoring for a portfolio (optional)
     * @param userEmail List of monitoring for a user (optional)
     * @param monitoringStartDateMin Filter for a start date of monitoring min (YYYY-MM-DD) (optional)
     * @param monitoringStartDateMax Filter for a start date of monitoring max (YYYY-MM-DD) (optional)
     * @param creationDateMin Filter for a creation date of monitoring min (YYYY-MM-DD) (optional)
     * @param creationDateMax Filter for a creation date of monitoring max (YYYY-MM-DD) (optional)
     * @param sort Value to sort (optional, default to monitoringStartDate)
     * @param order Sorting order, ‘asc’ or ‘desc’ (optional, default to DESC)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return a list of items", nickname = "monitoringPortfolioPortfolioIdItemGet", notes = "", response = Object.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Monitoring", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Object.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/monitoring/portfolio/{portfolioId}/item",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Object> monitoringPortfolioPortfolioIdItemGet(@ApiParam(value = "Unique identifier representing a portfolio",required=true) @PathVariable("portfolioId") Integer portfolioId,@ApiParam(value = "Page number") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "Number of result by page") @Valid @RequestParam(value = "number", required = false) Integer number,@ApiParam(value = "Filter for a custom code") @Valid @RequestParam(value = "customCode", required = false) Integer customCode,@ApiParam(value = "Filter for the event code") @Valid @RequestParam(value = "eventCode", required = false) Integer eventCode,@ApiParam(value = "Filter for a siren") @Valid @RequestParam(value = "siren", required = false) Integer siren,@ApiParam(value = "Search text in company name") @Valid @RequestParam(value = "cname", required = false) String cname,@ApiParam(value = "Filter for a origin score") @Valid @RequestParam(value = "ilgScoreOrigin", required = false) Integer ilgScoreOrigin,@ApiParam(value = "Filter for a custom credit min") @Valid @RequestParam(value = "customCredit[min]", required = false) Integer customCreditMin,@ApiParam(value = "Filter for a custom credit max") @Valid @RequestParam(value = "customCredit[max]", required = false) Integer customCreditMax,@ApiParam(value = "List of monitoring for a portfolio") @Valid @RequestParam(value = "portfolio", required = false) Integer portfolio,@ApiParam(value = "List of monitoring for a user") @Valid @RequestParam(value = "userEmail", required = false) String userEmail,@ApiParam(value = "Filter for a start date of monitoring min (YYYY-MM-DD)") @Valid @RequestParam(value = "monitoringStartDate[min]", required = false) String monitoringStartDateMin,@ApiParam(value = "Filter for a start date of monitoring max (YYYY-MM-DD)") @Valid @RequestParam(value = "monitoringStartDate[max]", required = false) String monitoringStartDateMax,@ApiParam(value = "Filter for a creation date of monitoring min (YYYY-MM-DD)") @Valid @RequestParam(value = "creationDate[min]", required = false) String creationDateMin,@ApiParam(value = "Filter for a creation date of monitoring max (YYYY-MM-DD)") @Valid @RequestParam(value = "creationDate[max]", required = false) String creationDateMax,@ApiParam(value = "Value to sort", allowableValues = "siren, customCode, customCredit, monitoringStartDate", defaultValue = "monitoringStartDate") @Valid @RequestParam(value = "sort", required = false, defaultValue="monitoringStartDate") String sort,@ApiParam(value = "Sorting order, ‘asc’ or ‘desc’", allowableValues = "ASC, DESC", defaultValue = "DESC") @Valid @RequestParam(value = "order", required = false, defaultValue="DESC") String order);


    /**
     * DELETE /monitoring/portfolio/{portfolioId}/item/{itemId} : Delete items from PF
     *
     * @param portfolioId Unique identifier representing a portfolio (required)
     * @param itemId Unique identifier representing a item (required)
     * @return The items have been removed (status code 204)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     *         or Conflict (status code 409)
     */
    @ApiOperation(value = "Delete items from PF", nickname = "monitoringPortfolioPortfolioIdItemItemIdDelete", notes = "", authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Monitoring", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The items have been removed"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class),
        @ApiResponse(code = 409, message = "Conflict", response = ErrorModel.class) })
    @RequestMapping(value = "/monitoring/portfolio/{portfolioId}/item/{itemId}",
        produces = "*/*", 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> monitoringPortfolioPortfolioIdItemItemIdDelete(@ApiParam(value = "Unique identifier representing a portfolio",required=true) @PathVariable("portfolioId") Integer portfolioId,@ApiParam(value = "Unique identifier representing a item",required=true) @PathVariable("itemId") Integer itemId);


    /**
     * PATCH /monitoring/portfolio/{portfolioId}/item/{itemId} : Update item from PF
     *
     * @param portfolioId Unique identifier representing a portfolio (required)
     * @param itemId Unique identifier representing a item (required)
     * @param itemDetail  (required)
     * @return The items have been removed (status code 204)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     *         or Conflict (status code 409)
     */
    @ApiOperation(value = "Update item from PF", nickname = "monitoringPortfolioPortfolioIdItemItemIdPatch", notes = "", authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Monitoring", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The items have been removed"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class),
        @ApiResponse(code = 409, message = "Conflict", response = ErrorModel.class) })
    @RequestMapping(value = "/monitoring/portfolio/{portfolioId}/item/{itemId}",
        produces = "*/*", 
        method = RequestMethod.PATCH)
    ResponseEntity<Void> monitoringPortfolioPortfolioIdItemItemIdPatch(@ApiParam(value = "Unique identifier representing a portfolio",required=true) @PathVariable("portfolioId") Integer portfolioId,@ApiParam(value = "Unique identifier representing a item",required=true) @PathVariable("itemId") Integer itemId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody InlineObject10 itemDetail);


    /**
     * POST /monitoring/portfolio/{portfolioId}/item : Add item to PF
     *
     * @param portfolioId Unique identifier representing a portfolio (required)
     * @param itemDetail  (required)
     * @return the item have been added (status code 201)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Conflict (status code 409)
     */
    @ApiOperation(value = "Add item to PF", nickname = "monitoringPortfolioPortfolioIdItemPost", notes = "", authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Monitoring", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "the item have been added"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 409, message = "Conflict", response = ErrorModel.class) })
    @RequestMapping(value = "/monitoring/portfolio/{portfolioId}/item",
        produces = "*/*", 
        method = RequestMethod.POST)
    ResponseEntity<Void> monitoringPortfolioPortfolioIdItemPost(@ApiParam(value = "Unique identifier representing a portfolio",required=true) @PathVariable("portfolioId") Integer portfolioId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody InlineObject8 itemDetail);


    /**
     * DELETE /monitoring/portfolio/{portfolioId}/items : Delete items from PF
     *
     * @param portfolioId Unique identifier representing a portfolio (required)
     * @param idsOfItem  (required)
     * @return The items have been removed (status code 204)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     *         or Conflict (status code 409)
     */
    @ApiOperation(value = "Delete items from PF", nickname = "monitoringPortfolioPortfolioIdItemsDelete", notes = "", authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Monitoring", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The items have been removed"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class),
        @ApiResponse(code = 409, message = "Conflict", response = ErrorModel.class) })
    @RequestMapping(value = "/monitoring/portfolio/{portfolioId}/items",
        produces = "*/*", 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> monitoringPortfolioPortfolioIdItemsDelete(@ApiParam(value = "Unique identifier representing a portfolio",required=true) @PathVariable("portfolioId") Integer portfolioId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody InlineObject9 idsOfItem);


    /**
     * POST /monitoring/portfolio/siren : Return list of siren subscribed for given siren
     *
     * @param siren  (required)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return list of siren subscribed for given siren", nickname = "monitoringPortfolioSirenPost", notes = "", response = PortfolioItems2.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Monitoring", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = PortfolioItems2.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/monitoring/portfolio/siren",
        produces = "*/*", 
        method = RequestMethod.POST)
    ResponseEntity<PortfolioItems2> monitoringPortfolioSirenPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody InlineObject14 siren);


    /**
     * GET /monitoring/portfolio/siren/{siren} : Return informations of portfolios for user and siren
     *
     * @param siren Unique identifier representing a company (required)
     * @param page Page number (optional)
     * @param number Number of result by page (optional)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return informations of portfolios for user and siren", nickname = "monitoringPortfolioSirenSirenGet", notes = "", response = Portfolio2.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Monitoring", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Portfolio2.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/monitoring/portfolio/siren/{siren}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Portfolio2> monitoringPortfolioSirenSirenGet(@ApiParam(value = "Unique identifier representing a company",required=true) @PathVariable("siren") Integer siren,@ApiParam(value = "Page number") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "Number of result by page") @Valid @RequestParam(value = "number", required = false) Integer number);


    /**
     * DELETE /monitoring/subscription/{idSubscription} : Delete a subscription
     *
     * @param idSubscription unique identifier representing a subscription (required)
     * @return The subscriptions have been modified (status code 204)
     *         or A part of subscriptions have not been modified (status code 206)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Delete a subscription", nickname = "monitoringSubscriptionIdSubscriptionDelete", notes = "", authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Monitoring", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The subscriptions have been modified"),
        @ApiResponse(code = 206, message = "A part of subscriptions have not been modified"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/monitoring/subscription/{idSubscription}",
        produces = "*/*", 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> monitoringSubscriptionIdSubscriptionDelete(@ApiParam(value = "unique identifier representing a subscription",required=true) @PathVariable("idSubscription") Integer idSubscription);


    /**
     * POST /monitoring/subscription : POST a subscription
     *
     * @param targetId  (optional)
     * @param targetEmail  (optional)
     * @param portfolioId  (optional)
     * @param audit  (optional)
     * @param editable  (optional)
     * @param status  (optional)
     * @return The subscription have been added (status code 204)
     *         or A part of subscriptions have not been added (status code 206)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "POST a subscription", nickname = "monitoringSubscriptionPost", notes = "", authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Monitoring", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The subscription have been added"),
        @ApiResponse(code = 206, message = "A part of subscriptions have not been added"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/monitoring/subscription",
        produces = "*/*", 
        consumes = "multipart/form-data",
        method = RequestMethod.POST)
    ResponseEntity<Void> monitoringSubscriptionPost(@ApiParam(value = "" ) @RequestParam(value="targetId", required=false)  Integer targetId,@ApiParam(value = "" ) @RequestParam(value="targetEmail", required=false)  String targetEmail,@ApiParam(value = "" ) @RequestParam(value="portfolioId", required=false)  Integer portfolioId,@ApiParam(value = "" ) @RequestParam(value="audit", required=false)  Boolean audit,@ApiParam(value = "" ) @RequestParam(value="editable", required=false)  Boolean editable,@ApiParam(value = "" ) @RequestParam(value="status", required=false)  Boolean status);


    /**
     * PATCH /monitoring/subscriptions : Patch a subscription
     *
     * @param userEmail  (optional)
     * @param subscriptions  (optional)
     * @return The subscriptions have been modified (status code 204)
     *         or A part of subscriptions have not been modified (status code 206)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Patch a subscription", nickname = "monitoringSubscriptionsPatch", notes = "", authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Monitoring", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The subscriptions have been modified"),
        @ApiResponse(code = 206, message = "A part of subscriptions have not been modified"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/monitoring/subscriptions",
        produces = "*/*", 
        consumes = "multipart/form-data",
        method = RequestMethod.PATCH)
    ResponseEntity<Void> monitoringSubscriptionsPatch(@ApiParam(value = "" ) @RequestParam(value="userEmail", required=false)  String userEmail,@ApiParam(value = "" ) @RequestParam(value="subscriptions", required=false)  List<MonitoringSubscriptionsSubscriptions> subscriptions);


    /**
     * GET /monitoring/target/{userEmail}/subscriptions : Return a subscriptions for given email
     *
     * @param userEmail Email identifier representing a user (required)
     * @param entityId Unique identifier representing a entity (optional)
     * @param page Page number (optional)
     * @param number Number of result by page (optional)
     * @param label part of name of the portfolio (optional)
     * @param isEditable Right editable 0&#x3D;not editable or 1&#x3D;editable (optional)
     * @param alert Right alert 0 or 1 (optional)
     * @param audit Right audit 0 or 1 (optional)
     * @param alertType type of of alert 4&#x3D;juri, 8&#x3D;score, 12&#x3D;juri+score (ex: alertType[]&#x3D;4&amp;alertype[]&#x3D;12) (optional)
     * @param isPerso Portfolio perso or not 1&#x3D;perso, 0&#x3D;pro (optional)
     * @param startDateMin Start date of the portfolio min(YYYY-MM-DD) (optional)
     * @param startDateMax Start date of the portfolio max (YYYY-MM-DD) (optional)
     * @param sort Value to sort (optional, default to portfolio.label)
     * @param order Sorting order, ‘asc’ or ‘desc’ (optional, default to ASC)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return a subscriptions for given email", nickname = "monitoringTargetUserEmailSubscriptionsGet", notes = "", response = Object.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Monitoring", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Object.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/monitoring/target/{userEmail}/subscriptions",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Object> monitoringTargetUserEmailSubscriptionsGet(@ApiParam(value = "Email identifier representing a user",required=true) @PathVariable("userEmail") String userEmail,@ApiParam(value = "Unique identifier representing a entity") @Valid @RequestParam(value = "entityId", required = false) Integer entityId,@ApiParam(value = "Page number") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "Number of result by page") @Valid @RequestParam(value = "number", required = false) Integer number,@ApiParam(value = "part of name of the portfolio") @Valid @RequestParam(value = "label", required = false) String label,@ApiParam(value = "Right editable 0=not editable or 1=editable") @Valid @RequestParam(value = "isEditable", required = false) Boolean isEditable,@ApiParam(value = "Right alert 0 or 1") @Valid @RequestParam(value = "alert", required = false) Boolean alert,@ApiParam(value = "Right audit 0 or 1") @Valid @RequestParam(value = "audit", required = false) Boolean audit,@ApiParam(value = "type of of alert 4=juri, 8=score, 12=juri+score (ex: alertType[]=4&alertype[]=12)") @Valid @RequestParam(value = "alertType[]", required = false) Integer alertType,@ApiParam(value = "Portfolio perso or not 1=perso, 0=pro") @Valid @RequestParam(value = "isPerso", required = false) Boolean isPerso,@ApiParam(value = "Start date of the portfolio min(YYYY-MM-DD)") @Valid @RequestParam(value = "startDate[min]", required = false) String startDateMin,@ApiParam(value = "Start date of the portfolio max (YYYY-MM-DD)") @Valid @RequestParam(value = "startDate[max]", required = false) String startDateMax,@ApiParam(value = "Value to sort", allowableValues = "portfolio.label, startDate", defaultValue = "portfolio.label") @Valid @RequestParam(value = "sort", required = false, defaultValue="portfolio.label") String sort,@ApiParam(value = "Sorting order, ‘asc’ or ‘desc’", allowableValues = "ASC, DESC", defaultValue = "ASC") @Valid @RequestParam(value = "order", required = false, defaultValue="ASC") String order);


    /**
     * GET /monitoring/targets : Return a list of targets
     *
     * @param entityId Unique identifier representing a customer (optional)
     * @param page Page number (optional)
     * @param number Number of result by page (optional)
     * @param nom partial search for the firstname + name (optional)
     * @param email partial search for the email (optional)
     * @param portfolioId Unique identifier representing a portfolio (optional)
     * @param sort Value to sort (optional, default to targetEmail)
     * @param order Sorting order, ‘asc’ or ‘desc’ (optional, default to ASC)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return a list of targets", nickname = "monitoringTargetsGet", notes = "", response = Object.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Monitoring", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Object.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/monitoring/targets",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Object> monitoringTargetsGet(@ApiParam(value = "Unique identifier representing a customer") @Valid @RequestParam(value = "entityId", required = false) Integer entityId,@ApiParam(value = "Page number") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "Number of result by page") @Valid @RequestParam(value = "number", required = false) Integer number,@ApiParam(value = "partial search for the firstname + name") @Valid @RequestParam(value = "nom", required = false) String nom,@ApiParam(value = "partial search for the email") @Valid @RequestParam(value = "email", required = false) String email,@ApiParam(value = "Unique identifier representing a portfolio") @Valid @RequestParam(value = "portfolioId", required = false) Integer portfolioId,@ApiParam(value = "Value to sort", allowableValues = "targetEmail, targetLastname", defaultValue = "targetEmail") @Valid @RequestParam(value = "sort", required = false, defaultValue="targetEmail") String sort,@ApiParam(value = "Sorting order, ‘asc’ or ‘desc’", allowableValues = "ASC, DESC", defaultValue = "ASC") @Valid @RequestParam(value = "order", required = false, defaultValue="ASC") String order);


    /**
     * POST /monitoring/userSubscriptions : POST a user and subscription
     *
     * @param targetEmail  (optional)
     * @param fullName  (optional)
     * @param comment  (optional)
     * @param portfolios  (optional)
     * @return The user and subscription have been added (status code 204)
     *         or A part of portfolios have not been added (status code 206)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     *         or Conflict (status code 409)
     */
    @ApiOperation(value = "POST a user and subscription", nickname = "monitoringUserSubscriptionsPost", notes = "", authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Monitoring", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The user and subscription have been added"),
        @ApiResponse(code = 206, message = "A part of portfolios have not been added"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class),
        @ApiResponse(code = 409, message = "Conflict") })
    @RequestMapping(value = "/monitoring/userSubscriptions",
        produces = "*/*", 
        consumes = "multipart/form-data",
        method = RequestMethod.POST)
    ResponseEntity<Void> monitoringUserSubscriptionsPost(@ApiParam(value = "" ) @RequestParam(value="targetEmail", required=false)  String targetEmail,@ApiParam(value = "" ) @RequestParam(value="fullName", required=false)  String fullName,@ApiParam(value = "" ) @RequestParam(value="comment", required=false)  String comment,@ApiParam(value = "" ) @RequestParam(value="portfolios", required=false)  List<MonitoringUserSubscriptionsPortfolios> portfolios);

}
