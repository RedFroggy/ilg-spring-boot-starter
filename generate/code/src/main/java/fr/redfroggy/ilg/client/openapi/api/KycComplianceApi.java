/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package fr.redfroggy.ilg.client.openapi.api;

import fr.redfroggy.ilg.client.openapi.model.Conformity;
import fr.redfroggy.ilg.client.openapi.model.ConformityRisk;
import fr.redfroggy.ilg.client.openapi.model.Error400Model;
import fr.redfroggy.ilg.client.openapi.model.Error401Model;
import fr.redfroggy.ilg.client.openapi.model.Error403Model;
import fr.redfroggy.ilg.client.openapi.model.ErrorModel;
import fr.redfroggy.ilg.client.openapi.model.InlineObject;
import fr.redfroggy.ilg.client.openapi.model.InlineResponse2001;
import fr.redfroggy.ilg.client.openapi.model.KycConformitySummaryModel;
import fr.redfroggy.ilg.client.openapi.model.KycModel;
import fr.redfroggy.ilg.client.openapi.model.KycUbo;
import java.util.List;
import fr.redfroggy.ilg.client.openapi.model.ScreeningCandidates;
import fr.redfroggy.ilg.client.openapi.model.ScreeningCandidates2;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "KycCompliance", description = "the KycCompliance API")
public interface KycComplianceApi {

    /**
     * GET /codes/activity/{id}/risk : Return a risk for an activity
     *
     * @param id Unique identifier representing a specific company (required)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return a risk for an activity", nickname = "codesActivityIdRiskGet", notes = "", response = ConformityRisk.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "KYC/Compliance", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = ConformityRisk.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/codes/activity/{id}/risk",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<ConformityRisk> codesActivityIdRiskGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id);


    /**
     * GET /codes/country/{country}/risk : Return a risk for a country
     *
     * @param country Country Code in ISO 3166-2 (required)
     * @return Json ConformityRisk (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return a risk for a country", nickname = "codesCountryCountryRiskGet", notes = "", response = ConformityRisk.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "KYC/Compliance", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Json ConformityRisk", response = ConformityRisk.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/codes/country/{country}/risk",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<ConformityRisk> codesCountryCountryRiskGet(@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country);


    /**
     * GET /companies/{country}/{id}/conformity/summary : Return complify summary for company
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @return Complify summary for company (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     * @deprecated
     */
    @ApiOperation(value = "Return complify summary for company", nickname = "companiesCountryIdConformitySummaryGet", notes = "", response = InlineResponse2001.class, responseContainer = "List", authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "KYC/Compliance", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Complify summary for company", response = InlineResponse2001.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/conformity/summary",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<InlineResponse2001>> companiesCountryIdConformitySummaryGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country);


    /**
     * GET /companies/{country}/{id}/executives/screening : Return screening of company&#39;s executives
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @return Screening candidates for company&#39;s executives (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     * @deprecated
     */
    @ApiOperation(value = "Return screening of company's executives", nickname = "companiesCountryIdExecutivesScreeningGet", notes = "", response = ScreeningCandidates2.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "KYC/Compliance", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Screening candidates for company's executives", response = ScreeningCandidates2.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/executives/screening",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<ScreeningCandidates2> companiesCountryIdExecutivesScreeningGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country);


    /**
     * GET /companies/{country}/{id}/group/screening : Return screening for company group head
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @return Screening candidates for company group head (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     * @deprecated
     */
    @ApiOperation(value = "Return screening for company group head", nickname = "companiesCountryIdGroupScreeningGet", notes = "", response = ScreeningCandidates2.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "KYC/Compliance", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Screening candidates for company group head", response = ScreeningCandidates2.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/group/screening",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<ScreeningCandidates2> companiesCountryIdGroupScreeningGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country);


    /**
     * GET /companies/{country}/{id}/kyc/conformity/activityRisk : Return a risk for an activity
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @return Activity risk (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return a risk for an activity", nickname = "companiesCountryIdKycConformityActivityRiskGet", notes = "", response = ConformityRisk.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "KYC/Compliance", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Activity risk", response = ConformityRisk.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/kyc/conformity/activityRisk",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<ConformityRisk> companiesCountryIdKycConformityActivityRiskGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country);


    /**
     * GET /companies/{country}/{id}/kyc/conformity/countryRisk : Return country Risk
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @return Country risk (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return country Risk", nickname = "companiesCountryIdKycConformityCountryRiskGet", notes = "", response = ConformityRisk.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "KYC/Compliance", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Country risk", response = ConformityRisk.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/kyc/conformity/countryRisk",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<ConformityRisk> companiesCountryIdKycConformityCountryRiskGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country);


    /**
     * GET /companies/{country}/{id}/kyc/conformity : Return conformity informations
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return conformity informations", nickname = "companiesCountryIdKycConformityGet", notes = "", response = Conformity.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "KYC/Compliance", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Conformity.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/kyc/conformity",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Conformity> companiesCountryIdKycConformityGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country);


    /**
     * GET /companies/{country}/{id}/kyc/conformity/operatingRisk : Return conformity operating risk informations
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @return Operating risk (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return conformity operating risk informations", nickname = "companiesCountryIdKycConformityOperatingRiskGet", notes = "", response = ConformityRisk.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "KYC/Compliance", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Operating risk", response = ConformityRisk.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/kyc/conformity/operatingRisk",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<ConformityRisk> companiesCountryIdKycConformityOperatingRiskGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country);


    /**
     * GET /companies/{country}/{id}/kyc/conformity/screening : Return screening candidates for given modules
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @param modules Conformity screening module, by default all modules are selected (optional, default to new ArrayList&lt;&gt;())
     * @return Screening candidates (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return screening candidates for given modules", nickname = "companiesCountryIdKycConformityScreeningGet", notes = "", response = ScreeningCandidates.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "KYC/Compliance", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Screening candidates", response = ScreeningCandidates.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/kyc/conformity/screening",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<ScreeningCandidates> companiesCountryIdKycConformityScreeningGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country,@ApiParam(value = "Conformity screening module, by default all modules are selected", allowableValues = "company, executives, shareholders, ubos, group") @Valid @RequestParam(value = "modules[]", required = false) List<String> modules);


    /**
     * POST /companies/{country}/{id}/kyc/conformity/screening/process : Process a screening candidate and return screening candidates for given modules
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @param screeningProcess Informations to proceed a candidate, &#x60;candidatesId&#x60;, &#x60;candidateId&#x60; and &#x60;processed&#x60; are &lt;strong&gt;mandatory&lt;/strong&gt;. &#x60;siren&#x60; and &#x60;individualId&#x60; are &lt;strong&gt;optionnal&lt;/strong&gt; and can be null. (required)
     * @param modules Conformity screening module, by default all modules are selected (optional, default to new ArrayList&lt;&gt;())
     * @return Screening candidates (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Process a screening candidate and return screening candidates for given modules", nickname = "companiesCountryIdKycConformityScreeningProcessPost", notes = "", response = ScreeningCandidates.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "KYC/Compliance", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Screening candidates", response = ScreeningCandidates.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/kyc/conformity/screening/process",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<ScreeningCandidates> companiesCountryIdKycConformityScreeningProcessPost(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country,@ApiParam(value = "Informations to proceed a candidate, `candidatesId`, `candidateId` and `processed` are <strong>mandatory</strong>. `siren` and `individualId` are <strong>optionnal</strong> and can be null." ,required=true )  @Valid @RequestBody List<InlineObject> screeningProcess,@ApiParam(value = "Conformity screening module, by default all modules are selected", allowableValues = "company, executives, shareholders, ubos, group") @Valid @RequestParam(value = "modules[]", required = false) List<String> modules);


    /**
     * GET /companies/{country}/{id}/kyc/conformity/screening/purchase : Return purchased screening candidates for given modules
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @param modules Conformity screening module you want to purchase, by default all modules are selected (optional, default to new ArrayList&lt;&gt;())
     * @return Purchased screening candidates (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return purchased screening candidates for given modules", nickname = "companiesCountryIdKycConformityScreeningPurchaseGet", notes = "", response = ScreeningCandidates.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "KYC/Compliance", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Purchased screening candidates", response = ScreeningCandidates.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/kyc/conformity/screening/purchase",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<ScreeningCandidates> companiesCountryIdKycConformityScreeningPurchaseGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country,@ApiParam(value = "Conformity screening module you want to purchase, by default all modules are selected", allowableValues = "company, executives, shareholders, ubos, group") @Valid @RequestParam(value = "modules[]", required = false) List<String> modules);


    /**
     * GET /companies/{country}/{id}/kyc/conformity/summary : Return complify summary for company
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @return Complify summary for company (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return complify summary for company", nickname = "companiesCountryIdKycConformitySummaryGet", notes = "", response = KycConformitySummaryModel.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "KYC/Compliance", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Complify summary for company", response = KycConformitySummaryModel.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/kyc/conformity/summary",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<KycConformitySummaryModel> companiesCountryIdKycConformitySummaryGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country);


    /**
     * GET /companies/{country}/{id}/kyc : Return ultimate beneficial owners and conformity informations
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return ultimate beneficial owners and conformity informations", nickname = "companiesCountryIdKycGet", notes = "", response = KycModel.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "KYC/Compliance", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = KycModel.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/kyc",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<KycModel> companiesCountryIdKycGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country);


    /**
     * GET /companies/{country}/{id}/kyc/ubo : Return a list of ultimate beneficial owners
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return a list of ultimate beneficial owners", nickname = "companiesCountryIdKycUboGet", notes = "", response = KycUbo.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "KYC/Compliance", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = KycUbo.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/kyc/ubo",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<KycUbo> companiesCountryIdKycUboGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country);


    /**
     * GET /companies/{country}/{id}/kyc/ubo/screening : Return screening of ultimate beneficial owners
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @return Screening candidates for company&#39;s shareholders (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     * @deprecated
     */
    @ApiOperation(value = "Return screening of ultimate beneficial owners", nickname = "companiesCountryIdKycUboScreeningGet", notes = "", response = ScreeningCandidates2.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "KYC/Compliance", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Screening candidates for company's shareholders", response = ScreeningCandidates2.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/kyc/ubo/screening",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<ScreeningCandidates2> companiesCountryIdKycUboScreeningGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country);


    /**
     * GET /companies/{country}/{id}/links/shareholders/screening : Return screening of company&#39;s shareholders
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @return Screening candidates for company&#39;s shareholders (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     * @deprecated
     */
    @ApiOperation(value = "Return screening of company's shareholders", nickname = "companiesCountryIdLinksShareholdersScreeningGet", notes = "", response = ScreeningCandidates2.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "KYC/Compliance", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Screening candidates for company's shareholders", response = ScreeningCandidates2.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/links/shareholders/screening",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<ScreeningCandidates2> companiesCountryIdLinksShareholdersScreeningGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country);


    /**
     * GET /companies/{country}/{id}/screening : Return screening of a company
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @return Screening candidates for a company (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     * @deprecated
     */
    @ApiOperation(value = "Return screening of a company", nickname = "companiesCountryIdScreeningGet", notes = "", response = ScreeningCandidates2.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "KYC/Compliance", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Screening candidates for a company", response = ScreeningCandidates2.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/screening",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<ScreeningCandidates2> companiesCountryIdScreeningGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country);


    /**
     * GET /executive/{id}/conformity/countryRisk : Return a risk for an executive
     *
     * @param id Unique identifier representing an executive (required)
     * @return Json ConformityRisk (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return a risk for an executive", nickname = "executiveIdConformityCountryRiskGet", notes = "", response = ConformityRisk.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "KYC/Compliance", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Json ConformityRisk", response = ConformityRisk.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/executive/{id}/conformity/countryRisk",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<ConformityRisk> executiveIdConformityCountryRiskGet(@ApiParam(value = "Unique identifier representing an executive",required=true) @PathVariable("id") String id);

}
