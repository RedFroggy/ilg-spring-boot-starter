/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package fr.redfroggy.ilg.client.openapi.api;

import fr.redfroggy.ilg.client.openapi.model.Availability;
import fr.redfroggy.ilg.client.openapi.model.Company;
import fr.redfroggy.ilg.client.openapi.model.CompanyMandats;
import fr.redfroggy.ilg.client.openapi.model.Contact;
import fr.redfroggy.ilg.client.openapi.model.Error400Model;
import fr.redfroggy.ilg.client.openapi.model.Error401Model;
import fr.redfroggy.ilg.client.openapi.model.Error403Model;
import fr.redfroggy.ilg.client.openapi.model.ErrorModel;
import fr.redfroggy.ilg.client.openapi.model.Executive;
import fr.redfroggy.ilg.client.openapi.model.ExecutiveTerms;
import fr.redfroggy.ilg.client.openapi.model.Identity;
import fr.redfroggy.ilg.client.openapi.model.InlineObject1;
import fr.redfroggy.ilg.client.openapi.model.InlineObject2;
import fr.redfroggy.ilg.client.openapi.model.InlineObject3;
import fr.redfroggy.ilg.client.openapi.model.InlineObject4;
import fr.redfroggy.ilg.client.openapi.model.InlineObject5;
import fr.redfroggy.ilg.client.openapi.model.InlineObject6;
import fr.redfroggy.ilg.client.openapi.model.InlineObject7;
import fr.redfroggy.ilg.client.openapi.model.InlineResponse200;
import fr.redfroggy.ilg.client.openapi.model.Risk;
import fr.redfroggy.ilg.client.openapi.model.Score;
import fr.redfroggy.ilg.client.openapi.model.Workforce;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "Company", description = "the Company API")
public interface CompanyApi {

    /**
     * GET /companies/{country}/{id}/availability : Return which data are available for a company
     * True when data are available, false otherwise, null if you can not access data
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return which data are available for a company", nickname = "companiesCountryIdAvailabilityGet", notes = "True when data are available, false otherwise, null if you can not access data", response = Availability.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Company", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Availability.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ErrorModel.class),
        @ApiResponse(code = 404, message = "Resource not found", response = Error403Model.class) })
    @RequestMapping(value = "/companies/{country}/{id}/availability",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Availability> companiesCountryIdAvailabilityGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country);


    /**
     * GET /companies/{country}/{id} : Return a company
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return a company", nickname = "companiesCountryIdGet", notes = "", response = Company.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Company", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Company.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Company> companiesCountryIdGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country);


    /**
     * GET /companies/{country}/{id}/identity/contact : Return contact information for a given company
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return contact information for a given company", nickname = "companiesCountryIdIdentityContactGet", notes = "", response = Contact.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Company", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Contact.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/identity/contact",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Contact> companiesCountryIdIdentityContactGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country);


    /**
     * GET /companies/{country}/{id}/identity : Return identity card of a company
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return identity card of a company", nickname = "companiesCountryIdIdentityGet", notes = "", response = Identity.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Company", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Identity.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/identity",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Identity> companiesCountryIdIdentityGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country);


    /**
     * GET /companies/{country}/{id}/identity/workforce : Return workforce of a company
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return workforce of a company", nickname = "companiesCountryIdIdentityWorkforceGet", notes = "", response = Workforce.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Company", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Workforce.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/identity/workforce",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Workforce> companiesCountryIdIdentityWorkforceGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country);


    /**
     * GET /companies/{country}/{id}/kyc/conformity/report : Return conformity report as PDF
     * You can  also request base64 encoded file with .base64 extension or send it by mail with .mail extension
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @param module Modules to extract in report, with their parameters (required)
     * @param comment  (optional)
     * @return Document Created (status code 201)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return conformity report as PDF", nickname = "companiesCountryIdKycConformityReportGet", notes = "You can  also request base64 encoded file with .base64 extension or send it by mail with .mail extension", authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Company", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Document Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/kyc/conformity/report",
        produces = "application/pdf,text/plain", 
        method = RequestMethod.GET)
    ResponseEntity<Void> companiesCountryIdKycConformityReportGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country,@NotNull @ApiParam(value = "Modules to extract in report, with their parameters", required = true) @Valid @RequestParam(value = "module", required = true) List<String> module,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject1 comment);


    /**
     * POST /companies/{country}/{id}/kyc/conformity/report : Return conformity report as PDF
     * You can  also request base64 encoded file with .base64 extension or send it by mail with .mail extension
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @param module Modules to extract in report, with their parameters (required)
     * @param comment  (optional)
     * @return Document Created (status code 201)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return conformity report as PDF", nickname = "companiesCountryIdKycConformityReportPost", notes = "You can  also request base64 encoded file with .base64 extension or send it by mail with .mail extension", authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Company", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Document Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/kyc/conformity/report",
        produces = "application/pdf,text/plain", 
        method = RequestMethod.POST)
    ResponseEntity<Void> companiesCountryIdKycConformityReportPost(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country,@NotNull @ApiParam(value = "Modules to extract in report, with their parameters", required = true) @Valid @RequestParam(value = "module", required = true) List<String> module,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject2 comment);


    /**
     * GET /companies/{country}/{id}/mandataire : Return the company legal representative
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return the company legal representative", nickname = "companiesCountryIdMandataireGet", notes = "", response = Executive.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Company", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Executive.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/mandataire",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Executive> companiesCountryIdMandataireGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country);


    /**
     * GET /companies/{country}/{id}/mandats : All assignments for the given company
     * Use /companies/{country}/{id}/terms instead
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     * @deprecated
     */
    @ApiOperation(value = "All assignments for the given company", nickname = "companiesCountryIdMandatsGet", notes = "Use /companies/{country}/{id}/terms instead", response = CompanyMandats.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Company", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = CompanyMandats.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/mandats",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<CompanyMandats> companiesCountryIdMandatsGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country);


    /**
     * GET /companies/{country}/{id}/report-financial : Return financial report as PDF
     * You can also request base64 encoded file with .base64 extension or send it by mail with .mail extension
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @param module Modules to extract in report, with their parameters (required)
     * @param comment  (optional)
     * @return Document Created (status code 201)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return financial report as PDF", nickname = "companiesCountryIdReportFinancialGet", notes = "You can also request base64 encoded file with .base64 extension or send it by mail with .mail extension", authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Company", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Document Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/report-financial",
        produces = "application/pdf,text/plain", 
        method = RequestMethod.GET)
    ResponseEntity<Void> companiesCountryIdReportFinancialGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country,@NotNull @ApiParam(value = "Modules to extract in report, with their parameters", required = true) @Valid @RequestParam(value = "module", required = true) List<String> module,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject6 comment);


    /**
     * POST /companies/{country}/{id}/report-financial : Return financial report as PDF
     * You can also request base64 encoded file with .base64 extension or send it by mail with .mail extension
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @param module Modules to extract in report, with their parameters (required)
     * @param comment  (optional)
     * @return Document Created (status code 201)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return financial report as PDF", nickname = "companiesCountryIdReportFinancialPost", notes = "You can also request base64 encoded file with .base64 extension or send it by mail with .mail extension", authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Company", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Document Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/report-financial",
        produces = "application/pdf,text/plain", 
        method = RequestMethod.POST)
    ResponseEntity<Void> companiesCountryIdReportFinancialPost(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country,@NotNull @ApiParam(value = "Modules to extract in report, with their parameters", required = true) @Valid @RequestParam(value = "module", required = true) List<String> module,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject7 comment);


    /**
     * GET /companies/{country}/{id}/report : Return full report as PDF
     * You can also request base64 encoded file with .base64 extension or send it by mail with .mail extension
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @param module Modules to extract in report, with their parameters (required)
     * @param comment  (optional)
     * @return Document Created (status code 201)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return full report as PDF", nickname = "companiesCountryIdReportGet", notes = "You can also request base64 encoded file with .base64 extension or send it by mail with .mail extension", authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Company", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Document Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/report",
        produces = "application/pdf,text/plain", 
        method = RequestMethod.GET)
    ResponseEntity<Void> companiesCountryIdReportGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country,@NotNull @ApiParam(value = "Modules to extract in report, with their parameters", required = true) @Valid @RequestParam(value = "module", required = true) List<String> module,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject3 comment);


    /**
     * POST /companies/{country}/{id}/report : Return full report as PDF
     * You can also request base64 encoded file with .base64 extension or send it by mail with .mail extension
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @param module Modules to extract in report, with their parameters (required)
     * @param comment  (optional)
     * @return Document Created (status code 201)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return full report as PDF", nickname = "companiesCountryIdReportPost", notes = "You can also request base64 encoded file with .base64 extension or send it by mail with .mail extension", authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Company", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Document Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/report",
        produces = "application/pdf,text/plain", 
        method = RequestMethod.POST)
    ResponseEntity<Void> companiesCountryIdReportPost(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country,@NotNull @ApiParam(value = "Modules to extract in report, with their parameters", required = true) @Valid @RequestParam(value = "module", required = true) List<String> module,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject4 comment);


    /**
     * GET /companies/{country}/{id}/report/purchase : Purchase full report (international only)
     *
     * @param country Country Code in ISO 3166-2 (required)
     * @param id Unique identifier representing a specific company (required)
     * @param reportType Report type (optional, default to online)
     * @return Purchase Created (status code 201)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Purchase full report (international only)", nickname = "companiesCountryIdReportPurchaseGet", notes = "", authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Company", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Purchase Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/report/purchase",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Void> companiesCountryIdReportPurchaseGet(@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country,@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@ApiParam(value = "Report type", allowableValues = "online, offline", defaultValue = "online") @Valid @RequestParam(value = "reportType", required = false, defaultValue="online") String reportType);


    /**
     * GET /companies/{country}/{id}/reports : List all reports for a company (international only)
     *
     * @param country Country Code in ISO 3166-2 (required)
     * @param id Unique identifier representing a specific company (required)
     * @return Ok (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "List all reports for a company (international only)", nickname = "companiesCountryIdReportsGet", notes = "", response = InlineResponse200.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Company", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = InlineResponse200.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/reports",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse200> companiesCountryIdReportsGet(@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country,@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id);


    /**
     * GET /companies/{country}/{id}/risk : Return a company risk class
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return a company risk class", nickname = "companiesCountryIdRiskGet", notes = "", response = Risk.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Company","Score", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Risk.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/risk",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Risk> companiesCountryIdRiskGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country);


    /**
     * GET /companies/{country}/{id}/score : Return a company score
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return a company score", nickname = "companiesCountryIdScoreGet", notes = "", response = Score.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Company","Score", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Score.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/score",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Score> companiesCountryIdScoreGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country);


    /**
     * GET /companies/{country}/{id}/site/{sid}/report : Return site report as PDF
     * You can also request base64 encoded file with .base64 extension or send it by mail with .mail extension
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @param sid Unique identifier representing a site (required)
     * @return Document Created (status code 201)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return site report as PDF", nickname = "companiesCountryIdSiteSidReportGet", notes = "You can also request base64 encoded file with .base64 extension or send it by mail with .mail extension", authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Company", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Document Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/site/{sid}/report",
        produces = "application/pdf,text/plain", 
        method = RequestMethod.GET)
    ResponseEntity<Void> companiesCountryIdSiteSidReportGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country,@ApiParam(value = "Unique identifier representing a site",required=true) @PathVariable("sid") String sid);


    /**
     * GET /companies/{country}/{id}/terms : All assignments for the given company
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @param blockId Unique identifier representing a block (optional)
     * @param positionRole Role representing the type of a membership (optional)
     * @param principal  (optional)
     * @param termsState Filters companies with at least one (true) or no (false) active term of office (optional)
     * @param ordersStartDate Term of office start date (asc/desc) (optional)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "All assignments for the given company", nickname = "companiesCountryIdTermsGet", notes = "", response = ExecutiveTerms.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Company", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = ExecutiveTerms.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/terms",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<ExecutiveTerms> companiesCountryIdTermsGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country,@ApiParam(value = "Unique identifier representing a block") @Valid @RequestParam(value = "blockId", required = false) Integer blockId,@ApiParam(value = "Role representing the type of a membership", allowableValues = "M, O, CAC") @Valid @RequestParam(value = "positionRole", required = false) String positionRole,@ApiParam(value = "") @Valid @RequestParam(value = "principal", required = false) Boolean principal,@ApiParam(value = "Filters companies with at least one (true) or no (false) active term of office") @Valid @RequestParam(value = "termsState", required = false) Boolean termsState,@ApiParam(value = "Term of office start date (asc/desc)") @Valid @RequestParam(value = "orders[start_date]", required = false) String ordersStartDate);


    /**
     * POST /companies/{country}/reports : List last report for company ids (international only)
     *
     * @param country Country Code in ISO 3166-2 (required)
     * @param ids  (required)
     * @return Ok (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "List last report for company ids (international only)", nickname = "companiesCountryReportsPost", notes = "", response = Object.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Company", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Object.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/reports",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<Object> companiesCountryReportsPost(@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country,@ApiParam(value = "" ,required=true )  @Valid @RequestBody InlineObject5 ids);

}
