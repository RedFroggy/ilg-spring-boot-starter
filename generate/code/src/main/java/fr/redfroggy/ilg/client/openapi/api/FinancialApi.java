/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package fr.redfroggy.ilg.client.openapi.api;

import fr.redfroggy.ilg.client.openapi.model.Balance;
import fr.redfroggy.ilg.client.openapi.model.BalanceRawData;
import fr.redfroggy.ilg.client.openapi.model.Balances;
import fr.redfroggy.ilg.client.openapi.model.DebtStatus;
import fr.redfroggy.ilg.client.openapi.model.Error400Model;
import fr.redfroggy.ilg.client.openapi.model.Error401Model;
import fr.redfroggy.ilg.client.openapi.model.Error403Model;
import fr.redfroggy.ilg.client.openapi.model.ErrorModel;
import fr.redfroggy.ilg.client.openapi.model.PrivilegeDetails;
import fr.redfroggy.ilg.client.openapi.model.Ratios;
import fr.redfroggy.ilg.client.openapi.model.SoldeIntermediaireGestion;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "Financial", description = "the Financial API")
public interface FinancialApi {

    /**
     * GET /companies/{country}/{id}/financial/balance/{closingDate}/{balanceType}/documents/accounting : Return balance in PDF if available
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @param closingDate Specific year for balance (required)
     * @param balanceType Type of balance (required)
     * @return Pdf stream (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return balance in PDF if available", nickname = "companiesCountryIdFinancialBalanceClosingDateBalanceTypeDocumentsAccountingGet", notes = "", authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Financial", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Pdf stream"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/financial/balance/{closingDate}/{balanceType}/documents/accounting",
        produces = "application/pdf,text/plain", 
        method = RequestMethod.GET)
    ResponseEntity<Void> companiesCountryIdFinancialBalanceClosingDateBalanceTypeDocumentsAccountingGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country,@Pattern(regexp="^\\d+$") @ApiParam(value = "Specific year for balance",required=true) @PathVariable("closingDate") String closingDate,@ApiParam(value = "Type of balance",required=true, allowableValues = "\"social\", \"consolidated\"") @PathVariable("balanceType") String balanceType);


    /**
     * GET /companies/{country}/{id}/financial/balance/{closingDate}/{balanceType}/documents/table : Return balance in XLSX if available
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @param closingDate Specific year for balance (required)
     * @param balanceType Type of balance (required)
     * @return Pdf stream (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return balance in XLSX if available", nickname = "companiesCountryIdFinancialBalanceClosingDateBalanceTypeDocumentsTableGet", notes = "", authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Financial", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Pdf stream"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/financial/balance/{closingDate}/{balanceType}/documents/table",
        produces = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,text/plain", 
        method = RequestMethod.GET)
    ResponseEntity<Void> companiesCountryIdFinancialBalanceClosingDateBalanceTypeDocumentsTableGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country,@Pattern(regexp="^\\d+$") @ApiParam(value = "Specific year for balance",required=true) @PathVariable("closingDate") String closingDate,@ApiParam(value = "Type of balance",required=true, allowableValues = "\"social\", \"consolidated\"") @PathVariable("balanceType") String balanceType);


    /**
     * GET /companies/{country}/{id}/financial/balance/{closingDate}/{type} : Return balance information for a given company
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @param closingDate Specific year for balance (required)
     * @param type Type of balance (required)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return balance information for a given company", nickname = "companiesCountryIdFinancialBalanceClosingDateTypeGet", notes = "", response = Balance.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Financial", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Balance.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/financial/balance/{closingDate}/{type}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Balance> companiesCountryIdFinancialBalanceClosingDateTypeGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country,@Pattern(regexp="^\\d+$") @ApiParam(value = "Specific year for balance",required=true) @PathVariable("closingDate") String closingDate,@ApiParam(value = "Type of balance",required=true, allowableValues = "\"social\", \"consolidated\"") @PathVariable("type") String type);


    /**
     * GET /companies/{country}/{id}/financial/balance/{closingDate}/{type}/ratios : Return balance ratios for a given company
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @param closingDate Specific year for balance (required)
     * @param type Type of balance (required)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return balance ratios for a given company", nickname = "companiesCountryIdFinancialBalanceClosingDateTypeRatiosGet", notes = "", response = Ratios.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Financial", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Ratios.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/financial/balance/{closingDate}/{type}/ratios",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Ratios> companiesCountryIdFinancialBalanceClosingDateTypeRatiosGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country,@Pattern(regexp="^\\d+$") @ApiParam(value = "Specific year for balance",required=true) @PathVariable("closingDate") String closingDate,@ApiParam(value = "Type of balance",required=true, allowableValues = "\"social\", \"consolidated\"") @PathVariable("type") String type);


    /**
     * GET /companies/{country}/{id}/financial/balance/{closingDate}/{type}/raw : Return balance raw information for a given company
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @param closingDate Specific year for balance (required)
     * @param type Type of balance (required)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return balance raw information for a given company", nickname = "companiesCountryIdFinancialBalanceClosingDateTypeRawGet", notes = "", response = BalanceRawData.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Financial", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = BalanceRawData.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/financial/balance/{closingDate}/{type}/raw",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<BalanceRawData> companiesCountryIdFinancialBalanceClosingDateTypeRawGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country,@Pattern(regexp="^\\d+$") @ApiParam(value = "Specific year for balance",required=true) @PathVariable("closingDate") String closingDate,@ApiParam(value = "Type of balance",required=true, allowableValues = "\"social\", \"consolidated\"") @PathVariable("type") String type);


    /**
     * GET /companies/{country}/{id}/financial/balance/{closingDate}/{type}/sig : Return intermediary accounting totals information for a given company
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @param closingDate Specific year for balance (required)
     * @param type Type of balance (required)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return intermediary accounting totals information for a given company", nickname = "companiesCountryIdFinancialBalanceClosingDateTypeSigGet", notes = "", response = SoldeIntermediaireGestion.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Financial", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = SoldeIntermediaireGestion.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/financial/balance/{closingDate}/{type}/sig",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<SoldeIntermediaireGestion> companiesCountryIdFinancialBalanceClosingDateTypeSigGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country,@Pattern(regexp="^\\d+$") @ApiParam(value = "Specific year for balance",required=true) @PathVariable("closingDate") String closingDate,@ApiParam(value = "Type of balance",required=true, allowableValues = "\"social\", \"consolidated\"") @PathVariable("type") String type);


    /**
     * GET /companies/{country}/{id}/financial/balance/current/{type} : Return current balance information for a given company
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @param type Type of balance (required)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return current balance information for a given company", nickname = "companiesCountryIdFinancialBalanceCurrentTypeGet", notes = "", response = Balance.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Financial", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Balance.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/financial/balance/current/{type}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Balance> companiesCountryIdFinancialBalanceCurrentTypeGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country,@ApiParam(value = "Type of balance",required=true, allowableValues = "\"social\", \"consolidated\"") @PathVariable("type") String type);


    /**
     * GET /companies/{country}/{id}/financial/balance/{millesime}/{balanceType}/documents/audit/{numDepot} : Return full balance with auditor report in PDF if available
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @param millesime Year, exclusively used with documentType &#x3D; &#39;audit&#39; (required)
     * @param balanceType Type of balance (required)
     * @param numDepot Document number, exclusively used with documentType &#x3D; &#39;audit&#39; (required)
     * @return Pdf stream (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return full balance with auditor report in PDF if available", nickname = "companiesCountryIdFinancialBalanceMillesimeBalanceTypeDocumentsAuditNumDepotGet", notes = "", authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Financial", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Pdf stream"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/financial/balance/{millesime}/{balanceType}/documents/audit/{numDepot}",
        produces = "application/pdf,text/plain", 
        method = RequestMethod.GET)
    ResponseEntity<Void> companiesCountryIdFinancialBalanceMillesimeBalanceTypeDocumentsAuditNumDepotGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country,@ApiParam(value = "Year, exclusively used with documentType = 'audit'",required=true) @PathVariable("millesime") String millesime,@ApiParam(value = "Type of balance",required=true, allowableValues = "\"social\", \"consolidated\"") @PathVariable("balanceType") String balanceType,@ApiParam(value = "Document number, exclusively used with documentType = 'audit'",required=true) @PathVariable("numDepot") String numDepot);


    /**
     * GET /companies/{country}/{id}/financial/balances : Return balances list for a given company
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @param type Type of balance social or consolidated (optional)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return balances list for a given company", nickname = "companiesCountryIdFinancialBalancesGet", notes = "", response = Balances.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Financial", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Balances.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/financial/balances",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Balances> companiesCountryIdFinancialBalancesGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country,@ApiParam(value = "Type of balance social or consolidated", allowableValues = "social, consolidated") @Valid @RequestParam(value = "type", required = false) String type);


    /**
     * GET /companies/{country}/{id}/financial/debtStatus : Return debt status for a given company
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return debt status for a given company", nickname = "companiesCountryIdFinancialDebtStatusGet", notes = "", response = DebtStatus.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Financial", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = DebtStatus.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/financial/debtStatus",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<DebtStatus> companiesCountryIdFinancialDebtStatusGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country);


    /**
     * GET /companies/{country}/{id}/financial/debtStatus/privileges : Return privileges for a given company
     *
     * @param id Unique identifier representing a specific company (required)
     * @param country Country Code in ISO 3166-2 (required)
     * @param typePrivilege Privilege type (03 for social, 04 for tax office) (optional)
     * @param status Privilege status : 1&#x3D;Actif, 2&#x3D;Partiellement radié, 3&#x3D;Radié, 4&#x3D;Expiré (optional)
     * @param order Sorting order (optional)
     * @param column Sorting column (optional)
     * @param paginate Activate/deactivate pagination (optional)
     * @return  (status code 200)
     *         or Bad Request (status code 400)
     *         or Authentication Failure: Expired Token or Invalid Token (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Return privileges for a given company", nickname = "companiesCountryIdFinancialDebtStatusPrivilegesGet", notes = "", response = PrivilegeDetails.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Financial", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = PrivilegeDetails.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400Model.class),
        @ApiResponse(code = 401, message = "Authentication Failure: Expired Token or Invalid Token", response = Error401Model.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403Model.class),
        @ApiResponse(code = 404, message = "Resource not found", response = ErrorModel.class) })
    @RequestMapping(value = "/companies/{country}/{id}/financial/debtStatus/privileges",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<PrivilegeDetails> companiesCountryIdFinancialDebtStatusPrivilegesGet(@ApiParam(value = "Unique identifier representing a specific company",required=true) @PathVariable("id") String id,@Pattern(regexp="^[A-Za-z]{2}$") @ApiParam(value = "Country Code in ISO 3166-2",required=true) @PathVariable("country") String country,@Pattern(regexp="^\\d{2}$") @ApiParam(value = "Privilege type (03 for social, 04 for tax office)") @Valid @RequestParam(value = "typePrivilege", required = false) String typePrivilege,@ApiParam(value = "Privilege status : 1=Actif, 2=Partiellement radié, 3=Radié, 4=Expiré") @Valid @RequestParam(value = "status[]", required = false) Integer status,@ApiParam(value = "Sorting order", allowableValues = "asc, desc") @Valid @RequestParam(value = "order", required = false) String order,@ApiParam(value = "Sorting column", allowableValues = "status, inscriptionDate, inscriptionNumber, debtAmount, creditorName, greffe") @Valid @RequestParam(value = "column", required = false) String column,@ApiParam(value = "Activate/deactivate pagination") @Valid @RequestParam(value = "paginate", required = false) Integer paginate);

}
