/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package fr.redfroggy.ilg.client.openapi.api;

import fr.redfroggy.ilg.client.openapi.model.AuthenticationModel;
import fr.redfroggy.ilg.client.openapi.model.ErrorModel;
import fr.redfroggy.ilg.client.openapi.model.InlineObject;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "Authentication", description = "the Authentication API")
public interface AuthenticationApi {

    /**
     * POST /login_check : Authenticate user and retrieve a token valid for 15 min, working with Content-Type multipart/form-data and x-www-form-urlencoded
     *
     * @param username Your login (required)
     * @param password Your password (required)
     * @return  (status code 200)
     *         or Bad credentials (status code 401)
     */
    @ApiOperation(value = "Authenticate user and retrieve a token valid for 15 min, working with Content-Type multipart/form-data and x-www-form-urlencoded", nickname = "loginCheckPost", notes = "", response = AuthenticationModel.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Authentication", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = AuthenticationModel.class),
        @ApiResponse(code = 401, message = "Bad credentials", response = ErrorModel.class) })
    @RequestMapping(value = "/login_check",
        produces = "*/*", 
        consumes = "multipart/form-data",
        method = RequestMethod.POST)
    ResponseEntity<AuthenticationModel> loginCheckPost(@ApiParam(value = "Your login", required=true ) @RequestParam(value="_username", required=true)  String username,@ApiParam(value = "Your password", required=true ) @RequestParam(value="_password", required=true)  String password);


    /**
     * POST /login_json : Authenticate user and retrieve a token valid for 15 min, working with Content-Type application/json
     *
     * @param credentials  (optional)
     * @return  (status code 200)
     *         or Bad credentials (status code 401)
     */
    @ApiOperation(value = "Authenticate user and retrieve a token valid for 15 min, working with Content-Type application/json", nickname = "loginJsonPost", notes = "", response = AuthenticationModel.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Authentication", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = AuthenticationModel.class),
        @ApiResponse(code = 401, message = "Bad credentials", response = ErrorModel.class) })
    @RequestMapping(value = "/login_json",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<AuthenticationModel> loginJsonPost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject credentials);


    /**
     * POST /refresh : Renew token, working with Content-Type multipart/form-data and x-www-form-urlencoded
     * Give you another token/refresh_token couple, this endpoint needs an authentication token
     *
     * @param authorization Bearer {Expired JWT} (required)
     * @param refreshToken Your refresh token (required)
     * @return  (status code 200)
     *         or Bad credentials (status code 401)
     */
    @ApiOperation(value = "Renew token, working with Content-Type multipart/form-data and x-www-form-urlencoded", nickname = "refreshPost", notes = "Give you another token/refresh_token couple, this endpoint needs an authentication token", response = AuthenticationModel.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Authentication", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = AuthenticationModel.class),
        @ApiResponse(code = 401, message = "Bad credentials", response = ErrorModel.class) })
    @RequestMapping(value = "/refresh",
        produces = "*/*", 
        consumes = "multipart/form-data",
        method = RequestMethod.POST)
    ResponseEntity<AuthenticationModel> refreshPost(@ApiParam(value = "Bearer {Expired JWT}" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "Your refresh token", required=true ) @RequestParam(value="refresh_token", required=true)  String refreshToken);

}
